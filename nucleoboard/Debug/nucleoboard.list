
nucleoboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004be0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004ca0  08004ca0  00014ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d14  08004d14  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004d14  08004d14  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d14  08004d14  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d14  08004d14  00014d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000060  08004d78  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08004d78  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d7ed  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ff6  00000000  00000000  0002d8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  0002f8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f9  00000000  00000000  00030560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a75d  00000000  00000000  00030f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fb33  00000000  00000000  0004b6b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098e78  00000000  00000000  0005b1e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000321c  00000000  00000000  000f4064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000f7280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c88 	.word	0x08004c88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08004c88 	.word	0x08004c88

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <update_encoder>:
 *      Author: Ashli Forbes
 */
#include "encoder_handler.h"

void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim)
{
 8000408:	b5b0      	push	{r4, r5, r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000418:	60fb      	str	r3, [r7, #12]
	if(!encoder_value->first_time)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	b25b      	sxtb	r3, r3
 8000420:	2b00      	cmp	r3, #0
 8000422:	d103      	bne.n	800042c <update_encoder+0x24>
	{
		encoder_value->first_time = 1;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	701a      	strb	r2, [r3, #0]
 800042a:	e052      	b.n	80004d2 <update_encoder+0xca>
	}
	else
	{
	  if(temp_counter == encoder_value->last_counter_value)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	691b      	ldr	r3, [r3, #16]
 8000430:	68fa      	ldr	r2, [r7, #12]
 8000432:	429a      	cmp	r2, r3
 8000434:	d103      	bne.n	800043e <update_encoder+0x36>
	  {
	    encoder_value->delta_position = 0;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2200      	movs	r2, #0
 800043a:	805a      	strh	r2, [r3, #2]
 800043c:	e049      	b.n	80004d2 <update_encoder+0xca>
	  }
	  else if(temp_counter > encoder_value->last_counter_value)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	691b      	ldr	r3, [r3, #16]
 8000442:	68fa      	ldr	r2, [r7, #12]
 8000444:	429a      	cmp	r2, r3
 8000446:	d922      	bls.n	800048e <update_encoder+0x86>
	  {
	    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	2210      	movs	r2, #16
 8000450:	4013      	ands	r3, r2
 8000452:	2b10      	cmp	r3, #16
 8000454:	d110      	bne.n	8000478 <update_encoder+0x70>
	    {
	      encoder_value->delta_position = -encoder_value->last_counter_value -
		(__HAL_TIM_GET_AUTORELOAD(htim)-temp_counter);
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	b29a      	uxth	r2, r3
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000460:	b29b      	uxth	r3, r3
 8000462:	1ad3      	subs	r3, r2, r3
 8000464:	b29a      	uxth	r2, r3
	      encoder_value->delta_position = -encoder_value->last_counter_value -
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	691b      	ldr	r3, [r3, #16]
 800046a:	b29b      	uxth	r3, r3
 800046c:	1ad3      	subs	r3, r2, r3
 800046e:	b29b      	uxth	r3, r3
 8000470:	b21a      	sxth	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	805a      	strh	r2, [r3, #2]
 8000476:	e02c      	b.n	80004d2 <update_encoder+0xca>
	    }
	    else
	    {
	      encoder_value->delta_position = temp_counter -
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	b29a      	uxth	r2, r3
	           encoder_value->last_counter_value;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	691b      	ldr	r3, [r3, #16]
	      encoder_value->delta_position = temp_counter -
 8000480:	b29b      	uxth	r3, r3
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	b29b      	uxth	r3, r3
 8000486:	b21a      	sxth	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	805a      	strh	r2, [r3, #2]
 800048c:	e021      	b.n	80004d2 <update_encoder+0xca>
	    }
	  }
	  else
	  {
	    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2210      	movs	r2, #16
 8000496:	4013      	ands	r3, r2
 8000498:	2b10      	cmp	r3, #16
 800049a:	d10a      	bne.n	80004b2 <update_encoder+0xaa>
	    {
		encoder_value->delta_position = temp_counter -
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	b29a      	uxth	r2, r3
	            encoder_value->last_counter_value;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	691b      	ldr	r3, [r3, #16]
		encoder_value->delta_position = temp_counter -
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	1ad3      	subs	r3, r2, r3
 80004a8:	b29b      	uxth	r3, r3
 80004aa:	b21a      	sxth	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	805a      	strh	r2, [r3, #2]
 80004b0:	e00f      	b.n	80004d2 <update_encoder+0xca>
	    }
	    else
	    {
		encoder_value->delta_position = temp_counter +
		(__HAL_TIM_GET_AUTORELOAD(htim) -
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004b8:	b29a      	uxth	r2, r3
	              encoder_value->last_counter_value);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	691b      	ldr	r3, [r3, #16]
		(__HAL_TIM_GET_AUTORELOAD(htim) -
 80004be:	b29b      	uxth	r3, r3
 80004c0:	1ad3      	subs	r3, r2, r3
 80004c2:	b29a      	uxth	r2, r3
		encoder_value->delta_position = temp_counter +
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	18d3      	adds	r3, r2, r3
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	b21a      	sxth	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	805a      	strh	r2, [r3, #2]
	    }
	   }
	}
	encoder_value->position += encoder_value ->delta_position;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	689a      	ldr	r2, [r3, #8]
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	6879      	ldr	r1, [r7, #4]
 80004da:	2002      	movs	r0, #2
 80004dc:	5e09      	ldrsh	r1, [r1, r0]
 80004de:	000c      	movs	r4, r1
 80004e0:	17c9      	asrs	r1, r1, #31
 80004e2:	000d      	movs	r5, r1
 80004e4:	1912      	adds	r2, r2, r4
 80004e6:	416b      	adcs	r3, r5
 80004e8:	6879      	ldr	r1, [r7, #4]
 80004ea:	608a      	str	r2, [r1, #8]
 80004ec:	60cb      	str	r3, [r1, #12]
	encoder_value->last_counter_value = temp_counter;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	68fa      	ldr	r2, [r7, #12]
 80004f2:	611a      	str	r2, [r3, #16]
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b004      	add	sp, #16
 80004fa:	bdb0      	pop	{r4, r5, r7, pc}

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	b087      	sub	sp, #28
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 ff17 	bl	8001334 <HAL_Init>

  /* USER CODE BEGIN Init */
  init_stepper_motor(&stepper2, Stepper2DIr_GPIO_Port, Stepper2DIr_Pin,TIM14);
 8000506:	4e56      	ldr	r6, [pc, #344]	; (8000660 <main+0x164>)
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	005a      	lsls	r2, r3, #1
 800050c:	4955      	ldr	r1, [pc, #340]	; (8000664 <main+0x168>)
 800050e:	4856      	ldr	r0, [pc, #344]	; (8000668 <main+0x16c>)
 8000510:	0033      	movs	r3, r6
 8000512:	f000 fc34 	bl	8000d7e <init_stepper_motor>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f8b5 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 fbb9 	bl	8000c90 <MX_GPIO_Init>
  MX_DMA_Init();
 800051e:	f000 fb99 	bl	8000c54 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000522:	f000 fb67 	bl	8000bf4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000526:	f000 f9a5 	bl	8000874 <MX_TIM2_Init>
  MX_TIM3_Init();
 800052a:	f000 fa0b 	bl	8000944 <MX_TIM3_Init>
  MX_TIM1_Init();
 800052e:	f000 f90b 	bl	8000748 <MX_TIM1_Init>
  MX_TIM14_Init();
 8000532:	f000 fa6d 	bl	8000a10 <MX_TIM14_Init>
  MX_TIM15_Init();
 8000536:	f000 fac1 	bl	8000abc <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  uint8_t message[DATA_LENGTH] = {'\0'};
 800053a:	230c      	movs	r3, #12
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	3304      	adds	r3, #4
 8000544:	2203      	movs	r2, #3
 8000546:	2100      	movs	r1, #0
 8000548:	0018      	movs	r0, r3
 800054a:	f003 ff17 	bl	800437c <memset>
  uint8_t RxData[DATA_LENGTH];
  int32_t dutyCycle = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dutyCycle = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
	  // measure velocity, position
	  move_stepper_motor(&stepper2, 0);
 8000556:	4b44      	ldr	r3, [pc, #272]	; (8000668 <main+0x16c>)
 8000558:	2100      	movs	r1, #0
 800055a:	0018      	movs	r0, r3
 800055c:	f000 fc25 	bl	8000daa <move_stepper_motor>
	  update_encoder(&enc_instance, &htim2);
 8000560:	4a42      	ldr	r2, [pc, #264]	; (800066c <main+0x170>)
 8000562:	4b43      	ldr	r3, [pc, #268]	; (8000670 <main+0x174>)
 8000564:	0011      	movs	r1, r2
 8000566:	0018      	movs	r0, r3
 8000568:	f7ff ff4e 	bl	8000408 <update_encoder>
	  encoder_delta_position = enc_instance.delta_position;
 800056c:	4b40      	ldr	r3, [pc, #256]	; (8000670 <main+0x174>)
 800056e:	2202      	movs	r2, #2
 8000570:	5e9b      	ldrsh	r3, [r3, r2]
 8000572:	001c      	movs	r4, r3
 8000574:	17db      	asrs	r3, r3, #31
 8000576:	001d      	movs	r5, r3
 8000578:	4b3e      	ldr	r3, [pc, #248]	; (8000674 <main+0x178>)
 800057a:	601c      	str	r4, [r3, #0]
 800057c:	605d      	str	r5, [r3, #4]
	//  encoder_delta_position = _HAL_TIM_GET_COUNTER(&htim2);
	  sprintf(message, "%d\r\n", encoder_delta_position); //add detailed message
 800057e:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <main+0x178>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	493c      	ldr	r1, [pc, #240]	; (8000678 <main+0x17c>)
 8000586:	260c      	movs	r6, #12
 8000588:	19b8      	adds	r0, r7, r6
 800058a:	f003 fed7 	bl	800433c <siprintf>
	  HAL_UART_Transmit(&huart1, message, sizeof(message), UART_TIMEOUT);
 800058e:	19b9      	adds	r1, r7, r6
 8000590:	483a      	ldr	r0, [pc, #232]	; (800067c <main+0x180>)
 8000592:	2364      	movs	r3, #100	; 0x64
 8000594:	2207      	movs	r2, #7
 8000596:	f003 f847 	bl	8003628 <HAL_UART_Transmit>
	  HAL_UART_Receive_DMA(&huart1, RxData, sizeof(RxData));
 800059a:	1d39      	adds	r1, r7, #4
 800059c:	4b37      	ldr	r3, [pc, #220]	; (800067c <main+0x180>)
 800059e:	2207      	movs	r2, #7
 80005a0:	0018      	movs	r0, r3
 80005a2:	f003 f8e1 	bl	8003768 <HAL_UART_Receive_DMA>

	  //check for negative PWM
 	  if(RxData[0]== '-')
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b2d      	cmp	r3, #45	; 0x2d
 80005ac:	d107      	bne.n	80005be <main+0xc2>
 	  {
 		 HAL_GPIO_WritePin(MotoDir_GPIO_Port , MotoDir_Pin, GPIO_PIN_RESET);
 80005ae:	2390      	movs	r3, #144	; 0x90
 80005b0:	05db      	lsls	r3, r3, #23
 80005b2:	2200      	movs	r2, #0
 80005b4:	2120      	movs	r1, #32
 80005b6:	0018      	movs	r0, r3
 80005b8:	f001 fb0e 	bl	8001bd8 <HAL_GPIO_WritePin>
 80005bc:	e006      	b.n	80005cc <main+0xd0>
 	  }
 	  else
 	  {
 		 HAL_GPIO_WritePin(MotoDir_GPIO_Port , MotoDir_Pin, GPIO_PIN_SET);
 80005be:	2390      	movs	r3, #144	; 0x90
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	2201      	movs	r2, #1
 80005c4:	2120      	movs	r1, #32
 80005c6:	0018      	movs	r0, r3
 80005c8:	f001 fb06 	bl	8001bd8 <HAL_GPIO_WritePin>
 	  }

	  for(uint8_t i = 0; RxData[i] != '\t' && i< sizeof(RxData); i++)
 80005cc:	2313      	movs	r3, #19
 80005ce:	18fb      	adds	r3, r7, r3
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
 80005d4:	e01b      	b.n	800060e <main+0x112>
	   {
		  if(RxData[i]== '-')
 80005d6:	2013      	movs	r0, #19
 80005d8:	183b      	adds	r3, r7, r0
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	1d3a      	adds	r2, r7, #4
 80005de:	5cd3      	ldrb	r3, [r2, r3]
 80005e0:	2b2d      	cmp	r3, #45	; 0x2d
 80005e2:	d00d      	beq.n	8000600 <main+0x104>
			  continue;
		  }
		  else
		  {
			  //change values from string to integer value
			  dutyCycle = dutyCycle*10 + (RxData[i] - '0');
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	0013      	movs	r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	189b      	adds	r3, r3, r2
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	0019      	movs	r1, r3
 80005f0:	183b      	adds	r3, r7, r0
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	1d3a      	adds	r2, r7, #4
 80005f6:	5cd3      	ldrb	r3, [r2, r3]
 80005f8:	3b30      	subs	r3, #48	; 0x30
 80005fa:	18cb      	adds	r3, r1, r3
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	e000      	b.n	8000602 <main+0x106>
			  continue;
 8000600:	46c0      	nop			; (mov r8, r8)
	  for(uint8_t i = 0; RxData[i] != '\t' && i< sizeof(RxData); i++)
 8000602:	2113      	movs	r1, #19
 8000604:	187b      	adds	r3, r7, r1
 8000606:	781a      	ldrb	r2, [r3, #0]
 8000608:	187b      	adds	r3, r7, r1
 800060a:	3201      	adds	r2, #1
 800060c:	701a      	strb	r2, [r3, #0]
 800060e:	2113      	movs	r1, #19
 8000610:	187b      	adds	r3, r7, r1
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	1d3a      	adds	r2, r7, #4
 8000616:	5cd3      	ldrb	r3, [r2, r3]
 8000618:	2b09      	cmp	r3, #9
 800061a:	d003      	beq.n	8000624 <main+0x128>
 800061c:	187b      	adds	r3, r7, r1
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b06      	cmp	r3, #6
 8000622:	d9d8      	bls.n	80005d6 <main+0xda>
		  }
	   }

	  dutyCycle = abs(dutyCycle);
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	17da      	asrs	r2, r3, #31
 8000628:	189b      	adds	r3, r3, r2
 800062a:	4053      	eors	r3, r2
 800062c:	617b      	str	r3, [r7, #20]

	  //push PWM value
	  if(dutyCycle < DUTYCYCLE_MAX)
 800062e:	697a      	ldr	r2, [r7, #20]
 8000630:	23fa      	movs	r3, #250	; 0xfa
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	429a      	cmp	r2, r3
 8000636:	da0e      	bge.n	8000656 <main+0x15a>
	  {
		  dutyCycle = dutyCycle*DUTYCYCLE_SCALER;
 8000638:	697a      	ldr	r2, [r7, #20]
 800063a:	0013      	movs	r3, r2
 800063c:	041b      	lsls	r3, r3, #16
 800063e:	1a9b      	subs	r3, r3, r2
 8000640:	22fa      	movs	r2, #250	; 0xfa
 8000642:	0091      	lsls	r1, r2, #2
 8000644:	0018      	movs	r0, r3
 8000646:	f7ff fdf3 	bl	8000230 <__divsi3>
 800064a:	0003      	movs	r3, r0
 800064c:	617b      	str	r3, [r7, #20]
		  TIM3->CCR1 = dutyCycle;
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <main+0x184>)
 8000650:	697a      	ldr	r2, [r7, #20]
 8000652:	635a      	str	r2, [r3, #52]	; 0x34
 8000654:	e77d      	b.n	8000552 <main+0x56>
	  }
	  else
	  {
		  TIM3->CCR1 = 0;
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <main+0x184>)
 8000658:	2200      	movs	r2, #0
 800065a:	635a      	str	r2, [r3, #52]	; 0x34
	  dutyCycle = 0;
 800065c:	e779      	b.n	8000552 <main+0x56>
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	40002000 	.word	0x40002000
 8000664:	48000800 	.word	0x48000800
 8000668:	200002d0 	.word	0x200002d0
 800066c:	200000c4 	.word	0x200000c4
 8000670:	200002b8 	.word	0x200002b8
 8000674:	200002b0 	.word	0x200002b0
 8000678:	08004ca0 	.word	0x08004ca0
 800067c:	200001e4 	.word	0x200001e4
 8000680:	40000400 	.word	0x40000400

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b099      	sub	sp, #100	; 0x64
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	242c      	movs	r4, #44	; 0x2c
 800068c:	193b      	adds	r3, r7, r4
 800068e:	0018      	movs	r0, r3
 8000690:	2334      	movs	r3, #52	; 0x34
 8000692:	001a      	movs	r2, r3
 8000694:	2100      	movs	r1, #0
 8000696:	f003 fe71 	bl	800437c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069a:	231c      	movs	r3, #28
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	0018      	movs	r0, r3
 80006a0:	2310      	movs	r3, #16
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f003 fe69 	bl	800437c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006aa:	003b      	movs	r3, r7
 80006ac:	0018      	movs	r0, r3
 80006ae:	231c      	movs	r3, #28
 80006b0:	001a      	movs	r2, r3
 80006b2:	2100      	movs	r1, #0
 80006b4:	f003 fe62 	bl	800437c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	0021      	movs	r1, r4
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2202      	movs	r2, #2
 80006be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2201      	movs	r2, #1
 80006c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2210      	movs	r2, #16
 80006ca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2202      	movs	r2, #2
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	0212      	lsls	r2, r2, #8
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	22a0      	movs	r2, #160	; 0xa0
 80006de:	0392      	lsls	r2, r2, #14
 80006e0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2201      	movs	r2, #1
 80006e6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 fa92 	bl	8001c14 <HAL_RCC_OscConfig>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006f4:	f000 fb3e 	bl	8000d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	211c      	movs	r1, #28
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2207      	movs	r2, #7
 80006fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2202      	movs	r2, #2
 8000704:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2101      	movs	r1, #1
 8000716:	0018      	movs	r0, r3
 8000718:	f001 fe02 	bl	8002320 <HAL_RCC_ClockConfig>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000720:	f000 fb28 	bl	8000d74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000724:	003b      	movs	r3, r7
 8000726:	2201      	movs	r2, #1
 8000728:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800072a:	003b      	movs	r3, r7
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000730:	003b      	movs	r3, r7
 8000732:	0018      	movs	r0, r3
 8000734:	f001 ff60 	bl	80025f8 <HAL_RCCEx_PeriphCLKConfig>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800073c:	f000 fb1a 	bl	8000d74 <Error_Handler>
  }
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b019      	add	sp, #100	; 0x64
 8000746:	bd90      	pop	{r4, r7, pc}

08000748 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b092      	sub	sp, #72	; 0x48
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074e:	2340      	movs	r3, #64	; 0x40
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	0018      	movs	r0, r3
 8000754:	2308      	movs	r3, #8
 8000756:	001a      	movs	r2, r3
 8000758:	2100      	movs	r1, #0
 800075a:	f003 fe0f 	bl	800437c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800075e:	2324      	movs	r3, #36	; 0x24
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	0018      	movs	r0, r3
 8000764:	231c      	movs	r3, #28
 8000766:	001a      	movs	r2, r3
 8000768:	2100      	movs	r1, #0
 800076a:	f003 fe07 	bl	800437c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	0018      	movs	r0, r3
 8000772:	2320      	movs	r3, #32
 8000774:	001a      	movs	r2, r3
 8000776:	2100      	movs	r1, #0
 8000778:	f003 fe00 	bl	800437c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800077c:	4b3a      	ldr	r3, [pc, #232]	; (8000868 <MX_TIM1_Init+0x120>)
 800077e:	4a3b      	ldr	r2, [pc, #236]	; (800086c <MX_TIM1_Init+0x124>)
 8000780:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000782:	4b39      	ldr	r3, [pc, #228]	; (8000868 <MX_TIM1_Init+0x120>)
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000788:	4b37      	ldr	r3, [pc, #220]	; (8000868 <MX_TIM1_Init+0x120>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800078e:	4b36      	ldr	r3, [pc, #216]	; (8000868 <MX_TIM1_Init+0x120>)
 8000790:	4a37      	ldr	r2, [pc, #220]	; (8000870 <MX_TIM1_Init+0x128>)
 8000792:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000794:	4b34      	ldr	r3, [pc, #208]	; (8000868 <MX_TIM1_Init+0x120>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800079a:	4b33      	ldr	r3, [pc, #204]	; (8000868 <MX_TIM1_Init+0x120>)
 800079c:	2200      	movs	r2, #0
 800079e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a0:	4b31      	ldr	r3, [pc, #196]	; (8000868 <MX_TIM1_Init+0x120>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007a6:	4b30      	ldr	r3, [pc, #192]	; (8000868 <MX_TIM1_Init+0x120>)
 80007a8:	0018      	movs	r0, r3
 80007aa:	f002 f873 	bl	8002894 <HAL_TIM_PWM_Init>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80007b2:	f000 fadf 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b6:	2140      	movs	r1, #64	; 0x40
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c4:	187a      	adds	r2, r7, r1
 80007c6:	4b28      	ldr	r3, [pc, #160]	; (8000868 <MX_TIM1_Init+0x120>)
 80007c8:	0011      	movs	r1, r2
 80007ca:	0018      	movs	r0, r3
 80007cc:	f002 fe1c 	bl	8003408 <HAL_TIMEx_MasterConfigSynchronization>
 80007d0:	1e03      	subs	r3, r0, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007d4:	f000 face 	bl	8000d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d8:	2124      	movs	r1, #36	; 0x24
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2260      	movs	r2, #96	; 0x60
 80007de:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000804:	1879      	adds	r1, r7, r1
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_TIM1_Init+0x120>)
 8000808:	2200      	movs	r2, #0
 800080a:	0018      	movs	r0, r3
 800080c:	f002 fa96 	bl	8002d3c <HAL_TIM_PWM_ConfigChannel>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000814:	f000 faae 	bl	8000d74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	0192      	lsls	r2, r2, #6
 800083c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000844:	1d3a      	adds	r2, r7, #4
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_TIM1_Init+0x120>)
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f002 fe3a 	bl	80034c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000854:	f000 fa8e 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <MX_TIM1_Init+0x120>)
 800085a:	0018      	movs	r0, r3
 800085c:	f000 fba2 	bl	8000fa4 <HAL_TIM_MspPostInit>

}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b012      	add	sp, #72	; 0x48
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000007c 	.word	0x2000007c
 800086c:	40012c00 	.word	0x40012c00
 8000870:	0000ffff 	.word	0x0000ffff

08000874 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b08d      	sub	sp, #52	; 0x34
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800087a:	240c      	movs	r4, #12
 800087c:	193b      	adds	r3, r7, r4
 800087e:	0018      	movs	r0, r3
 8000880:	2324      	movs	r3, #36	; 0x24
 8000882:	001a      	movs	r2, r3
 8000884:	2100      	movs	r1, #0
 8000886:	f003 fd79 	bl	800437c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	0018      	movs	r0, r3
 800088e:	2308      	movs	r3, #8
 8000890:	001a      	movs	r2, r3
 8000892:	2100      	movs	r1, #0
 8000894:	f003 fd72 	bl	800437c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000898:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_TIM2_Init+0xcc>)
 800089a:	2280      	movs	r2, #128	; 0x80
 800089c:	05d2      	lsls	r2, r2, #23
 800089e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008a0:	4b27      	ldr	r3, [pc, #156]	; (8000940 <MX_TIM2_Init+0xcc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_TIM2_Init+0xcc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008ac:	4b24      	ldr	r3, [pc, #144]	; (8000940 <MX_TIM2_Init+0xcc>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	4252      	negs	r2, r2
 80008b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <MX_TIM2_Init+0xcc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <MX_TIM2_Init+0xcc>)
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008c0:	0021      	movs	r1, r4
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2201      	movs	r2, #1
 80008c6:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2201      	movs	r2, #1
 80008d2:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 10;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	220a      	movs	r2, #10
 80008de:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2201      	movs	r2, #1
 80008ea:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80008f8:	187a      	adds	r2, r7, r1
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_TIM2_Init+0xcc>)
 80008fc:	0011      	movs	r1, r2
 80008fe:	0018      	movs	r0, r3
 8000900:	f002 f8d0 	bl	8002aa4 <HAL_TIM_Encoder_Init>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000908:	f000 fa34 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000918:	1d3a      	adds	r2, r7, #4
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_TIM2_Init+0xcc>)
 800091c:	0011      	movs	r1, r2
 800091e:	0018      	movs	r0, r3
 8000920:	f002 fd72 	bl	8003408 <HAL_TIMEx_MasterConfigSynchronization>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000928:	f000 fa24 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <MX_TIM2_Init+0xcc>)
 800092e:	213c      	movs	r1, #60	; 0x3c
 8000930:	0018      	movs	r0, r3
 8000932:	f002 f95f 	bl	8002bf4 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b00d      	add	sp, #52	; 0x34
 800093c:	bd90      	pop	{r4, r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	200000c4 	.word	0x200000c4

08000944 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094a:	2320      	movs	r3, #32
 800094c:	18fb      	adds	r3, r7, r3
 800094e:	0018      	movs	r0, r3
 8000950:	2308      	movs	r3, #8
 8000952:	001a      	movs	r2, r3
 8000954:	2100      	movs	r1, #0
 8000956:	f003 fd11 	bl	800437c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	0018      	movs	r0, r3
 800095e:	231c      	movs	r3, #28
 8000960:	001a      	movs	r2, r3
 8000962:	2100      	movs	r1, #0
 8000964:	f003 fd0a 	bl	800437c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000968:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <MX_TIM3_Init+0xc0>)
 800096a:	4a27      	ldr	r2, [pc, #156]	; (8000a08 <MX_TIM3_Init+0xc4>)
 800096c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800096e:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <MX_TIM3_Init+0xc0>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <MX_TIM3_Init+0xc0>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800097a:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <MX_TIM3_Init+0xc0>)
 800097c:	4a23      	ldr	r2, [pc, #140]	; (8000a0c <MX_TIM3_Init+0xc8>)
 800097e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000980:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <MX_TIM3_Init+0xc0>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <MX_TIM3_Init+0xc0>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800098c:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <MX_TIM3_Init+0xc0>)
 800098e:	0018      	movs	r0, r3
 8000990:	f001 ff80 	bl	8002894 <HAL_TIM_PWM_Init>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000998:	f000 f9ec 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	2120      	movs	r1, #32
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2200      	movs	r2, #0
 80009a8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009aa:	187a      	adds	r2, r7, r1
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <MX_TIM3_Init+0xc0>)
 80009ae:	0011      	movs	r1, r2
 80009b0:	0018      	movs	r0, r3
 80009b2:	f002 fd29 	bl	8003408 <HAL_TIMEx_MasterConfigSynchronization>
 80009b6:	1e03      	subs	r3, r0, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80009ba:	f000 f9db 	bl	8000d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2260      	movs	r2, #96	; 0x60
 80009c2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d6:	1d39      	adds	r1, r7, #4
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <MX_TIM3_Init+0xc0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	0018      	movs	r0, r3
 80009de:	f002 f9ad 	bl	8002d3c <HAL_TIM_PWM_ConfigChannel>
 80009e2:	1e03      	subs	r3, r0, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80009e6:	f000 f9c5 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_TIM3_Init+0xc0>)
 80009ec:	2100      	movs	r1, #0
 80009ee:	0018      	movs	r0, r3
 80009f0:	f001 ffa0 	bl	8002934 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <MX_TIM3_Init+0xc0>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fad4 	bl	8000fa4 <HAL_TIM_MspPostInit>

}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b00a      	add	sp, #40	; 0x28
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000010c 	.word	0x2000010c
 8000a08:	40000400 	.word	0x40000400
 8000a0c:	0000ffff 	.word	0x0000ffff

08000a10 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	0018      	movs	r0, r3
 8000a1a:	231c      	movs	r3, #28
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	2100      	movs	r1, #0
 8000a20:	f003 fcac 	bl	800437c <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <MX_TIM14_Init+0xa0>)
 8000a26:	4a23      	ldr	r2, [pc, #140]	; (8000ab4 <MX_TIM14_Init+0xa4>)
 8000a28:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <MX_TIM14_Init+0xa0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_TIM14_Init+0xa0>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_TIM14_Init+0xa0>)
 8000a38:	4a1f      	ldr	r2, [pc, #124]	; (8000ab8 <MX_TIM14_Init+0xa8>)
 8000a3a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_TIM14_Init+0xa0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_TIM14_Init+0xa0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_TIM14_Init+0xa0>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 fed2 	bl	80027f4 <HAL_TIM_Base_Init>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000a54:	f000 f98e 	bl	8000d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_TIM14_Init+0xa0>)
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f001 ff1a 	bl	8002894 <HAL_TIM_PWM_Init>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000a64:	f000 f986 	bl	8000d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2260      	movs	r2, #96	; 0x60
 8000a6c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a80:	1d39      	adds	r1, r7, #4
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_TIM14_Init+0xa0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	0018      	movs	r0, r3
 8000a88:	f002 f958 	bl	8002d3c <HAL_TIM_PWM_ConfigChannel>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000a90:	f000 f970 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_TIM14_Init+0xa0>)
 8000a96:	2100      	movs	r1, #0
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f001 ff4b 	bl	8002934 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000a9e:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <MX_TIM14_Init+0xa0>)
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f000 fa7f 	bl	8000fa4 <HAL_TIM_MspPostInit>

}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b008      	add	sp, #32
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	20000154 	.word	0x20000154
 8000ab4:	40002000 	.word	0x40002000
 8000ab8:	0000ffff 	.word	0x0000ffff

08000abc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b092      	sub	sp, #72	; 0x48
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac2:	2340      	movs	r3, #64	; 0x40
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	2308      	movs	r3, #8
 8000aca:	001a      	movs	r2, r3
 8000acc:	2100      	movs	r1, #0
 8000ace:	f003 fc55 	bl	800437c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad2:	2324      	movs	r3, #36	; 0x24
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	231c      	movs	r3, #28
 8000ada:	001a      	movs	r2, r3
 8000adc:	2100      	movs	r1, #0
 8000ade:	f003 fc4d 	bl	800437c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	2320      	movs	r3, #32
 8000ae8:	001a      	movs	r2, r3
 8000aea:	2100      	movs	r1, #0
 8000aec:	f003 fc46 	bl	800437c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000af0:	4b3d      	ldr	r3, [pc, #244]	; (8000be8 <MX_TIM15_Init+0x12c>)
 8000af2:	4a3e      	ldr	r2, [pc, #248]	; (8000bec <MX_TIM15_Init+0x130>)
 8000af4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000af6:	4b3c      	ldr	r3, [pc, #240]	; (8000be8 <MX_TIM15_Init+0x12c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b3a      	ldr	r3, [pc, #232]	; (8000be8 <MX_TIM15_Init+0x12c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000b02:	4b39      	ldr	r3, [pc, #228]	; (8000be8 <MX_TIM15_Init+0x12c>)
 8000b04:	4a3a      	ldr	r2, [pc, #232]	; (8000bf0 <MX_TIM15_Init+0x134>)
 8000b06:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b08:	4b37      	ldr	r3, [pc, #220]	; (8000be8 <MX_TIM15_Init+0x12c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000b0e:	4b36      	ldr	r3, [pc, #216]	; (8000be8 <MX_TIM15_Init+0x12c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b34      	ldr	r3, [pc, #208]	; (8000be8 <MX_TIM15_Init+0x12c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000b1a:	4b33      	ldr	r3, [pc, #204]	; (8000be8 <MX_TIM15_Init+0x12c>)
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f001 feb9 	bl	8002894 <HAL_TIM_PWM_Init>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000b26:	f000 f925 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2a:	2140      	movs	r1, #64	; 0x40
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000b38:	187a      	adds	r2, r7, r1
 8000b3a:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <MX_TIM15_Init+0x12c>)
 8000b3c:	0011      	movs	r1, r2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f002 fc62 	bl	8003408 <HAL_TIMEx_MasterConfigSynchronization>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000b48:	f000 f914 	bl	8000d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4c:	2124      	movs	r1, #36	; 0x24
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2260      	movs	r2, #96	; 0x60
 8000b52:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b78:	1879      	adds	r1, r7, r1
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_TIM15_Init+0x12c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f002 f8dc 	bl	8002d3c <HAL_TIM_PWM_ConfigChannel>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000b88:	f000 f8f4 	bl	8000d74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2200      	movs	r2, #0
 8000b96:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2280      	movs	r2, #128	; 0x80
 8000bae:	0192      	lsls	r2, r2, #6
 8000bb0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb8:	1d3a      	adds	r2, r7, #4
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_TIM15_Init+0x12c>)
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f002 fc80 	bl	80034c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bc4:	1e03      	subs	r3, r0, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM15_Init+0x110>
  {
    Error_Handler();
 8000bc8:	f000 f8d4 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_TIM15_Init+0x12c>)
 8000bce:	2100      	movs	r1, #0
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f001 feaf 	bl	8002934 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <MX_TIM15_Init+0x12c>)
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 f9e3 	bl	8000fa4 <HAL_TIM_MspPostInit>

}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b012      	add	sp, #72	; 0x48
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	2000019c 	.word	0x2000019c
 8000bec:	40014000 	.word	0x40014000
 8000bf0:	0000ffff 	.word	0x0000ffff

08000bf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000bfa:	4a15      	ldr	r2, [pc, #84]	; (8000c50 <MX_USART1_UART_Init+0x5c>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c00:	22e1      	movs	r2, #225	; 0xe1
 8000c02:	0252      	lsls	r2, r2, #9
 8000c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <MX_USART1_UART_Init+0x58>)
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f002 fca1 	bl	8003580 <HAL_UART_Init>
 8000c3e:	1e03      	subs	r3, r0, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c42:	f000 f897 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200001e4 	.word	0x200001e4
 8000c50:	40013800 	.word	0x40013800

08000c54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_DMA_Init+0x38>)
 8000c5c:	695a      	ldr	r2, [r3, #20]
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_DMA_Init+0x38>)
 8000c60:	2101      	movs	r1, #1
 8000c62:	430a      	orrs	r2, r1
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_DMA_Init+0x38>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	200a      	movs	r0, #10
 8000c78:	f000 fc6c 	bl	8001554 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000c7c:	200a      	movs	r0, #10
 8000c7e:	f000 fc7e 	bl	800157e <HAL_NVIC_EnableIRQ>

}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b002      	add	sp, #8
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	40021000 	.word	0x40021000

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b089      	sub	sp, #36	; 0x24
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	240c      	movs	r4, #12
 8000c98:	193b      	adds	r3, r7, r4
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	2314      	movs	r3, #20
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	f003 fb6b 	bl	800437c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca6:	4b31      	ldr	r3, [pc, #196]	; (8000d6c <MX_GPIO_Init+0xdc>)
 8000ca8:	695a      	ldr	r2, [r3, #20]
 8000caa:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <MX_GPIO_Init+0xdc>)
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	03c9      	lsls	r1, r1, #15
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	615a      	str	r2, [r3, #20]
 8000cb4:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <MX_GPIO_Init+0xdc>)
 8000cb6:	695a      	ldr	r2, [r3, #20]
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	03db      	lsls	r3, r3, #15
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <MX_GPIO_Init+0xdc>)
 8000cc4:	695a      	ldr	r2, [r3, #20]
 8000cc6:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <MX_GPIO_Init+0xdc>)
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	0289      	lsls	r1, r1, #10
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	615a      	str	r2, [r3, #20]
 8000cd0:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <MX_GPIO_Init+0xdc>)
 8000cd2:	695a      	ldr	r2, [r3, #20]
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	029b      	lsls	r3, r3, #10
 8000cd8:	4013      	ands	r3, r2
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <MX_GPIO_Init+0xdc>)
 8000ce0:	695a      	ldr	r2, [r3, #20]
 8000ce2:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <MX_GPIO_Init+0xdc>)
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	0309      	lsls	r1, r1, #12
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	615a      	str	r2, [r3, #20]
 8000cec:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <MX_GPIO_Init+0xdc>)
 8000cee:	695a      	ldr	r2, [r3, #20]
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	031b      	lsls	r3, r3, #12
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MotoDir_GPIO_Port, MotoDir_Pin, GPIO_PIN_RESET);
 8000cfa:	2390      	movs	r3, #144	; 0x90
 8000cfc:	05db      	lsls	r3, r3, #23
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2120      	movs	r1, #32
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 ff68 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Stepper2DIr_Pin|Stepper1Dir_Pin, GPIO_PIN_RESET);
 8000d08:	23c0      	movs	r3, #192	; 0xc0
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4818      	ldr	r0, [pc, #96]	; (8000d70 <MX_GPIO_Init+0xe0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	0019      	movs	r1, r3
 8000d12:	f000 ff61 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MotoDir_Pin */
  GPIO_InitStruct.Pin = MotoDir_Pin;
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	2220      	movs	r2, #32
 8000d1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	2201      	movs	r2, #1
 8000d20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MotoDir_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	193a      	adds	r2, r7, r4
 8000d30:	2390      	movs	r3, #144	; 0x90
 8000d32:	05db      	lsls	r3, r3, #23
 8000d34:	0011      	movs	r1, r2
 8000d36:	0018      	movs	r0, r3
 8000d38:	f000 fdd6 	bl	80018e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Stepper2DIr_Pin Stepper1Dir_Pin */
  GPIO_InitStruct.Pin = Stepper2DIr_Pin|Stepper1Dir_Pin;
 8000d3c:	0021      	movs	r1, r4
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	22c0      	movs	r2, #192	; 0xc0
 8000d42:	0092      	lsls	r2, r2, #2
 8000d44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2201      	movs	r2, #1
 8000d4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <MX_GPIO_Init+0xe0>)
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	0010      	movs	r0, r2
 8000d60:	f000 fdc2 	bl	80018e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b009      	add	sp, #36	; 0x24
 8000d6a:	bd90      	pop	{r4, r7, pc}
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	48000800 	.word	0x48000800

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>

08000d7e <init_stepper_motor>:
 *      Author: Ashli Forbes
 */

#include "stepper_motor.h"

void init_stepper_motor(stepper_motor_instance *stepper_motor, GPIO_TypeDef * dir_port_pin,uint16_t dir_num_pin , TIM_TypeDef * TIM){
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b084      	sub	sp, #16
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	1dbb      	adds	r3, r7, #6
 8000d8c:	801a      	strh	r2, [r3, #0]
	   stepper_motor->dir_port_pin = dir_port_pin ;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	68ba      	ldr	r2, [r7, #8]
 8000d92:	601a      	str	r2, [r3, #0]
	   stepper_motor->dir_num_pin = dir_num_pin ;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	1dba      	adds	r2, r7, #6
 8000d98:	8812      	ldrh	r2, [r2, #0]
 8000d9a:	809a      	strh	r2, [r3, #4]
	   stepper_motor->tim = TIM;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	609a      	str	r2, [r3, #8]
}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b004      	add	sp, #16
 8000da8:	bd80      	pop	{r7, pc}

08000daa <move_stepper_motor>:

void move_stepper_motor(stepper_motor_instance *stepper_motor, int32_t pwm_val){
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
	stepper_motor->tim->CCR1 = abs(pwm_val);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	17d9      	asrs	r1, r3, #31
 8000db8:	185a      	adds	r2, r3, r1
 8000dba:	404a      	eors	r2, r1
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	635a      	str	r2, [r3, #52]	; 0x34
	if (pwm_val < 0){
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da08      	bge.n	8000dda <move_stepper_motor+0x30>
		HAL_GPIO_WritePin(stepper_motor->dir_port_pin , stepper_motor->dir_num_pin, GPIO_PIN_RESET);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6818      	ldr	r0, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	889b      	ldrh	r3, [r3, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	f000 ff00 	bl	8001bd8 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(stepper_motor->dir_port_pin , stepper_motor->dir_num_pin, GPIO_PIN_SET);
	}
}
 8000dd8:	e007      	b.n	8000dea <move_stepper_motor+0x40>
		HAL_GPIO_WritePin(stepper_motor->dir_port_pin , stepper_motor->dir_num_pin, GPIO_PIN_SET);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6818      	ldr	r0, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	889b      	ldrh	r3, [r3, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	0019      	movs	r1, r3
 8000de6:	f000 fef7 	bl	8001bd8 <HAL_GPIO_WritePin>
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b002      	add	sp, #8
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <HAL_MspInit+0x44>)
 8000dfc:	699a      	ldr	r2, [r3, #24]
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_MspInit+0x44>)
 8000e00:	2101      	movs	r1, #1
 8000e02:	430a      	orrs	r2, r1
 8000e04:	619a      	str	r2, [r3, #24]
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_MspInit+0x44>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_MspInit+0x44>)
 8000e14:	69da      	ldr	r2, [r3, #28]
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <HAL_MspInit+0x44>)
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	0549      	lsls	r1, r1, #21
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	61da      	str	r2, [r3, #28]
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <HAL_MspInit+0x44>)
 8000e22:	69da      	ldr	r2, [r3, #28]
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	055b      	lsls	r3, r3, #21
 8000e28:	4013      	ands	r3, r2
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b002      	add	sp, #8
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a1d      	ldr	r2, [pc, #116]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x84>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d10e      	bne.n	8000e6c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x88>)
 8000e50:	699a      	ldr	r2, [r3, #24]
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x88>)
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	0109      	lsls	r1, r1, #4
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	619a      	str	r2, [r3, #24]
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x88>)
 8000e5e:	699a      	ldr	r2, [r3, #24]
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	011b      	lsls	r3, r3, #4
 8000e64:	4013      	ands	r3, r2
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000e6a:	e024      	b.n	8000eb6 <HAL_TIM_PWM_MspInit+0x7a>
  else if(htim_pwm->Instance==TIM3)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a15      	ldr	r2, [pc, #84]	; (8000ec8 <HAL_TIM_PWM_MspInit+0x8c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10c      	bne.n	8000e90 <HAL_TIM_PWM_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x88>)
 8000e78:	69da      	ldr	r2, [r3, #28]
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x88>)
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	61da      	str	r2, [r3, #28]
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x88>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	2202      	movs	r2, #2
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
}
 8000e8e:	e012      	b.n	8000eb6 <HAL_TIM_PWM_MspInit+0x7a>
  else if(htim_pwm->Instance==TIM15)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <HAL_TIM_PWM_MspInit+0x90>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d10d      	bne.n	8000eb6 <HAL_TIM_PWM_MspInit+0x7a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x88>)
 8000e9c:	699a      	ldr	r2, [r3, #24]
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x88>)
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	0249      	lsls	r1, r1, #9
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	619a      	str	r2, [r3, #24]
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x88>)
 8000eaa:	699a      	ldr	r2, [r3, #24]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	025b      	lsls	r3, r3, #9
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b006      	add	sp, #24
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	40012c00 	.word	0x40012c00
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40000400 	.word	0x40000400
 8000ecc:	40014000 	.word	0x40014000

08000ed0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b08b      	sub	sp, #44	; 0x2c
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	2414      	movs	r4, #20
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	0018      	movs	r0, r3
 8000ede:	2314      	movs	r3, #20
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f003 fa4a 	bl	800437c <memset>
  if(htim_encoder->Instance==TIM2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	05db      	lsls	r3, r3, #23
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d130      	bne.n	8000f56 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x90>)
 8000ef6:	69da      	ldr	r2, [r3, #28]
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x90>)
 8000efa:	2101      	movs	r1, #1
 8000efc:	430a      	orrs	r2, r1
 8000efe:	61da      	str	r2, [r3, #28]
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x90>)
 8000f02:	69db      	ldr	r3, [r3, #28]
 8000f04:	2201      	movs	r2, #1
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x90>)
 8000f0e:	695a      	ldr	r2, [r3, #20]
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x90>)
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	0289      	lsls	r1, r1, #10
 8000f16:	430a      	orrs	r2, r1
 8000f18:	615a      	str	r2, [r3, #20]
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x90>)
 8000f1c:	695a      	ldr	r2, [r3, #20]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	029b      	lsls	r3, r3, #10
 8000f22:	4013      	ands	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderIn_Pin|EncoderInB_Pin;
 8000f28:	0021      	movs	r1, r4
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	2202      	movs	r2, #2
 8000f34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2201      	movs	r2, #1
 8000f3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	2202      	movs	r2, #2
 8000f46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	187a      	adds	r2, r7, r1
 8000f4a:	2390      	movs	r3, #144	; 0x90
 8000f4c:	05db      	lsls	r3, r3, #23
 8000f4e:	0011      	movs	r1, r2
 8000f50:	0018      	movs	r0, r3
 8000f52:	f000 fcc9 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b00b      	add	sp, #44	; 0x2c
 8000f5c:	bd90      	pop	{r4, r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_TIM_Base_MspInit+0x38>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d10d      	bne.n	8000f92 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_TIM_Base_MspInit+0x3c>)
 8000f78:	69da      	ldr	r2, [r3, #28]
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_TIM_Base_MspInit+0x3c>)
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	0049      	lsls	r1, r1, #1
 8000f80:	430a      	orrs	r2, r1
 8000f82:	61da      	str	r2, [r3, #28]
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_TIM_Base_MspInit+0x3c>)
 8000f86:	69da      	ldr	r2, [r3, #28]
 8000f88:	2380      	movs	r3, #128	; 0x80
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b004      	add	sp, #16
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	40002000 	.word	0x40002000
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b08d      	sub	sp, #52	; 0x34
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	241c      	movs	r4, #28
 8000fae:	193b      	adds	r3, r7, r4
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	2314      	movs	r3, #20
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	f003 f9e0 	bl	800437c <memset>
  if(htim->Instance==TIM1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a56      	ldr	r2, [pc, #344]	; (800111c <HAL_TIM_MspPostInit+0x178>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d126      	bne.n	8001014 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b56      	ldr	r3, [pc, #344]	; (8001120 <HAL_TIM_MspPostInit+0x17c>)
 8000fc8:	695a      	ldr	r2, [r3, #20]
 8000fca:	4b55      	ldr	r3, [pc, #340]	; (8001120 <HAL_TIM_MspPostInit+0x17c>)
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	0289      	lsls	r1, r1, #10
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	615a      	str	r2, [r3, #20]
 8000fd4:	4b52      	ldr	r3, [pc, #328]	; (8001120 <HAL_TIM_MspPostInit+0x17c>)
 8000fd6:	695a      	ldr	r2, [r3, #20]
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	029b      	lsls	r3, r3, #10
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
 8000fe0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ServoPWM_Pin;
 8000fe2:	193b      	adds	r3, r7, r4
 8000fe4:	2280      	movs	r2, #128	; 0x80
 8000fe6:	0052      	lsls	r2, r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	0021      	movs	r1, r4
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	2202      	movs	r2, #2
 8000ff0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	187b      	adds	r3, r7, r1
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2202      	movs	r2, #2
 8001002:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ServoPWM_GPIO_Port, &GPIO_InitStruct);
 8001004:	187a      	adds	r2, r7, r1
 8001006:	2390      	movs	r3, #144	; 0x90
 8001008:	05db      	lsls	r3, r3, #23
 800100a:	0011      	movs	r1, r2
 800100c:	0018      	movs	r0, r3
 800100e:	f000 fc6b 	bl	80018e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001012:	e07f      	b.n	8001114 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM3)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a42      	ldr	r2, [pc, #264]	; (8001124 <HAL_TIM_MspPostInit+0x180>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d125      	bne.n	800106a <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b40      	ldr	r3, [pc, #256]	; (8001120 <HAL_TIM_MspPostInit+0x17c>)
 8001020:	695a      	ldr	r2, [r3, #20]
 8001022:	4b3f      	ldr	r3, [pc, #252]	; (8001120 <HAL_TIM_MspPostInit+0x17c>)
 8001024:	2180      	movs	r1, #128	; 0x80
 8001026:	0289      	lsls	r1, r1, #10
 8001028:	430a      	orrs	r2, r1
 800102a:	615a      	str	r2, [r3, #20]
 800102c:	4b3c      	ldr	r3, [pc, #240]	; (8001120 <HAL_TIM_MspPostInit+0x17c>)
 800102e:	695a      	ldr	r2, [r3, #20]
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	029b      	lsls	r3, r3, #10
 8001034:	4013      	ands	r3, r2
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWMOut_Pin;
 800103a:	211c      	movs	r1, #28
 800103c:	187b      	adds	r3, r7, r1
 800103e:	2240      	movs	r2, #64	; 0x40
 8001040:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2202      	movs	r2, #2
 8001046:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2201      	movs	r2, #1
 8001058:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWMOut_GPIO_Port, &GPIO_InitStruct);
 800105a:	187a      	adds	r2, r7, r1
 800105c:	2390      	movs	r3, #144	; 0x90
 800105e:	05db      	lsls	r3, r3, #23
 8001060:	0011      	movs	r1, r2
 8001062:	0018      	movs	r0, r3
 8001064:	f000 fc40 	bl	80018e8 <HAL_GPIO_Init>
}
 8001068:	e054      	b.n	8001114 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM14)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a2e      	ldr	r2, [pc, #184]	; (8001128 <HAL_TIM_MspPostInit+0x184>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d125      	bne.n	80010c0 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b2a      	ldr	r3, [pc, #168]	; (8001120 <HAL_TIM_MspPostInit+0x17c>)
 8001076:	695a      	ldr	r2, [r3, #20]
 8001078:	4b29      	ldr	r3, [pc, #164]	; (8001120 <HAL_TIM_MspPostInit+0x17c>)
 800107a:	2180      	movs	r1, #128	; 0x80
 800107c:	0289      	lsls	r1, r1, #10
 800107e:	430a      	orrs	r2, r1
 8001080:	615a      	str	r2, [r3, #20]
 8001082:	4b27      	ldr	r3, [pc, #156]	; (8001120 <HAL_TIM_MspPostInit+0x17c>)
 8001084:	695a      	ldr	r2, [r3, #20]
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	029b      	lsls	r3, r3, #10
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Stepper2PWM_Pin;
 8001090:	211c      	movs	r1, #28
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2210      	movs	r2, #16
 8001096:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	187b      	adds	r3, r7, r1
 800109a:	2202      	movs	r2, #2
 800109c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2204      	movs	r2, #4
 80010ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Stepper2PWM_GPIO_Port, &GPIO_InitStruct);
 80010b0:	187a      	adds	r2, r7, r1
 80010b2:	2390      	movs	r3, #144	; 0x90
 80010b4:	05db      	lsls	r3, r3, #23
 80010b6:	0011      	movs	r1, r2
 80010b8:	0018      	movs	r0, r3
 80010ba:	f000 fc15 	bl	80018e8 <HAL_GPIO_Init>
}
 80010be:	e029      	b.n	8001114 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM15)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a19      	ldr	r2, [pc, #100]	; (800112c <HAL_TIM_MspPostInit+0x188>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d124      	bne.n	8001114 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_TIM_MspPostInit+0x17c>)
 80010cc:	695a      	ldr	r2, [r3, #20]
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_TIM_MspPostInit+0x17c>)
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	0289      	lsls	r1, r1, #10
 80010d4:	430a      	orrs	r2, r1
 80010d6:	615a      	str	r2, [r3, #20]
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <HAL_TIM_MspPostInit+0x17c>)
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	029b      	lsls	r3, r3, #10
 80010e0:	4013      	ands	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Stepper1PWM_Pin;
 80010e6:	211c      	movs	r1, #28
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	2204      	movs	r2, #4
 80010ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2202      	movs	r2, #2
 80010f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 8001100:	187b      	adds	r3, r7, r1
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Stepper1PWM_GPIO_Port, &GPIO_InitStruct);
 8001106:	187a      	adds	r2, r7, r1
 8001108:	2390      	movs	r3, #144	; 0x90
 800110a:	05db      	lsls	r3, r3, #23
 800110c:	0011      	movs	r1, r2
 800110e:	0018      	movs	r0, r3
 8001110:	f000 fbea 	bl	80018e8 <HAL_GPIO_Init>
}
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	b00d      	add	sp, #52	; 0x34
 800111a:	bd90      	pop	{r4, r7, pc}
 800111c:	40012c00 	.word	0x40012c00
 8001120:	40021000 	.word	0x40021000
 8001124:	40000400 	.word	0x40000400
 8001128:	40002000 	.word	0x40002000
 800112c:	40014000 	.word	0x40014000

08001130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b08b      	sub	sp, #44	; 0x2c
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	2414      	movs	r4, #20
 800113a:	193b      	adds	r3, r7, r4
 800113c:	0018      	movs	r0, r3
 800113e:	2314      	movs	r3, #20
 8001140:	001a      	movs	r2, r3
 8001142:	2100      	movs	r1, #0
 8001144:	f003 f91a 	bl	800437c <memset>
  if(huart->Instance==USART1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a30      	ldr	r2, [pc, #192]	; (8001210 <HAL_UART_MspInit+0xe0>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d159      	bne.n	8001206 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001152:	4b30      	ldr	r3, [pc, #192]	; (8001214 <HAL_UART_MspInit+0xe4>)
 8001154:	699a      	ldr	r2, [r3, #24]
 8001156:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <HAL_UART_MspInit+0xe4>)
 8001158:	2180      	movs	r1, #128	; 0x80
 800115a:	01c9      	lsls	r1, r1, #7
 800115c:	430a      	orrs	r2, r1
 800115e:	619a      	str	r2, [r3, #24]
 8001160:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <HAL_UART_MspInit+0xe4>)
 8001162:	699a      	ldr	r2, [r3, #24]
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	01db      	lsls	r3, r3, #7
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <HAL_UART_MspInit+0xe4>)
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	4b28      	ldr	r3, [pc, #160]	; (8001214 <HAL_UART_MspInit+0xe4>)
 8001174:	2180      	movs	r1, #128	; 0x80
 8001176:	0289      	lsls	r1, r1, #10
 8001178:	430a      	orrs	r2, r1
 800117a:	615a      	str	r2, [r3, #20]
 800117c:	4b25      	ldr	r3, [pc, #148]	; (8001214 <HAL_UART_MspInit+0xe4>)
 800117e:	695a      	ldr	r2, [r3, #20]
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	029b      	lsls	r3, r3, #10
 8001184:	4013      	ands	r3, r2
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800118a:	193b      	adds	r3, r7, r4
 800118c:	22c0      	movs	r2, #192	; 0xc0
 800118e:	00d2      	lsls	r2, r2, #3
 8001190:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	0021      	movs	r1, r4
 8001194:	187b      	adds	r3, r7, r1
 8001196:	2202      	movs	r2, #2
 8001198:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2203      	movs	r2, #3
 80011a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	2201      	movs	r2, #1
 80011aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	187a      	adds	r2, r7, r1
 80011ae:	2390      	movs	r3, #144	; 0x90
 80011b0:	05db      	lsls	r3, r3, #23
 80011b2:	0011      	movs	r1, r2
 80011b4:	0018      	movs	r0, r3
 80011b6:	f000 fb97 	bl	80018e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <HAL_UART_MspInit+0xe8>)
 80011bc:	4a17      	ldr	r2, [pc, #92]	; (800121c <HAL_UART_MspInit+0xec>)
 80011be:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c0:	4b15      	ldr	r3, [pc, #84]	; (8001218 <HAL_UART_MspInit+0xe8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <HAL_UART_MspInit+0xe8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_UART_MspInit+0xe8>)
 80011ce:	2280      	movs	r2, #128	; 0x80
 80011d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HAL_UART_MspInit+0xe8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_UART_MspInit+0xe8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_UART_MspInit+0xe8>)
 80011e0:	2220      	movs	r2, #32
 80011e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <HAL_UART_MspInit+0xe8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_UART_MspInit+0xe8>)
 80011ec:	0018      	movs	r0, r3
 80011ee:	f000 f9e3 	bl	80015b8 <HAL_DMA_Init>
 80011f2:	1e03      	subs	r3, r0, #0
 80011f4:	d001      	beq.n	80011fa <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80011f6:	f7ff fdbd 	bl	8000d74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <HAL_UART_MspInit+0xe8>)
 80011fe:	675a      	str	r2, [r3, #116]	; 0x74
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_UART_MspInit+0xe8>)
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b00b      	add	sp, #44	; 0x2c
 800120c:	bd90      	pop	{r4, r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	40013800 	.word	0x40013800
 8001214:	40021000 	.word	0x40021000
 8001218:	2000026c 	.word	0x2000026c
 800121c:	40020030 	.word	0x40020030

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <NMI_Handler+0x4>

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001244:	f000 f8be 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001256:	0018      	movs	r0, r3
 8001258:	f000 fa5c 	bl	8001714 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	2000026c 	.word	0x2000026c

08001268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001270:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <_sbrk+0x5c>)
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <_sbrk+0x60>)
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <_sbrk+0x64>)
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <_sbrk+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	18d3      	adds	r3, r2, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	429a      	cmp	r2, r3
 8001296:	d207      	bcs.n	80012a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001298:	f003 f878 	bl	800438c <__errno>
 800129c:	0003      	movs	r3, r0
 800129e:	220c      	movs	r2, #12
 80012a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a2:	2301      	movs	r3, #1
 80012a4:	425b      	negs	r3, r3
 80012a6:	e009      	b.n	80012bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	18d2      	adds	r2, r2, r3
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <_sbrk+0x64>)
 80012b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	b006      	add	sp, #24
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20004000 	.word	0x20004000
 80012c8:	00000400 	.word	0x00000400
 80012cc:	200002dc 	.word	0x200002dc
 80012d0:	20000430 	.word	0x20000430

080012d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012e0:	480d      	ldr	r0, [pc, #52]	; (8001318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012e2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012e4:	f7ff fff6 	bl	80012d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <LoopForever+0x6>)
  ldr r1, =_edata
 80012ea:	490d      	ldr	r1, [pc, #52]	; (8001320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <LoopForever+0xe>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f0:	e002      	b.n	80012f8 <LoopCopyDataInit>

080012f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f6:	3304      	adds	r3, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012fc:	d3f9      	bcc.n	80012f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001300:	4c0a      	ldr	r4, [pc, #40]	; (800132c <LoopForever+0x16>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001304:	e001      	b.n	800130a <LoopFillZerobss>

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001308:	3204      	adds	r2, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800130e:	f003 f843 	bl	8004398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001312:	f7ff f8f3 	bl	80004fc <main>

08001316 <LoopForever>:

LoopForever:
    b LoopForever
 8001316:	e7fe      	b.n	8001316 <LoopForever>
  ldr   r0, =_estack
 8001318:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800131c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001320:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001324:	08004d1c 	.word	0x08004d1c
  ldr r2, =_sbss
 8001328:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800132c:	2000042c 	.word	0x2000042c

08001330 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC1_COMP_IRQHandler>
	...

08001334 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <HAL_Init+0x24>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_Init+0x24>)
 800133e:	2110      	movs	r1, #16
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001344:	2000      	movs	r0, #0
 8001346:	f000 f809 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800134a:	f7ff fd53 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	0018      	movs	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	40022000 	.word	0x40022000

0800135c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_InitTick+0x5c>)
 8001366:	681c      	ldr	r4, [r3, #0]
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <HAL_InitTick+0x60>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	0019      	movs	r1, r3
 800136e:	23fa      	movs	r3, #250	; 0xfa
 8001370:	0098      	lsls	r0, r3, #2
 8001372:	f7fe fed3 	bl	800011c <__udivsi3>
 8001376:	0003      	movs	r3, r0
 8001378:	0019      	movs	r1, r3
 800137a:	0020      	movs	r0, r4
 800137c:	f7fe fece 	bl	800011c <__udivsi3>
 8001380:	0003      	movs	r3, r0
 8001382:	0018      	movs	r0, r3
 8001384:	f000 f90b 	bl	800159e <HAL_SYSTICK_Config>
 8001388:	1e03      	subs	r3, r0, #0
 800138a:	d001      	beq.n	8001390 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e00f      	b.n	80013b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b03      	cmp	r3, #3
 8001394:	d80b      	bhi.n	80013ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	2301      	movs	r3, #1
 800139a:	425b      	negs	r3, r3
 800139c:	2200      	movs	r2, #0
 800139e:	0018      	movs	r0, r3
 80013a0:	f000 f8d8 	bl	8001554 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_InitTick+0x64>)
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	0018      	movs	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b003      	add	sp, #12
 80013b6:	bd90      	pop	{r4, r7, pc}
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000004 	.word	0x20000004

080013c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_IncTick+0x1c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	001a      	movs	r2, r3
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_IncTick+0x20>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	18d2      	adds	r2, r2, r3
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_IncTick+0x20>)
 80013d6:	601a      	str	r2, [r3, #0]
}
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	20000008 	.word	0x20000008
 80013e4:	200002e0 	.word	0x200002e0

080013e8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  return uwTick;
 80013ec:	4b02      	ldr	r3, [pc, #8]	; (80013f8 <HAL_GetTick+0x10>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	0018      	movs	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	200002e0 	.word	0x200002e0

080013fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	0002      	movs	r2, r0
 8001404:	1dfb      	adds	r3, r7, #7
 8001406:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001408:	1dfb      	adds	r3, r7, #7
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b7f      	cmp	r3, #127	; 0x7f
 800140e:	d809      	bhi.n	8001424 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001410:	1dfb      	adds	r3, r7, #7
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	001a      	movs	r2, r3
 8001416:	231f      	movs	r3, #31
 8001418:	401a      	ands	r2, r3
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_EnableIRQ+0x30>)
 800141c:	2101      	movs	r1, #1
 800141e:	4091      	lsls	r1, r2
 8001420:	000a      	movs	r2, r1
 8001422:	601a      	str	r2, [r3, #0]
  }
}
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	b002      	add	sp, #8
 800142a:	bd80      	pop	{r7, pc}
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	0002      	movs	r2, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	1dfb      	adds	r3, r7, #7
 800143c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800143e:	1dfb      	adds	r3, r7, #7
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b7f      	cmp	r3, #127	; 0x7f
 8001444:	d828      	bhi.n	8001498 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001446:	4a2f      	ldr	r2, [pc, #188]	; (8001504 <__NVIC_SetPriority+0xd4>)
 8001448:	1dfb      	adds	r3, r7, #7
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b25b      	sxtb	r3, r3
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	33c0      	adds	r3, #192	; 0xc0
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	589b      	ldr	r3, [r3, r2]
 8001456:	1dfa      	adds	r2, r7, #7
 8001458:	7812      	ldrb	r2, [r2, #0]
 800145a:	0011      	movs	r1, r2
 800145c:	2203      	movs	r2, #3
 800145e:	400a      	ands	r2, r1
 8001460:	00d2      	lsls	r2, r2, #3
 8001462:	21ff      	movs	r1, #255	; 0xff
 8001464:	4091      	lsls	r1, r2
 8001466:	000a      	movs	r2, r1
 8001468:	43d2      	mvns	r2, r2
 800146a:	401a      	ands	r2, r3
 800146c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	019b      	lsls	r3, r3, #6
 8001472:	22ff      	movs	r2, #255	; 0xff
 8001474:	401a      	ands	r2, r3
 8001476:	1dfb      	adds	r3, r7, #7
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	0018      	movs	r0, r3
 800147c:	2303      	movs	r3, #3
 800147e:	4003      	ands	r3, r0
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001484:	481f      	ldr	r0, [pc, #124]	; (8001504 <__NVIC_SetPriority+0xd4>)
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b25b      	sxtb	r3, r3
 800148c:	089b      	lsrs	r3, r3, #2
 800148e:	430a      	orrs	r2, r1
 8001490:	33c0      	adds	r3, #192	; 0xc0
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001496:	e031      	b.n	80014fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001498:	4a1b      	ldr	r2, [pc, #108]	; (8001508 <__NVIC_SetPriority+0xd8>)
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	0019      	movs	r1, r3
 80014a0:	230f      	movs	r3, #15
 80014a2:	400b      	ands	r3, r1
 80014a4:	3b08      	subs	r3, #8
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	3306      	adds	r3, #6
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	18d3      	adds	r3, r2, r3
 80014ae:	3304      	adds	r3, #4
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	1dfa      	adds	r2, r7, #7
 80014b4:	7812      	ldrb	r2, [r2, #0]
 80014b6:	0011      	movs	r1, r2
 80014b8:	2203      	movs	r2, #3
 80014ba:	400a      	ands	r2, r1
 80014bc:	00d2      	lsls	r2, r2, #3
 80014be:	21ff      	movs	r1, #255	; 0xff
 80014c0:	4091      	lsls	r1, r2
 80014c2:	000a      	movs	r2, r1
 80014c4:	43d2      	mvns	r2, r2
 80014c6:	401a      	ands	r2, r3
 80014c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	019b      	lsls	r3, r3, #6
 80014ce:	22ff      	movs	r2, #255	; 0xff
 80014d0:	401a      	ands	r2, r3
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	0018      	movs	r0, r3
 80014d8:	2303      	movs	r3, #3
 80014da:	4003      	ands	r3, r0
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014e0:	4809      	ldr	r0, [pc, #36]	; (8001508 <__NVIC_SetPriority+0xd8>)
 80014e2:	1dfb      	adds	r3, r7, #7
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	001c      	movs	r4, r3
 80014e8:	230f      	movs	r3, #15
 80014ea:	4023      	ands	r3, r4
 80014ec:	3b08      	subs	r3, #8
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	430a      	orrs	r2, r1
 80014f2:	3306      	adds	r3, #6
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	18c3      	adds	r3, r0, r3
 80014f8:	3304      	adds	r3, #4
 80014fa:	601a      	str	r2, [r3, #0]
}
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b003      	add	sp, #12
 8001502:	bd90      	pop	{r4, r7, pc}
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	1e5a      	subs	r2, r3, #1
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	045b      	lsls	r3, r3, #17
 800151c:	429a      	cmp	r2, r3
 800151e:	d301      	bcc.n	8001524 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001520:	2301      	movs	r3, #1
 8001522:	e010      	b.n	8001546 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <SysTick_Config+0x44>)
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	3a01      	subs	r2, #1
 800152a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152c:	2301      	movs	r3, #1
 800152e:	425b      	negs	r3, r3
 8001530:	2103      	movs	r1, #3
 8001532:	0018      	movs	r0, r3
 8001534:	f7ff ff7c 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <SysTick_Config+0x44>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <SysTick_Config+0x44>)
 8001540:	2207      	movs	r2, #7
 8001542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001544:	2300      	movs	r3, #0
}
 8001546:	0018      	movs	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	b002      	add	sp, #8
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	e000e010 	.word	0xe000e010

08001554 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	210f      	movs	r1, #15
 8001560:	187b      	adds	r3, r7, r1
 8001562:	1c02      	adds	r2, r0, #0
 8001564:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	187b      	adds	r3, r7, r1
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b25b      	sxtb	r3, r3
 800156e:	0011      	movs	r1, r2
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff ff5d 	bl	8001430 <__NVIC_SetPriority>
}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b004      	add	sp, #16
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	0002      	movs	r2, r0
 8001586:	1dfb      	adds	r3, r7, #7
 8001588:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	b25b      	sxtb	r3, r3
 8001590:	0018      	movs	r0, r3
 8001592:	f7ff ff33 	bl	80013fc <__NVIC_EnableIRQ>
}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	46bd      	mov	sp, r7
 800159a:	b002      	add	sp, #8
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	0018      	movs	r0, r3
 80015aa:	f7ff ffaf 	bl	800150c <SysTick_Config>
 80015ae:	0003      	movs	r3, r0
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b002      	add	sp, #8
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e036      	b.n	800163c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2221      	movs	r2, #33	; 0x21
 80015d2:	2102      	movs	r1, #2
 80015d4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4a18      	ldr	r2, [pc, #96]	; (8001644 <HAL_DMA_Init+0x8c>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001606:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	0018      	movs	r0, r3
 8001620:	f000 f946 	bl	80018b0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2221      	movs	r2, #33	; 0x21
 800162e:	2101      	movs	r1, #1
 8001630:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2220      	movs	r2, #32
 8001636:	2100      	movs	r1, #0
 8001638:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b004      	add	sp, #16
 8001642:	bd80      	pop	{r7, pc}
 8001644:	ffffc00f 	.word	0xffffc00f

08001648 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
 8001654:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001656:	2317      	movs	r3, #23
 8001658:	18fb      	adds	r3, r7, r3
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2220      	movs	r2, #32
 8001662:	5c9b      	ldrb	r3, [r3, r2]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <HAL_DMA_Start_IT+0x24>
 8001668:	2302      	movs	r3, #2
 800166a:	e04f      	b.n	800170c <HAL_DMA_Start_IT+0xc4>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2220      	movs	r2, #32
 8001670:	2101      	movs	r1, #1
 8001672:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2221      	movs	r2, #33	; 0x21
 8001678:	5c9b      	ldrb	r3, [r3, r2]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b01      	cmp	r3, #1
 800167e:	d13a      	bne.n	80016f6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2221      	movs	r2, #33	; 0x21
 8001684:	2102      	movs	r1, #2
 8001686:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2101      	movs	r1, #1
 800169a:	438a      	bics	r2, r1
 800169c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	68b9      	ldr	r1, [r7, #8]
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f000 f8d7 	bl	8001858 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d008      	beq.n	80016c4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	210e      	movs	r1, #14
 80016be:	430a      	orrs	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e00f      	b.n	80016e4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	210a      	movs	r1, #10
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2104      	movs	r1, #4
 80016e0:	438a      	bics	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2101      	movs	r1, #1
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	e007      	b.n	8001706 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2220      	movs	r2, #32
 80016fa:	2100      	movs	r1, #0
 80016fc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80016fe:	2317      	movs	r3, #23
 8001700:	18fb      	adds	r3, r7, r3
 8001702:	2202      	movs	r2, #2
 8001704:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001706:	2317      	movs	r3, #23
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	781b      	ldrb	r3, [r3, #0]
}
 800170c:	0018      	movs	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	b006      	add	sp, #24
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	2204      	movs	r2, #4
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	4013      	ands	r3, r2
 800173a:	d024      	beq.n	8001786 <HAL_DMA_IRQHandler+0x72>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	2204      	movs	r2, #4
 8001740:	4013      	ands	r3, r2
 8001742:	d020      	beq.n	8001786 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2220      	movs	r2, #32
 800174c:	4013      	ands	r3, r2
 800174e:	d107      	bne.n	8001760 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2104      	movs	r1, #4
 800175c:	438a      	bics	r2, r1
 800175e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001768:	2104      	movs	r1, #4
 800176a:	4091      	lsls	r1, r2
 800176c:	000a      	movs	r2, r1
 800176e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	2b00      	cmp	r3, #0
 8001776:	d100      	bne.n	800177a <HAL_DMA_IRQHandler+0x66>
 8001778:	e06a      	b.n	8001850 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	0010      	movs	r0, r2
 8001782:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001784:	e064      	b.n	8001850 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	2202      	movs	r2, #2
 800178c:	409a      	lsls	r2, r3
 800178e:	0013      	movs	r3, r2
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4013      	ands	r3, r2
 8001794:	d02b      	beq.n	80017ee <HAL_DMA_IRQHandler+0xda>
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2202      	movs	r2, #2
 800179a:	4013      	ands	r3, r2
 800179c:	d027      	beq.n	80017ee <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2220      	movs	r2, #32
 80017a6:	4013      	ands	r3, r2
 80017a8:	d10b      	bne.n	80017c2 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	210a      	movs	r1, #10
 80017b6:	438a      	bics	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2221      	movs	r2, #33	; 0x21
 80017be:	2101      	movs	r1, #1
 80017c0:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ca:	2102      	movs	r1, #2
 80017cc:	4091      	lsls	r1, r2
 80017ce:	000a      	movs	r2, r1
 80017d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2220      	movs	r2, #32
 80017d6:	2100      	movs	r1, #0
 80017d8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d036      	beq.n	8001850 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	0010      	movs	r0, r2
 80017ea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80017ec:	e030      	b.n	8001850 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	2208      	movs	r2, #8
 80017f4:	409a      	lsls	r2, r3
 80017f6:	0013      	movs	r3, r2
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	4013      	ands	r3, r2
 80017fc:	d028      	beq.n	8001850 <HAL_DMA_IRQHandler+0x13c>
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	2208      	movs	r2, #8
 8001802:	4013      	ands	r3, r2
 8001804:	d024      	beq.n	8001850 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	210e      	movs	r1, #14
 8001812:	438a      	bics	r2, r1
 8001814:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181e:	2101      	movs	r1, #1
 8001820:	4091      	lsls	r1, r2
 8001822:	000a      	movs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2221      	movs	r2, #33	; 0x21
 8001830:	2101      	movs	r1, #1
 8001832:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2220      	movs	r2, #32
 8001838:	2100      	movs	r1, #0
 800183a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	0010      	movs	r0, r2
 800184c:	4798      	blx	r3
    }
  }
}
 800184e:	e7ff      	b.n	8001850 <HAL_DMA_IRQHandler+0x13c>
 8001850:	46c0      	nop			; (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	b004      	add	sp, #16
 8001856:	bd80      	pop	{r7, pc}

08001858 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186e:	2101      	movs	r1, #1
 8001870:	4091      	lsls	r1, r2
 8001872:	000a      	movs	r2, r1
 8001874:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b10      	cmp	r3, #16
 8001884:	d108      	bne.n	8001898 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001896:	e007      	b.n	80018a8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	60da      	str	r2, [r3, #12]
}
 80018a8:	46c0      	nop			; (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b004      	add	sp, #16
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <DMA_CalcBaseAndBitshift+0x30>)
 80018be:	4694      	mov	ip, r2
 80018c0:	4463      	add	r3, ip
 80018c2:	2114      	movs	r1, #20
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7fe fc29 	bl	800011c <__udivsi3>
 80018ca:	0003      	movs	r3, r0
 80018cc:	009a      	lsls	r2, r3, #2
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a03      	ldr	r2, [pc, #12]	; (80018e4 <DMA_CalcBaseAndBitshift+0x34>)
 80018d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80018d8:	46c0      	nop			; (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	b002      	add	sp, #8
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	bffdfff8 	.word	0xbffdfff8
 80018e4:	40020000 	.word	0x40020000

080018e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f6:	e155      	b.n	8001ba4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2101      	movs	r1, #1
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	4091      	lsls	r1, r2
 8001902:	000a      	movs	r2, r1
 8001904:	4013      	ands	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d100      	bne.n	8001910 <HAL_GPIO_Init+0x28>
 800190e:	e146      	b.n	8001b9e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2203      	movs	r2, #3
 8001916:	4013      	ands	r3, r2
 8001918:	2b01      	cmp	r3, #1
 800191a:	d005      	beq.n	8001928 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2203      	movs	r2, #3
 8001922:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001924:	2b02      	cmp	r3, #2
 8001926:	d130      	bne.n	800198a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	409a      	lsls	r2, r3
 8001936:	0013      	movs	r3, r2
 8001938:	43da      	mvns	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	409a      	lsls	r2, r3
 800194a:	0013      	movs	r3, r2
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800195e:	2201      	movs	r2, #1
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	409a      	lsls	r2, r3
 8001964:	0013      	movs	r3, r2
 8001966:	43da      	mvns	r2, r3
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	2201      	movs	r2, #1
 8001976:	401a      	ands	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	409a      	lsls	r2, r3
 800197c:	0013      	movs	r3, r2
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2203      	movs	r2, #3
 8001990:	4013      	ands	r3, r2
 8001992:	2b03      	cmp	r3, #3
 8001994:	d017      	beq.n	80019c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	2203      	movs	r2, #3
 80019a2:	409a      	lsls	r2, r3
 80019a4:	0013      	movs	r3, r2
 80019a6:	43da      	mvns	r2, r3
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	689a      	ldr	r2, [r3, #8]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	409a      	lsls	r2, r3
 80019b8:	0013      	movs	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2203      	movs	r2, #3
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d123      	bne.n	8001a1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	08da      	lsrs	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3208      	adds	r2, #8
 80019da:	0092      	lsls	r2, r2, #2
 80019dc:	58d3      	ldr	r3, [r2, r3]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	2207      	movs	r2, #7
 80019e4:	4013      	ands	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	220f      	movs	r2, #15
 80019ea:	409a      	lsls	r2, r3
 80019ec:	0013      	movs	r3, r2
 80019ee:	43da      	mvns	r2, r3
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2107      	movs	r1, #7
 80019fe:	400b      	ands	r3, r1
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	409a      	lsls	r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	08da      	lsrs	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3208      	adds	r2, #8
 8001a14:	0092      	lsls	r2, r2, #2
 8001a16:	6939      	ldr	r1, [r7, #16]
 8001a18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	409a      	lsls	r2, r3
 8001a28:	0013      	movs	r3, r2
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2203      	movs	r2, #3
 8001a38:	401a      	ands	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	0013      	movs	r3, r2
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	23c0      	movs	r3, #192	; 0xc0
 8001a54:	029b      	lsls	r3, r3, #10
 8001a56:	4013      	ands	r3, r2
 8001a58:	d100      	bne.n	8001a5c <HAL_GPIO_Init+0x174>
 8001a5a:	e0a0      	b.n	8001b9e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5c:	4b57      	ldr	r3, [pc, #348]	; (8001bbc <HAL_GPIO_Init+0x2d4>)
 8001a5e:	699a      	ldr	r2, [r3, #24]
 8001a60:	4b56      	ldr	r3, [pc, #344]	; (8001bbc <HAL_GPIO_Init+0x2d4>)
 8001a62:	2101      	movs	r1, #1
 8001a64:	430a      	orrs	r2, r1
 8001a66:	619a      	str	r2, [r3, #24]
 8001a68:	4b54      	ldr	r3, [pc, #336]	; (8001bbc <HAL_GPIO_Init+0x2d4>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	4013      	ands	r3, r2
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a74:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <HAL_GPIO_Init+0x2d8>)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	589b      	ldr	r3, [r3, r2]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2203      	movs	r2, #3
 8001a86:	4013      	ands	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	220f      	movs	r2, #15
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	0013      	movs	r3, r2
 8001a90:	43da      	mvns	r2, r3
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	2390      	movs	r3, #144	; 0x90
 8001a9c:	05db      	lsls	r3, r3, #23
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d019      	beq.n	8001ad6 <HAL_GPIO_Init+0x1ee>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a47      	ldr	r2, [pc, #284]	; (8001bc4 <HAL_GPIO_Init+0x2dc>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_GPIO_Init+0x1ea>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a46      	ldr	r2, [pc, #280]	; (8001bc8 <HAL_GPIO_Init+0x2e0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00d      	beq.n	8001ace <HAL_GPIO_Init+0x1e6>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a45      	ldr	r2, [pc, #276]	; (8001bcc <HAL_GPIO_Init+0x2e4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x1e2>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a44      	ldr	r2, [pc, #272]	; (8001bd0 <HAL_GPIO_Init+0x2e8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_GPIO_Init+0x1de>
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	e008      	b.n	8001ad8 <HAL_GPIO_Init+0x1f0>
 8001ac6:	2305      	movs	r3, #5
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x1f0>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e004      	b.n	8001ad8 <HAL_GPIO_Init+0x1f0>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x1f0>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x1f0>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	2103      	movs	r1, #3
 8001adc:	400a      	ands	r2, r1
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ae8:	4935      	ldr	r1, [pc, #212]	; (8001bc0 <HAL_GPIO_Init+0x2d8>)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af6:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <HAL_GPIO_Init+0x2ec>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	43da      	mvns	r2, r3
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4013      	ands	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	035b      	lsls	r3, r3, #13
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b1a:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <HAL_GPIO_Init+0x2ec>)
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b20:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <HAL_GPIO_Init+0x2ec>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	43da      	mvns	r2, r3
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	039b      	lsls	r3, r3, #14
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b44:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <HAL_GPIO_Init+0x2ec>)
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001b4a:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <HAL_GPIO_Init+0x2ec>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43da      	mvns	r2, r3
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	029b      	lsls	r3, r3, #10
 8001b62:	4013      	ands	r3, r2
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <HAL_GPIO_Init+0x2ec>)
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001b74:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <HAL_GPIO_Init+0x2ec>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	43da      	mvns	r2, r3
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	2380      	movs	r3, #128	; 0x80
 8001b8a:	025b      	lsls	r3, r3, #9
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <HAL_GPIO_Init+0x2ec>)
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	40da      	lsrs	r2, r3
 8001bac:	1e13      	subs	r3, r2, #0
 8001bae:	d000      	beq.n	8001bb2 <HAL_GPIO_Init+0x2ca>
 8001bb0:	e6a2      	b.n	80018f8 <HAL_GPIO_Init+0x10>
  } 
}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	b006      	add	sp, #24
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40010000 	.word	0x40010000
 8001bc4:	48000400 	.word	0x48000400
 8001bc8:	48000800 	.word	0x48000800
 8001bcc:	48000c00 	.word	0x48000c00
 8001bd0:	48001000 	.word	0x48001000
 8001bd4:	40010400 	.word	0x40010400

08001bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	0008      	movs	r0, r1
 8001be2:	0011      	movs	r1, r2
 8001be4:	1cbb      	adds	r3, r7, #2
 8001be6:	1c02      	adds	r2, r0, #0
 8001be8:	801a      	strh	r2, [r3, #0]
 8001bea:	1c7b      	adds	r3, r7, #1
 8001bec:	1c0a      	adds	r2, r1, #0
 8001bee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bf0:	1c7b      	adds	r3, r7, #1
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d004      	beq.n	8001c02 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bf8:	1cbb      	adds	r3, r7, #2
 8001bfa:	881a      	ldrh	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c00:	e003      	b.n	8001c0a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c02:	1cbb      	adds	r3, r7, #2
 8001c04:	881a      	ldrh	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b002      	add	sp, #8
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d102      	bne.n	8001c28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	f000 fb76 	bl	8002314 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d100      	bne.n	8001c34 <HAL_RCC_OscConfig+0x20>
 8001c32:	e08e      	b.n	8001d52 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c34:	4bc5      	ldr	r3, [pc, #788]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	220c      	movs	r2, #12
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d00e      	beq.n	8001c5e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c40:	4bc2      	ldr	r3, [pc, #776]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	220c      	movs	r2, #12
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d117      	bne.n	8001c7c <HAL_RCC_OscConfig+0x68>
 8001c4c:	4bbf      	ldr	r3, [pc, #764]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	23c0      	movs	r3, #192	; 0xc0
 8001c52:	025b      	lsls	r3, r3, #9
 8001c54:	401a      	ands	r2, r3
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	025b      	lsls	r3, r3, #9
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d10e      	bne.n	8001c7c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5e:	4bbb      	ldr	r3, [pc, #748]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	029b      	lsls	r3, r3, #10
 8001c66:	4013      	ands	r3, r2
 8001c68:	d100      	bne.n	8001c6c <HAL_RCC_OscConfig+0x58>
 8001c6a:	e071      	b.n	8001d50 <HAL_RCC_OscConfig+0x13c>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d000      	beq.n	8001c76 <HAL_RCC_OscConfig+0x62>
 8001c74:	e06c      	b.n	8001d50 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	f000 fb4c 	bl	8002314 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d107      	bne.n	8001c94 <HAL_RCC_OscConfig+0x80>
 8001c84:	4bb1      	ldr	r3, [pc, #708]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4bb0      	ldr	r3, [pc, #704]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001c8a:	2180      	movs	r1, #128	; 0x80
 8001c8c:	0249      	lsls	r1, r1, #9
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e02f      	b.n	8001cf4 <HAL_RCC_OscConfig+0xe0>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10c      	bne.n	8001cb6 <HAL_RCC_OscConfig+0xa2>
 8001c9c:	4bab      	ldr	r3, [pc, #684]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4baa      	ldr	r3, [pc, #680]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001ca2:	49ab      	ldr	r1, [pc, #684]	; (8001f50 <HAL_RCC_OscConfig+0x33c>)
 8001ca4:	400a      	ands	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	4ba8      	ldr	r3, [pc, #672]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4ba7      	ldr	r3, [pc, #668]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001cae:	49a9      	ldr	r1, [pc, #676]	; (8001f54 <HAL_RCC_OscConfig+0x340>)
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	e01e      	b.n	8001cf4 <HAL_RCC_OscConfig+0xe0>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b05      	cmp	r3, #5
 8001cbc:	d10e      	bne.n	8001cdc <HAL_RCC_OscConfig+0xc8>
 8001cbe:	4ba3      	ldr	r3, [pc, #652]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4ba2      	ldr	r3, [pc, #648]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	02c9      	lsls	r1, r1, #11
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	4b9f      	ldr	r3, [pc, #636]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b9e      	ldr	r3, [pc, #632]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001cd2:	2180      	movs	r1, #128	; 0x80
 8001cd4:	0249      	lsls	r1, r1, #9
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e00b      	b.n	8001cf4 <HAL_RCC_OscConfig+0xe0>
 8001cdc:	4b9b      	ldr	r3, [pc, #620]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b9a      	ldr	r3, [pc, #616]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001ce2:	499b      	ldr	r1, [pc, #620]	; (8001f50 <HAL_RCC_OscConfig+0x33c>)
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	4b98      	ldr	r3, [pc, #608]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b97      	ldr	r3, [pc, #604]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001cee:	4999      	ldr	r1, [pc, #612]	; (8001f54 <HAL_RCC_OscConfig+0x340>)
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d014      	beq.n	8001d26 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fb74 	bl	80013e8 <HAL_GetTick>
 8001d00:	0003      	movs	r3, r0
 8001d02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d06:	f7ff fb6f 	bl	80013e8 <HAL_GetTick>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b64      	cmp	r3, #100	; 0x64
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e2fd      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d18:	4b8c      	ldr	r3, [pc, #560]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	029b      	lsls	r3, r3, #10
 8001d20:	4013      	ands	r3, r2
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0xf2>
 8001d24:	e015      	b.n	8001d52 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d26:	f7ff fb5f 	bl	80013e8 <HAL_GetTick>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff fb5a 	bl	80013e8 <HAL_GetTick>
 8001d34:	0002      	movs	r2, r0
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e2e8      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	4b82      	ldr	r3, [pc, #520]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	2380      	movs	r3, #128	; 0x80
 8001d48:	029b      	lsls	r3, r3, #10
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x11c>
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2202      	movs	r2, #2
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d100      	bne.n	8001d5e <HAL_RCC_OscConfig+0x14a>
 8001d5c:	e06c      	b.n	8001e38 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d5e:	4b7b      	ldr	r3, [pc, #492]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	220c      	movs	r2, #12
 8001d64:	4013      	ands	r3, r2
 8001d66:	d00e      	beq.n	8001d86 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d68:	4b78      	ldr	r3, [pc, #480]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	220c      	movs	r2, #12
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d11f      	bne.n	8001db4 <HAL_RCC_OscConfig+0x1a0>
 8001d74:	4b75      	ldr	r3, [pc, #468]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	23c0      	movs	r3, #192	; 0xc0
 8001d7a:	025b      	lsls	r3, r3, #9
 8001d7c:	401a      	ands	r2, r3
 8001d7e:	2380      	movs	r3, #128	; 0x80
 8001d80:	021b      	lsls	r3, r3, #8
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d116      	bne.n	8001db4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d86:	4b71      	ldr	r3, [pc, #452]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_OscConfig+0x188>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e2bb      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b6b      	ldr	r3, [pc, #428]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	22f8      	movs	r2, #248	; 0xf8
 8001da2:	4393      	bics	r3, r2
 8001da4:	0019      	movs	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	00da      	lsls	r2, r3, #3
 8001dac:	4b67      	ldr	r3, [pc, #412]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001dae:	430a      	orrs	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db2:	e041      	b.n	8001e38 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d024      	beq.n	8001e06 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dbc:	4b63      	ldr	r3, [pc, #396]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b62      	ldr	r3, [pc, #392]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fb0e 	bl	80013e8 <HAL_GetTick>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd2:	f7ff fb09 	bl	80013e8 <HAL_GetTick>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e297      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	4b59      	ldr	r3, [pc, #356]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2202      	movs	r2, #2
 8001dea:	4013      	ands	r3, r2
 8001dec:	d0f1      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dee:	4b57      	ldr	r3, [pc, #348]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	22f8      	movs	r2, #248	; 0xf8
 8001df4:	4393      	bics	r3, r2
 8001df6:	0019      	movs	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	00da      	lsls	r2, r3, #3
 8001dfe:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001e00:	430a      	orrs	r2, r1
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e018      	b.n	8001e38 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e06:	4b51      	ldr	r3, [pc, #324]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4b50      	ldr	r3, [pc, #320]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	438a      	bics	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e12:	f7ff fae9 	bl	80013e8 <HAL_GetTick>
 8001e16:	0003      	movs	r3, r0
 8001e18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e1c:	f7ff fae4 	bl	80013e8 <HAL_GetTick>
 8001e20:	0002      	movs	r2, r0
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e272      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2e:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2202      	movs	r2, #2
 8001e34:	4013      	ands	r3, r2
 8001e36:	d1f1      	bne.n	8001e1c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d036      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d019      	beq.n	8001e7e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e4a:	4b40      	ldr	r3, [pc, #256]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e4e:	4b3f      	ldr	r3, [pc, #252]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001e50:	2101      	movs	r1, #1
 8001e52:	430a      	orrs	r2, r1
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e56:	f7ff fac7 	bl	80013e8 <HAL_GetTick>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff fac2 	bl	80013e8 <HAL_GetTick>
 8001e64:	0002      	movs	r2, r0
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e250      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e72:	4b36      	ldr	r3, [pc, #216]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	2202      	movs	r2, #2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d0f1      	beq.n	8001e60 <HAL_RCC_OscConfig+0x24c>
 8001e7c:	e018      	b.n	8001eb0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7e:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e82:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001e84:	2101      	movs	r1, #1
 8001e86:	438a      	bics	r2, r1
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8a:	f7ff faad 	bl	80013e8 <HAL_GetTick>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e94:	f7ff faa8 	bl	80013e8 <HAL_GetTick>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e236      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea6:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	2202      	movs	r2, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	d1f1      	bne.n	8001e94 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d100      	bne.n	8001ebc <HAL_RCC_OscConfig+0x2a8>
 8001eba:	e0b5      	b.n	8002028 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ebc:	201f      	movs	r0, #31
 8001ebe:	183b      	adds	r3, r7, r0
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec4:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001ec6:	69da      	ldr	r2, [r3, #28]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	055b      	lsls	r3, r3, #21
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d110      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed0:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001ed2:	69da      	ldr	r2, [r3, #28]
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	0549      	lsls	r1, r1, #21
 8001eda:	430a      	orrs	r2, r1
 8001edc:	61da      	str	r2, [r3, #28]
 8001ede:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001ee0:	69da      	ldr	r2, [r3, #28]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	055b      	lsls	r3, r3, #21
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001eec:	183b      	adds	r3, r7, r0
 8001eee:	2201      	movs	r2, #1
 8001ef0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef2:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_RCC_OscConfig+0x344>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4013      	ands	r3, r2
 8001efc:	d11a      	bne.n	8001f34 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_RCC_OscConfig+0x344>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_RCC_OscConfig+0x344>)
 8001f04:	2180      	movs	r1, #128	; 0x80
 8001f06:	0049      	lsls	r1, r1, #1
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0c:	f7ff fa6c 	bl	80013e8 <HAL_GetTick>
 8001f10:	0003      	movs	r3, r0
 8001f12:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f16:	f7ff fa67 	bl	80013e8 <HAL_GetTick>
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b64      	cmp	r3, #100	; 0x64
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e1f5      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_OscConfig+0x344>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4013      	ands	r3, r2
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d10f      	bne.n	8001f5c <HAL_RCC_OscConfig+0x348>
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001f3e:	6a1a      	ldr	r2, [r3, #32]
 8001f40:	4b02      	ldr	r3, [pc, #8]	; (8001f4c <HAL_RCC_OscConfig+0x338>)
 8001f42:	2101      	movs	r1, #1
 8001f44:	430a      	orrs	r2, r1
 8001f46:	621a      	str	r2, [r3, #32]
 8001f48:	e036      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3a4>
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	fffeffff 	.word	0xfffeffff
 8001f54:	fffbffff 	.word	0xfffbffff
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10c      	bne.n	8001f7e <HAL_RCC_OscConfig+0x36a>
 8001f64:	4bca      	ldr	r3, [pc, #808]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8001f66:	6a1a      	ldr	r2, [r3, #32]
 8001f68:	4bc9      	ldr	r3, [pc, #804]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	438a      	bics	r2, r1
 8001f6e:	621a      	str	r2, [r3, #32]
 8001f70:	4bc7      	ldr	r3, [pc, #796]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8001f72:	6a1a      	ldr	r2, [r3, #32]
 8001f74:	4bc6      	ldr	r3, [pc, #792]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8001f76:	2104      	movs	r1, #4
 8001f78:	438a      	bics	r2, r1
 8001f7a:	621a      	str	r2, [r3, #32]
 8001f7c:	e01c      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3a4>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x38c>
 8001f86:	4bc2      	ldr	r3, [pc, #776]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8001f88:	6a1a      	ldr	r2, [r3, #32]
 8001f8a:	4bc1      	ldr	r3, [pc, #772]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8001f8c:	2104      	movs	r1, #4
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	621a      	str	r2, [r3, #32]
 8001f92:	4bbf      	ldr	r3, [pc, #764]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8001f94:	6a1a      	ldr	r2, [r3, #32]
 8001f96:	4bbe      	ldr	r3, [pc, #760]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8001f98:	2101      	movs	r1, #1
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	621a      	str	r2, [r3, #32]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3a4>
 8001fa0:	4bbb      	ldr	r3, [pc, #748]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8001fa2:	6a1a      	ldr	r2, [r3, #32]
 8001fa4:	4bba      	ldr	r3, [pc, #744]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	438a      	bics	r2, r1
 8001faa:	621a      	str	r2, [r3, #32]
 8001fac:	4bb8      	ldr	r3, [pc, #736]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8001fae:	6a1a      	ldr	r2, [r3, #32]
 8001fb0:	4bb7      	ldr	r3, [pc, #732]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	438a      	bics	r2, r1
 8001fb6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d014      	beq.n	8001fea <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc0:	f7ff fa12 	bl	80013e8 <HAL_GetTick>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc8:	e009      	b.n	8001fde <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7ff fa0d 	bl	80013e8 <HAL_GetTick>
 8001fce:	0002      	movs	r2, r0
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	4aaf      	ldr	r2, [pc, #700]	; (8002294 <HAL_RCC_OscConfig+0x680>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e19a      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fde:	4bac      	ldr	r3, [pc, #688]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x3b6>
 8001fe8:	e013      	b.n	8002012 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7ff f9fd 	bl	80013e8 <HAL_GetTick>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff2:	e009      	b.n	8002008 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff4:	f7ff f9f8 	bl	80013e8 <HAL_GetTick>
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	4aa5      	ldr	r2, [pc, #660]	; (8002294 <HAL_RCC_OscConfig+0x680>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e185      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002008:	4ba1      	ldr	r3, [pc, #644]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	2202      	movs	r2, #2
 800200e:	4013      	ands	r3, r2
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002012:	231f      	movs	r3, #31
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d105      	bne.n	8002028 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201c:	4b9c      	ldr	r3, [pc, #624]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 800201e:	69da      	ldr	r2, [r3, #28]
 8002020:	4b9b      	ldr	r3, [pc, #620]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8002022:	499d      	ldr	r1, [pc, #628]	; (8002298 <HAL_RCC_OscConfig+0x684>)
 8002024:	400a      	ands	r2, r1
 8002026:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2210      	movs	r2, #16
 800202e:	4013      	ands	r3, r2
 8002030:	d063      	beq.n	80020fa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d12a      	bne.n	8002090 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800203a:	4b95      	ldr	r3, [pc, #596]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 800203c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800203e:	4b94      	ldr	r3, [pc, #592]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8002040:	2104      	movs	r1, #4
 8002042:	430a      	orrs	r2, r1
 8002044:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002046:	4b92      	ldr	r3, [pc, #584]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8002048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800204a:	4b91      	ldr	r3, [pc, #580]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 800204c:	2101      	movs	r1, #1
 800204e:	430a      	orrs	r2, r1
 8002050:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002052:	f7ff f9c9 	bl	80013e8 <HAL_GetTick>
 8002056:	0003      	movs	r3, r0
 8002058:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800205c:	f7ff f9c4 	bl	80013e8 <HAL_GetTick>
 8002060:	0002      	movs	r2, r0
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e152      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800206e:	4b88      	ldr	r3, [pc, #544]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8002070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002072:	2202      	movs	r2, #2
 8002074:	4013      	ands	r3, r2
 8002076:	d0f1      	beq.n	800205c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002078:	4b85      	ldr	r3, [pc, #532]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 800207a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207c:	22f8      	movs	r2, #248	; 0xf8
 800207e:	4393      	bics	r3, r2
 8002080:	0019      	movs	r1, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	00da      	lsls	r2, r3, #3
 8002088:	4b81      	ldr	r3, [pc, #516]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 800208a:	430a      	orrs	r2, r1
 800208c:	635a      	str	r2, [r3, #52]	; 0x34
 800208e:	e034      	b.n	80020fa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	3305      	adds	r3, #5
 8002096:	d111      	bne.n	80020bc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002098:	4b7d      	ldr	r3, [pc, #500]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 800209a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800209c:	4b7c      	ldr	r3, [pc, #496]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 800209e:	2104      	movs	r1, #4
 80020a0:	438a      	bics	r2, r1
 80020a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020a4:	4b7a      	ldr	r3, [pc, #488]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 80020a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a8:	22f8      	movs	r2, #248	; 0xf8
 80020aa:	4393      	bics	r3, r2
 80020ac:	0019      	movs	r1, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	00da      	lsls	r2, r3, #3
 80020b4:	4b76      	ldr	r3, [pc, #472]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 80020b6:	430a      	orrs	r2, r1
 80020b8:	635a      	str	r2, [r3, #52]	; 0x34
 80020ba:	e01e      	b.n	80020fa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020bc:	4b74      	ldr	r3, [pc, #464]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 80020be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c0:	4b73      	ldr	r3, [pc, #460]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 80020c2:	2104      	movs	r1, #4
 80020c4:	430a      	orrs	r2, r1
 80020c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80020c8:	4b71      	ldr	r3, [pc, #452]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 80020ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020cc:	4b70      	ldr	r3, [pc, #448]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 80020ce:	2101      	movs	r1, #1
 80020d0:	438a      	bics	r2, r1
 80020d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d4:	f7ff f988 	bl	80013e8 <HAL_GetTick>
 80020d8:	0003      	movs	r3, r0
 80020da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020de:	f7ff f983 	bl	80013e8 <HAL_GetTick>
 80020e2:	0002      	movs	r2, r0
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e111      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020f0:	4b67      	ldr	r3, [pc, #412]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 80020f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f4:	2202      	movs	r2, #2
 80020f6:	4013      	ands	r3, r2
 80020f8:	d1f1      	bne.n	80020de <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2220      	movs	r2, #32
 8002100:	4013      	ands	r3, r2
 8002102:	d05c      	beq.n	80021be <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002104:	4b62      	ldr	r3, [pc, #392]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	220c      	movs	r2, #12
 800210a:	4013      	ands	r3, r2
 800210c:	2b0c      	cmp	r3, #12
 800210e:	d00e      	beq.n	800212e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002110:	4b5f      	ldr	r3, [pc, #380]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	220c      	movs	r2, #12
 8002116:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002118:	2b08      	cmp	r3, #8
 800211a:	d114      	bne.n	8002146 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800211c:	4b5c      	ldr	r3, [pc, #368]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	23c0      	movs	r3, #192	; 0xc0
 8002122:	025b      	lsls	r3, r3, #9
 8002124:	401a      	ands	r2, r3
 8002126:	23c0      	movs	r3, #192	; 0xc0
 8002128:	025b      	lsls	r3, r3, #9
 800212a:	429a      	cmp	r2, r3
 800212c:	d10b      	bne.n	8002146 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800212e:	4b58      	ldr	r3, [pc, #352]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8002130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	029b      	lsls	r3, r3, #10
 8002136:	4013      	ands	r3, r2
 8002138:	d040      	beq.n	80021bc <HAL_RCC_OscConfig+0x5a8>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d03c      	beq.n	80021bc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e0e6      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d01b      	beq.n	8002186 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800214e:	4b50      	ldr	r3, [pc, #320]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8002150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002152:	4b4f      	ldr	r3, [pc, #316]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8002154:	2180      	movs	r1, #128	; 0x80
 8002156:	0249      	lsls	r1, r1, #9
 8002158:	430a      	orrs	r2, r1
 800215a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7ff f944 	bl	80013e8 <HAL_GetTick>
 8002160:	0003      	movs	r3, r0
 8002162:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002166:	f7ff f93f 	bl	80013e8 <HAL_GetTick>
 800216a:	0002      	movs	r2, r0
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e0cd      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002178:	4b45      	ldr	r3, [pc, #276]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 800217a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	029b      	lsls	r3, r3, #10
 8002180:	4013      	ands	r3, r2
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x552>
 8002184:	e01b      	b.n	80021be <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002186:	4b42      	ldr	r3, [pc, #264]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8002188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800218a:	4b41      	ldr	r3, [pc, #260]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 800218c:	4943      	ldr	r1, [pc, #268]	; (800229c <HAL_RCC_OscConfig+0x688>)
 800218e:	400a      	ands	r2, r1
 8002190:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002192:	f7ff f929 	bl	80013e8 <HAL_GetTick>
 8002196:	0003      	movs	r3, r0
 8002198:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800219c:	f7ff f924 	bl	80013e8 <HAL_GetTick>
 80021a0:	0002      	movs	r2, r0
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e0b2      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80021ae:	4b38      	ldr	r3, [pc, #224]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 80021b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	029b      	lsls	r3, r3, #10
 80021b6:	4013      	ands	r3, r2
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x588>
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80021bc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d100      	bne.n	80021c8 <HAL_RCC_OscConfig+0x5b4>
 80021c6:	e0a4      	b.n	8002312 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c8:	4b31      	ldr	r3, [pc, #196]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	220c      	movs	r2, #12
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d100      	bne.n	80021d6 <HAL_RCC_OscConfig+0x5c2>
 80021d4:	e078      	b.n	80022c8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d14c      	bne.n	8002278 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021de:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 80021e4:	492e      	ldr	r1, [pc, #184]	; (80022a0 <HAL_RCC_OscConfig+0x68c>)
 80021e6:	400a      	ands	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7ff f8fd 	bl	80013e8 <HAL_GetTick>
 80021ee:	0003      	movs	r3, r0
 80021f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f4:	f7ff f8f8 	bl	80013e8 <HAL_GetTick>
 80021f8:	0002      	movs	r2, r0
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e086      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002206:	4b22      	ldr	r3, [pc, #136]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	2380      	movs	r3, #128	; 0x80
 800220c:	049b      	lsls	r3, r3, #18
 800220e:	4013      	ands	r3, r2
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	220f      	movs	r2, #15
 8002218:	4393      	bics	r3, r2
 800221a:	0019      	movs	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8002222:	430a      	orrs	r2, r1
 8002224:	62da      	str	r2, [r3, #44]	; 0x2c
 8002226:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4a1e      	ldr	r2, [pc, #120]	; (80022a4 <HAL_RCC_OscConfig+0x690>)
 800222c:	4013      	ands	r3, r2
 800222e:	0019      	movs	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	431a      	orrs	r2, r3
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 800223c:	430a      	orrs	r2, r1
 800223e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 8002246:	2180      	movs	r1, #128	; 0x80
 8002248:	0449      	lsls	r1, r1, #17
 800224a:	430a      	orrs	r2, r1
 800224c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7ff f8cb 	bl	80013e8 <HAL_GetTick>
 8002252:	0003      	movs	r3, r0
 8002254:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002258:	f7ff f8c6 	bl	80013e8 <HAL_GetTick>
 800225c:	0002      	movs	r2, r0
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e054      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	049b      	lsls	r3, r3, #18
 8002272:	4013      	ands	r3, r2
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0x644>
 8002276:	e04c      	b.n	8002312 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <HAL_RCC_OscConfig+0x67c>)
 800227e:	4908      	ldr	r1, [pc, #32]	; (80022a0 <HAL_RCC_OscConfig+0x68c>)
 8002280:	400a      	ands	r2, r1
 8002282:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7ff f8b0 	bl	80013e8 <HAL_GetTick>
 8002288:	0003      	movs	r3, r0
 800228a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228c:	e015      	b.n	80022ba <HAL_RCC_OscConfig+0x6a6>
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	40021000 	.word	0x40021000
 8002294:	00001388 	.word	0x00001388
 8002298:	efffffff 	.word	0xefffffff
 800229c:	fffeffff 	.word	0xfffeffff
 80022a0:	feffffff 	.word	0xfeffffff
 80022a4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a8:	f7ff f89e 	bl	80013e8 <HAL_GetTick>
 80022ac:	0002      	movs	r2, r0
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e02c      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_RCC_OscConfig+0x708>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	049b      	lsls	r3, r3, #18
 80022c2:	4013      	ands	r3, r2
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x694>
 80022c6:	e024      	b.n	8002312 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e01f      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_RCC_OscConfig+0x708>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <HAL_RCC_OscConfig+0x708>)
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	23c0      	movs	r3, #192	; 0xc0
 80022e4:	025b      	lsls	r3, r3, #9
 80022e6:	401a      	ands	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d10e      	bne.n	800230e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	220f      	movs	r2, #15
 80022f4:	401a      	ands	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d107      	bne.n	800230e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	23f0      	movs	r3, #240	; 0xf0
 8002302:	039b      	lsls	r3, r3, #14
 8002304:	401a      	ands	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d001      	beq.n	8002312 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	0018      	movs	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	b008      	add	sp, #32
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000

08002320 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0bf      	b.n	80024b4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002334:	4b61      	ldr	r3, [pc, #388]	; (80024bc <HAL_RCC_ClockConfig+0x19c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2201      	movs	r2, #1
 800233a:	4013      	ands	r3, r2
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d911      	bls.n	8002366 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b5e      	ldr	r3, [pc, #376]	; (80024bc <HAL_RCC_ClockConfig+0x19c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2201      	movs	r2, #1
 8002348:	4393      	bics	r3, r2
 800234a:	0019      	movs	r1, r3
 800234c:	4b5b      	ldr	r3, [pc, #364]	; (80024bc <HAL_RCC_ClockConfig+0x19c>)
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002354:	4b59      	ldr	r3, [pc, #356]	; (80024bc <HAL_RCC_ClockConfig+0x19c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2201      	movs	r2, #1
 800235a:	4013      	ands	r3, r2
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d001      	beq.n	8002366 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e0a6      	b.n	80024b4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2202      	movs	r2, #2
 800236c:	4013      	ands	r3, r2
 800236e:	d015      	beq.n	800239c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2204      	movs	r2, #4
 8002376:	4013      	ands	r3, r2
 8002378:	d006      	beq.n	8002388 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800237a:	4b51      	ldr	r3, [pc, #324]	; (80024c0 <HAL_RCC_ClockConfig+0x1a0>)
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	4b50      	ldr	r3, [pc, #320]	; (80024c0 <HAL_RCC_ClockConfig+0x1a0>)
 8002380:	21e0      	movs	r1, #224	; 0xe0
 8002382:	00c9      	lsls	r1, r1, #3
 8002384:	430a      	orrs	r2, r1
 8002386:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002388:	4b4d      	ldr	r3, [pc, #308]	; (80024c0 <HAL_RCC_ClockConfig+0x1a0>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	22f0      	movs	r2, #240	; 0xf0
 800238e:	4393      	bics	r3, r2
 8002390:	0019      	movs	r1, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	4b4a      	ldr	r3, [pc, #296]	; (80024c0 <HAL_RCC_ClockConfig+0x1a0>)
 8002398:	430a      	orrs	r2, r1
 800239a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2201      	movs	r2, #1
 80023a2:	4013      	ands	r3, r2
 80023a4:	d04c      	beq.n	8002440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ae:	4b44      	ldr	r3, [pc, #272]	; (80024c0 <HAL_RCC_ClockConfig+0x1a0>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	029b      	lsls	r3, r3, #10
 80023b6:	4013      	ands	r3, r2
 80023b8:	d120      	bne.n	80023fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e07a      	b.n	80024b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d107      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c6:	4b3e      	ldr	r3, [pc, #248]	; (80024c0 <HAL_RCC_ClockConfig+0x1a0>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	049b      	lsls	r3, r3, #18
 80023ce:	4013      	ands	r3, r2
 80023d0:	d114      	bne.n	80023fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e06e      	b.n	80024b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023de:	4b38      	ldr	r3, [pc, #224]	; (80024c0 <HAL_RCC_ClockConfig+0x1a0>)
 80023e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	029b      	lsls	r3, r3, #10
 80023e6:	4013      	ands	r3, r2
 80023e8:	d108      	bne.n	80023fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e062      	b.n	80024b4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ee:	4b34      	ldr	r3, [pc, #208]	; (80024c0 <HAL_RCC_ClockConfig+0x1a0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2202      	movs	r2, #2
 80023f4:	4013      	ands	r3, r2
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e05b      	b.n	80024b4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023fc:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <HAL_RCC_ClockConfig+0x1a0>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2203      	movs	r2, #3
 8002402:	4393      	bics	r3, r2
 8002404:	0019      	movs	r1, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_RCC_ClockConfig+0x1a0>)
 800240c:	430a      	orrs	r2, r1
 800240e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002410:	f7fe ffea 	bl	80013e8 <HAL_GetTick>
 8002414:	0003      	movs	r3, r0
 8002416:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002418:	e009      	b.n	800242e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241a:	f7fe ffe5 	bl	80013e8 <HAL_GetTick>
 800241e:	0002      	movs	r2, r0
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	4a27      	ldr	r2, [pc, #156]	; (80024c4 <HAL_RCC_ClockConfig+0x1a4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e042      	b.n	80024b4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <HAL_RCC_ClockConfig+0x1a0>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	220c      	movs	r2, #12
 8002434:	401a      	ands	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	429a      	cmp	r2, r3
 800243e:	d1ec      	bne.n	800241a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002440:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <HAL_RCC_ClockConfig+0x19c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2201      	movs	r2, #1
 8002446:	4013      	ands	r3, r2
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d211      	bcs.n	8002472 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b1b      	ldr	r3, [pc, #108]	; (80024bc <HAL_RCC_ClockConfig+0x19c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2201      	movs	r2, #1
 8002454:	4393      	bics	r3, r2
 8002456:	0019      	movs	r1, r3
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_RCC_ClockConfig+0x19c>)
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002460:	4b16      	ldr	r3, [pc, #88]	; (80024bc <HAL_RCC_ClockConfig+0x19c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2201      	movs	r2, #1
 8002466:	4013      	ands	r3, r2
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d001      	beq.n	8002472 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e020      	b.n	80024b4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2204      	movs	r2, #4
 8002478:	4013      	ands	r3, r2
 800247a:	d009      	beq.n	8002490 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800247c:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <HAL_RCC_ClockConfig+0x1a0>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4a11      	ldr	r2, [pc, #68]	; (80024c8 <HAL_RCC_ClockConfig+0x1a8>)
 8002482:	4013      	ands	r3, r2
 8002484:	0019      	movs	r1, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <HAL_RCC_ClockConfig+0x1a0>)
 800248c:	430a      	orrs	r2, r1
 800248e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002490:	f000 f820 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8002494:	0001      	movs	r1, r0
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_RCC_ClockConfig+0x1a0>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	091b      	lsrs	r3, r3, #4
 800249c:	220f      	movs	r2, #15
 800249e:	4013      	ands	r3, r2
 80024a0:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <HAL_RCC_ClockConfig+0x1ac>)
 80024a2:	5cd3      	ldrb	r3, [r2, r3]
 80024a4:	000a      	movs	r2, r1
 80024a6:	40da      	lsrs	r2, r3
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_RCC_ClockConfig+0x1b0>)
 80024aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80024ac:	2000      	movs	r0, #0
 80024ae:	f7fe ff55 	bl	800135c <HAL_InitTick>
  
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	0018      	movs	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b004      	add	sp, #16
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40022000 	.word	0x40022000
 80024c0:	40021000 	.word	0x40021000
 80024c4:	00001388 	.word	0x00001388
 80024c8:	fffff8ff 	.word	0xfffff8ff
 80024cc:	08004ca8 	.word	0x08004ca8
 80024d0:	20000000 	.word	0x20000000

080024d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80024ee:	4b2d      	ldr	r3, [pc, #180]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	220c      	movs	r2, #12
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b0c      	cmp	r3, #12
 80024fc:	d046      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0xb8>
 80024fe:	d848      	bhi.n	8002592 <HAL_RCC_GetSysClockFreq+0xbe>
 8002500:	2b04      	cmp	r3, #4
 8002502:	d002      	beq.n	800250a <HAL_RCC_GetSysClockFreq+0x36>
 8002504:	2b08      	cmp	r3, #8
 8002506:	d003      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x3c>
 8002508:	e043      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800250a:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800250c:	613b      	str	r3, [r7, #16]
      break;
 800250e:	e043      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	0c9b      	lsrs	r3, r3, #18
 8002514:	220f      	movs	r2, #15
 8002516:	4013      	ands	r3, r2
 8002518:	4a24      	ldr	r2, [pc, #144]	; (80025ac <HAL_RCC_GetSysClockFreq+0xd8>)
 800251a:	5cd3      	ldrb	r3, [r2, r3]
 800251c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800251e:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	220f      	movs	r2, #15
 8002524:	4013      	ands	r3, r2
 8002526:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002528:	5cd3      	ldrb	r3, [r2, r3]
 800252a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	23c0      	movs	r3, #192	; 0xc0
 8002530:	025b      	lsls	r3, r3, #9
 8002532:	401a      	ands	r2, r3
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	025b      	lsls	r3, r3, #9
 8002538:	429a      	cmp	r2, r3
 800253a:	d109      	bne.n	8002550 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	481a      	ldr	r0, [pc, #104]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002540:	f7fd fdec 	bl	800011c <__udivsi3>
 8002544:	0003      	movs	r3, r0
 8002546:	001a      	movs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4353      	muls	r3, r2
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	e01a      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	23c0      	movs	r3, #192	; 0xc0
 8002554:	025b      	lsls	r3, r3, #9
 8002556:	401a      	ands	r2, r3
 8002558:	23c0      	movs	r3, #192	; 0xc0
 800255a:	025b      	lsls	r3, r3, #9
 800255c:	429a      	cmp	r2, r3
 800255e:	d109      	bne.n	8002574 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	4814      	ldr	r0, [pc, #80]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002564:	f7fd fdda 	bl	800011c <__udivsi3>
 8002568:	0003      	movs	r3, r0
 800256a:	001a      	movs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4353      	muls	r3, r2
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	e008      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	480c      	ldr	r0, [pc, #48]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002578:	f7fd fdd0 	bl	800011c <__udivsi3>
 800257c:	0003      	movs	r3, r0
 800257e:	001a      	movs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4353      	muls	r3, r2
 8002584:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	613b      	str	r3, [r7, #16]
      break;
 800258a:	e005      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_RCC_GetSysClockFreq+0xe0>)
 800258e:	613b      	str	r3, [r7, #16]
      break;
 8002590:	e002      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002594:	613b      	str	r3, [r7, #16]
      break;
 8002596:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002598:	693b      	ldr	r3, [r7, #16]
}
 800259a:	0018      	movs	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	b006      	add	sp, #24
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	40021000 	.word	0x40021000
 80025a8:	007a1200 	.word	0x007a1200
 80025ac:	08004cc0 	.word	0x08004cc0
 80025b0:	08004cd0 	.word	0x08004cd0
 80025b4:	02dc6c00 	.word	0x02dc6c00

080025b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025bc:	4b02      	ldr	r3, [pc, #8]	; (80025c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	0018      	movs	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	20000000 	.word	0x20000000

080025cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80025d0:	f7ff fff2 	bl	80025b8 <HAL_RCC_GetHCLKFreq>
 80025d4:	0001      	movs	r1, r0
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	2207      	movs	r2, #7
 80025de:	4013      	ands	r3, r2
 80025e0:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025e2:	5cd3      	ldrb	r3, [r2, r3]
 80025e4:	40d9      	lsrs	r1, r3
 80025e6:	000b      	movs	r3, r1
}    
 80025e8:	0018      	movs	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08004cb8 	.word	0x08004cb8

080025f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	025b      	lsls	r3, r3, #9
 8002610:	4013      	ands	r3, r2
 8002612:	d100      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002614:	e08e      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002616:	2017      	movs	r0, #23
 8002618:	183b      	adds	r3, r7, r0
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800261e:	4b6e      	ldr	r3, [pc, #440]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002620:	69da      	ldr	r2, [r3, #28]
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	055b      	lsls	r3, r3, #21
 8002626:	4013      	ands	r3, r2
 8002628:	d110      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800262a:	4b6b      	ldr	r3, [pc, #428]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800262c:	69da      	ldr	r2, [r3, #28]
 800262e:	4b6a      	ldr	r3, [pc, #424]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002630:	2180      	movs	r1, #128	; 0x80
 8002632:	0549      	lsls	r1, r1, #21
 8002634:	430a      	orrs	r2, r1
 8002636:	61da      	str	r2, [r3, #28]
 8002638:	4b67      	ldr	r3, [pc, #412]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800263a:	69da      	ldr	r2, [r3, #28]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	055b      	lsls	r3, r3, #21
 8002640:	4013      	ands	r3, r2
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002646:	183b      	adds	r3, r7, r0
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	4b63      	ldr	r3, [pc, #396]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4013      	ands	r3, r2
 8002656:	d11a      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002658:	4b60      	ldr	r3, [pc, #384]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b5f      	ldr	r3, [pc, #380]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800265e:	2180      	movs	r1, #128	; 0x80
 8002660:	0049      	lsls	r1, r1, #1
 8002662:	430a      	orrs	r2, r1
 8002664:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002666:	f7fe febf 	bl	80013e8 <HAL_GetTick>
 800266a:	0003      	movs	r3, r0
 800266c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266e:	e008      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002670:	f7fe feba 	bl	80013e8 <HAL_GetTick>
 8002674:	0002      	movs	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	; 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e0a6      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002682:	4b56      	ldr	r3, [pc, #344]	; (80027dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4013      	ands	r3, r2
 800268c:	d0f0      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800268e:	4b52      	ldr	r3, [pc, #328]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002690:	6a1a      	ldr	r2, [r3, #32]
 8002692:	23c0      	movs	r3, #192	; 0xc0
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4013      	ands	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d034      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	23c0      	movs	r3, #192	; 0xc0
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4013      	ands	r3, r2
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d02c      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026b0:	4b49      	ldr	r3, [pc, #292]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4a4a      	ldr	r2, [pc, #296]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026ba:	4b47      	ldr	r3, [pc, #284]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026bc:	6a1a      	ldr	r2, [r3, #32]
 80026be:	4b46      	ldr	r3, [pc, #280]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026c0:	2180      	movs	r1, #128	; 0x80
 80026c2:	0249      	lsls	r1, r1, #9
 80026c4:	430a      	orrs	r2, r1
 80026c6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026c8:	4b43      	ldr	r3, [pc, #268]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026ca:	6a1a      	ldr	r2, [r3, #32]
 80026cc:	4b42      	ldr	r3, [pc, #264]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026ce:	4945      	ldr	r1, [pc, #276]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80026d0:	400a      	ands	r2, r1
 80026d2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026d4:	4b40      	ldr	r3, [pc, #256]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	4013      	ands	r3, r2
 80026e0:	d013      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7fe fe81 	bl	80013e8 <HAL_GetTick>
 80026e6:	0003      	movs	r3, r0
 80026e8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ea:	e009      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f7fe fe7c 	bl	80013e8 <HAL_GetTick>
 80026f0:	0002      	movs	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	4a3c      	ldr	r2, [pc, #240]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d901      	bls.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e067      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002700:	4b35      	ldr	r3, [pc, #212]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	2202      	movs	r2, #2
 8002706:	4013      	ands	r3, r2
 8002708:	d0f0      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800270a:	4b33      	ldr	r3, [pc, #204]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4a34      	ldr	r2, [pc, #208]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002710:	4013      	ands	r3, r2
 8002712:	0019      	movs	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	4b2f      	ldr	r3, [pc, #188]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800271a:	430a      	orrs	r2, r1
 800271c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800271e:	2317      	movs	r3, #23
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d105      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002728:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800272a:	69da      	ldr	r2, [r3, #28]
 800272c:	4b2a      	ldr	r3, [pc, #168]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800272e:	492f      	ldr	r1, [pc, #188]	; (80027ec <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002730:	400a      	ands	r2, r1
 8002732:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2201      	movs	r2, #1
 800273a:	4013      	ands	r3, r2
 800273c:	d009      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800273e:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	2203      	movs	r2, #3
 8002744:	4393      	bics	r3, r2
 8002746:	0019      	movs	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800274e:	430a      	orrs	r2, r1
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2202      	movs	r2, #2
 8002758:	4013      	ands	r3, r2
 800275a:	d009      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800275c:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	4a23      	ldr	r2, [pc, #140]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002762:	4013      	ands	r3, r2
 8002764:	0019      	movs	r1, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800276c:	430a      	orrs	r2, r1
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2220      	movs	r2, #32
 8002776:	4013      	ands	r3, r2
 8002778:	d009      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800277a:	4b17      	ldr	r3, [pc, #92]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	2210      	movs	r2, #16
 8002780:	4393      	bics	r3, r2
 8002782:	0019      	movs	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800278a:	430a      	orrs	r2, r1
 800278c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	029b      	lsls	r3, r3, #10
 8002796:	4013      	ands	r3, r2
 8002798:	d009      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800279a:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	2280      	movs	r2, #128	; 0x80
 80027a0:	4393      	bics	r3, r2
 80027a2:	0019      	movs	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027aa:	430a      	orrs	r2, r1
 80027ac:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	2380      	movs	r3, #128	; 0x80
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4013      	ands	r3, r2
 80027b8:	d009      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	2240      	movs	r2, #64	; 0x40
 80027c0:	4393      	bics	r3, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027ca:	430a      	orrs	r2, r1
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b006      	add	sp, #24
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40007000 	.word	0x40007000
 80027e0:	fffffcff 	.word	0xfffffcff
 80027e4:	fffeffff 	.word	0xfffeffff
 80027e8:	00001388 	.word	0x00001388
 80027ec:	efffffff 	.word	0xefffffff
 80027f0:	fffcffff 	.word	0xfffcffff

080027f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e042      	b.n	800288c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	223d      	movs	r2, #61	; 0x3d
 800280a:	5c9b      	ldrb	r3, [r3, r2]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d107      	bne.n	8002822 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	223c      	movs	r2, #60	; 0x3c
 8002816:	2100      	movs	r1, #0
 8002818:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	0018      	movs	r0, r3
 800281e:	f7fe fba1 	bl	8000f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	223d      	movs	r2, #61	; 0x3d
 8002826:	2102      	movs	r1, #2
 8002828:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3304      	adds	r3, #4
 8002832:	0019      	movs	r1, r3
 8002834:	0010      	movs	r0, r2
 8002836:	f000 fb47 	bl	8002ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2246      	movs	r2, #70	; 0x46
 800283e:	2101      	movs	r1, #1
 8002840:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	223e      	movs	r2, #62	; 0x3e
 8002846:	2101      	movs	r1, #1
 8002848:	5499      	strb	r1, [r3, r2]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	223f      	movs	r2, #63	; 0x3f
 800284e:	2101      	movs	r1, #1
 8002850:	5499      	strb	r1, [r3, r2]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2240      	movs	r2, #64	; 0x40
 8002856:	2101      	movs	r1, #1
 8002858:	5499      	strb	r1, [r3, r2]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2241      	movs	r2, #65	; 0x41
 800285e:	2101      	movs	r1, #1
 8002860:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2242      	movs	r2, #66	; 0x42
 8002866:	2101      	movs	r1, #1
 8002868:	5499      	strb	r1, [r3, r2]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2243      	movs	r2, #67	; 0x43
 800286e:	2101      	movs	r1, #1
 8002870:	5499      	strb	r1, [r3, r2]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2244      	movs	r2, #68	; 0x44
 8002876:	2101      	movs	r1, #1
 8002878:	5499      	strb	r1, [r3, r2]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2245      	movs	r2, #69	; 0x45
 800287e:	2101      	movs	r1, #1
 8002880:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	223d      	movs	r2, #61	; 0x3d
 8002886:	2101      	movs	r1, #1
 8002888:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	0018      	movs	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	b002      	add	sp, #8
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e042      	b.n	800292c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	223d      	movs	r2, #61	; 0x3d
 80028aa:	5c9b      	ldrb	r3, [r3, r2]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d107      	bne.n	80028c2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	223c      	movs	r2, #60	; 0x3c
 80028b6:	2100      	movs	r1, #0
 80028b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	0018      	movs	r0, r3
 80028be:	f7fe fabd 	bl	8000e3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	223d      	movs	r2, #61	; 0x3d
 80028c6:	2102      	movs	r1, #2
 80028c8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3304      	adds	r3, #4
 80028d2:	0019      	movs	r1, r3
 80028d4:	0010      	movs	r0, r2
 80028d6:	f000 faf7 	bl	8002ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2246      	movs	r2, #70	; 0x46
 80028de:	2101      	movs	r1, #1
 80028e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	223e      	movs	r2, #62	; 0x3e
 80028e6:	2101      	movs	r1, #1
 80028e8:	5499      	strb	r1, [r3, r2]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	223f      	movs	r2, #63	; 0x3f
 80028ee:	2101      	movs	r1, #1
 80028f0:	5499      	strb	r1, [r3, r2]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2240      	movs	r2, #64	; 0x40
 80028f6:	2101      	movs	r1, #1
 80028f8:	5499      	strb	r1, [r3, r2]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2241      	movs	r2, #65	; 0x41
 80028fe:	2101      	movs	r1, #1
 8002900:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2242      	movs	r2, #66	; 0x42
 8002906:	2101      	movs	r1, #1
 8002908:	5499      	strb	r1, [r3, r2]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2243      	movs	r2, #67	; 0x43
 800290e:	2101      	movs	r1, #1
 8002910:	5499      	strb	r1, [r3, r2]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2244      	movs	r2, #68	; 0x44
 8002916:	2101      	movs	r1, #1
 8002918:	5499      	strb	r1, [r3, r2]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2245      	movs	r2, #69	; 0x45
 800291e:	2101      	movs	r1, #1
 8002920:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	223d      	movs	r2, #61	; 0x3d
 8002926:	2101      	movs	r1, #1
 8002928:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b002      	add	sp, #8
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d108      	bne.n	8002956 <HAL_TIM_PWM_Start+0x22>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	223e      	movs	r2, #62	; 0x3e
 8002948:	5c9b      	ldrb	r3, [r3, r2]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	1e5a      	subs	r2, r3, #1
 8002950:	4193      	sbcs	r3, r2
 8002952:	b2db      	uxtb	r3, r3
 8002954:	e01f      	b.n	8002996 <HAL_TIM_PWM_Start+0x62>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b04      	cmp	r3, #4
 800295a:	d108      	bne.n	800296e <HAL_TIM_PWM_Start+0x3a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	223f      	movs	r2, #63	; 0x3f
 8002960:	5c9b      	ldrb	r3, [r3, r2]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	1e5a      	subs	r2, r3, #1
 8002968:	4193      	sbcs	r3, r2
 800296a:	b2db      	uxtb	r3, r3
 800296c:	e013      	b.n	8002996 <HAL_TIM_PWM_Start+0x62>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d108      	bne.n	8002986 <HAL_TIM_PWM_Start+0x52>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2240      	movs	r2, #64	; 0x40
 8002978:	5c9b      	ldrb	r3, [r3, r2]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	1e5a      	subs	r2, r3, #1
 8002980:	4193      	sbcs	r3, r2
 8002982:	b2db      	uxtb	r3, r3
 8002984:	e007      	b.n	8002996 <HAL_TIM_PWM_Start+0x62>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2241      	movs	r2, #65	; 0x41
 800298a:	5c9b      	ldrb	r3, [r3, r2]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	1e5a      	subs	r2, r3, #1
 8002992:	4193      	sbcs	r3, r2
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e074      	b.n	8002a88 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d104      	bne.n	80029ae <HAL_TIM_PWM_Start+0x7a>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	223e      	movs	r2, #62	; 0x3e
 80029a8:	2102      	movs	r1, #2
 80029aa:	5499      	strb	r1, [r3, r2]
 80029ac:	e013      	b.n	80029d6 <HAL_TIM_PWM_Start+0xa2>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	d104      	bne.n	80029be <HAL_TIM_PWM_Start+0x8a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	223f      	movs	r2, #63	; 0x3f
 80029b8:	2102      	movs	r1, #2
 80029ba:	5499      	strb	r1, [r3, r2]
 80029bc:	e00b      	b.n	80029d6 <HAL_TIM_PWM_Start+0xa2>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d104      	bne.n	80029ce <HAL_TIM_PWM_Start+0x9a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2240      	movs	r2, #64	; 0x40
 80029c8:	2102      	movs	r1, #2
 80029ca:	5499      	strb	r1, [r3, r2]
 80029cc:	e003      	b.n	80029d6 <HAL_TIM_PWM_Start+0xa2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2241      	movs	r2, #65	; 0x41
 80029d2:	2102      	movs	r1, #2
 80029d4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6839      	ldr	r1, [r7, #0]
 80029dc:	2201      	movs	r2, #1
 80029de:	0018      	movs	r0, r3
 80029e0:	f000 fcee 	bl	80033c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a29      	ldr	r2, [pc, #164]	; (8002a90 <HAL_TIM_PWM_Start+0x15c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00e      	beq.n	8002a0c <HAL_TIM_PWM_Start+0xd8>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a28      	ldr	r2, [pc, #160]	; (8002a94 <HAL_TIM_PWM_Start+0x160>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d009      	beq.n	8002a0c <HAL_TIM_PWM_Start+0xd8>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a26      	ldr	r2, [pc, #152]	; (8002a98 <HAL_TIM_PWM_Start+0x164>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d004      	beq.n	8002a0c <HAL_TIM_PWM_Start+0xd8>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a25      	ldr	r2, [pc, #148]	; (8002a9c <HAL_TIM_PWM_Start+0x168>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d101      	bne.n	8002a10 <HAL_TIM_PWM_Start+0xdc>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <HAL_TIM_PWM_Start+0xde>
 8002a10:	2300      	movs	r3, #0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d008      	beq.n	8002a28 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2180      	movs	r1, #128	; 0x80
 8002a22:	0209      	lsls	r1, r1, #8
 8002a24:	430a      	orrs	r2, r1
 8002a26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <HAL_TIM_PWM_Start+0x15c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00f      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x11e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	05db      	lsls	r3, r3, #23
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d009      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x11e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a17      	ldr	r2, [pc, #92]	; (8002aa0 <HAL_TIM_PWM_Start+0x16c>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d004      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x11e>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a11      	ldr	r2, [pc, #68]	; (8002a94 <HAL_TIM_PWM_Start+0x160>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d111      	bne.n	8002a76 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2207      	movs	r2, #7
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b06      	cmp	r3, #6
 8002a62:	d010      	beq.n	8002a86 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2101      	movs	r1, #1
 8002a70:	430a      	orrs	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a74:	e007      	b.n	8002a86 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2101      	movs	r1, #1
 8002a82:	430a      	orrs	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	0018      	movs	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b004      	add	sp, #16
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40012c00 	.word	0x40012c00
 8002a94:	40014000 	.word	0x40014000
 8002a98:	40014400 	.word	0x40014400
 8002a9c:	40014800 	.word	0x40014800
 8002aa0:	40000400 	.word	0x40000400

08002aa4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e090      	b.n	8002bda <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	223d      	movs	r2, #61	; 0x3d
 8002abc:	5c9b      	ldrb	r3, [r3, r2]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d107      	bne.n	8002ad4 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	223c      	movs	r2, #60	; 0x3c
 8002ac8:	2100      	movs	r1, #0
 8002aca:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7fe f9fe 	bl	8000ed0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	223d      	movs	r2, #61	; 0x3d
 8002ad8:	2102      	movs	r1, #2
 8002ada:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	493f      	ldr	r1, [pc, #252]	; (8002be4 <HAL_TIM_Encoder_Init+0x140>)
 8002ae8:	400a      	ands	r2, r1
 8002aea:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3304      	adds	r3, #4
 8002af4:	0019      	movs	r1, r3
 8002af6:	0010      	movs	r0, r2
 8002af8:	f000 f9e6 	bl	8002ec8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4a31      	ldr	r2, [pc, #196]	; (8002be8 <HAL_TIM_Encoder_Init+0x144>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	021b      	lsls	r3, r3, #8
 8002b30:	4313      	orrs	r3, r2
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4a2c      	ldr	r2, [pc, #176]	; (8002bec <HAL_TIM_Encoder_Init+0x148>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4a2b      	ldr	r2, [pc, #172]	; (8002bf0 <HAL_TIM_Encoder_Init+0x14c>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	021b      	lsls	r3, r3, #8
 8002b52:	4313      	orrs	r3, r2
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	011a      	lsls	r2, r3, #4
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	031b      	lsls	r3, r3, #12
 8002b66:	4313      	orrs	r3, r2
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2222      	movs	r2, #34	; 0x22
 8002b72:	4393      	bics	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2288      	movs	r2, #136	; 0x88
 8002b7a:	4393      	bics	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2246      	movs	r2, #70	; 0x46
 8002bac:	2101      	movs	r1, #1
 8002bae:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	223e      	movs	r2, #62	; 0x3e
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	223f      	movs	r2, #63	; 0x3f
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2242      	movs	r2, #66	; 0x42
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2243      	movs	r2, #67	; 0x43
 8002bcc:	2101      	movs	r1, #1
 8002bce:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	223d      	movs	r2, #61	; 0x3d
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	0018      	movs	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b006      	add	sp, #24
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	ffffbff8 	.word	0xffffbff8
 8002be8:	fffffcfc 	.word	0xfffffcfc
 8002bec:	fffff3f3 	.word	0xfffff3f3
 8002bf0:	ffff0f0f 	.word	0xffff0f0f

08002bf4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002bfe:	200f      	movs	r0, #15
 8002c00:	183b      	adds	r3, r7, r0
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	213e      	movs	r1, #62	; 0x3e
 8002c06:	5c52      	ldrb	r2, [r2, r1]
 8002c08:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002c0a:	230e      	movs	r3, #14
 8002c0c:	18fb      	adds	r3, r7, r3
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	213f      	movs	r1, #63	; 0x3f
 8002c12:	5c52      	ldrb	r2, [r2, r1]
 8002c14:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002c16:	240d      	movs	r4, #13
 8002c18:	193b      	adds	r3, r7, r4
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	2142      	movs	r1, #66	; 0x42
 8002c1e:	5c52      	ldrb	r2, [r2, r1]
 8002c20:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002c22:	230c      	movs	r3, #12
 8002c24:	18fb      	adds	r3, r7, r3
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	2143      	movs	r1, #67	; 0x43
 8002c2a:	5c52      	ldrb	r2, [r2, r1]
 8002c2c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d112      	bne.n	8002c5a <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c34:	183b      	adds	r3, r7, r0
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d103      	bne.n	8002c44 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c3c:	193b      	adds	r3, r7, r4
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d001      	beq.n	8002c48 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e075      	b.n	8002d34 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	223e      	movs	r2, #62	; 0x3e
 8002c4c:	2102      	movs	r1, #2
 8002c4e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2242      	movs	r2, #66	; 0x42
 8002c54:	2102      	movs	r1, #2
 8002c56:	5499      	strb	r1, [r3, r2]
 8002c58:	e03d      	b.n	8002cd6 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d114      	bne.n	8002c8a <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c60:	230e      	movs	r3, #14
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d104      	bne.n	8002c74 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c6a:	230c      	movs	r3, #12
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d001      	beq.n	8002c78 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e05d      	b.n	8002d34 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	223f      	movs	r2, #63	; 0x3f
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2243      	movs	r2, #67	; 0x43
 8002c84:	2102      	movs	r1, #2
 8002c86:	5499      	strb	r1, [r3, r2]
 8002c88:	e025      	b.n	8002cd6 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c8a:	230f      	movs	r3, #15
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d10e      	bne.n	8002cb2 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c94:	230e      	movs	r3, #14
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d109      	bne.n	8002cb2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c9e:	230d      	movs	r3, #13
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d104      	bne.n	8002cb2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ca8:	230c      	movs	r3, #12
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d001      	beq.n	8002cb6 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e03e      	b.n	8002d34 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	223e      	movs	r2, #62	; 0x3e
 8002cba:	2102      	movs	r1, #2
 8002cbc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	223f      	movs	r2, #63	; 0x3f
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2242      	movs	r2, #66	; 0x42
 8002cca:	2102      	movs	r1, #2
 8002ccc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2243      	movs	r2, #67	; 0x43
 8002cd2:	2102      	movs	r1, #2
 8002cd4:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_TIM_Encoder_Start+0xf0>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d008      	beq.n	8002cf4 <HAL_TIM_Encoder_Start+0x100>
 8002ce2:	e00f      	b.n	8002d04 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	2100      	movs	r1, #0
 8002cec:	0018      	movs	r0, r3
 8002cee:	f000 fb67 	bl	80033c0 <TIM_CCxChannelCmd>
      break;
 8002cf2:	e016      	b.n	8002d22 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	2104      	movs	r1, #4
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f000 fb5f 	bl	80033c0 <TIM_CCxChannelCmd>
      break;
 8002d02:	e00e      	b.n	8002d22 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f000 fb57 	bl	80033c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2201      	movs	r2, #1
 8002d18:	2104      	movs	r1, #4
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f000 fb50 	bl	80033c0 <TIM_CCxChannelCmd>
      break;
 8002d20:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	0018      	movs	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b005      	add	sp, #20
 8002d3a:	bd90      	pop	{r4, r7, pc}

08002d3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d48:	2317      	movs	r3, #23
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	223c      	movs	r2, #60	; 0x3c
 8002d54:	5c9b      	ldrb	r3, [r3, r2]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e0ad      	b.n	8002eba <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	223c      	movs	r2, #60	; 0x3c
 8002d62:	2101      	movs	r1, #1
 8002d64:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b0c      	cmp	r3, #12
 8002d6a:	d100      	bne.n	8002d6e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002d6c:	e076      	b.n	8002e5c <HAL_TIM_PWM_ConfigChannel+0x120>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b0c      	cmp	r3, #12
 8002d72:	d900      	bls.n	8002d76 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002d74:	e095      	b.n	8002ea2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d04e      	beq.n	8002e1a <HAL_TIM_PWM_ConfigChannel+0xde>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d900      	bls.n	8002d84 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002d82:	e08e      	b.n	8002ea2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d021      	beq.n	8002dd4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002d90:	e087      	b.n	8002ea2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	0011      	movs	r1, r2
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f000 f914 	bl	8002fc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2108      	movs	r1, #8
 8002dac:	430a      	orrs	r2, r1
 8002dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2104      	movs	r1, #4
 8002dbc:	438a      	bics	r2, r1
 8002dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6999      	ldr	r1, [r3, #24]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	619a      	str	r2, [r3, #24]
      break;
 8002dd2:	e06b      	b.n	8002eac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	0011      	movs	r1, r2
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f000 f97b 	bl	80030d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2180      	movs	r1, #128	; 0x80
 8002dee:	0109      	lsls	r1, r1, #4
 8002df0:	430a      	orrs	r2, r1
 8002df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4931      	ldr	r1, [pc, #196]	; (8002ec4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002e00:	400a      	ands	r2, r1
 8002e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6999      	ldr	r1, [r3, #24]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	021a      	lsls	r2, r3, #8
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	619a      	str	r2, [r3, #24]
      break;
 8002e18:	e048      	b.n	8002eac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	0011      	movs	r1, r2
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 f9dc 	bl	80031e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	69da      	ldr	r2, [r3, #28]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2108      	movs	r1, #8
 8002e34:	430a      	orrs	r2, r1
 8002e36:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2104      	movs	r1, #4
 8002e44:	438a      	bics	r2, r1
 8002e46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	69d9      	ldr	r1, [r3, #28]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	61da      	str	r2, [r3, #28]
      break;
 8002e5a:	e027      	b.n	8002eac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	0011      	movs	r1, r2
 8002e64:	0018      	movs	r0, r3
 8002e66:	f000 fa41 	bl	80032ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	69da      	ldr	r2, [r3, #28]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2180      	movs	r1, #128	; 0x80
 8002e76:	0109      	lsls	r1, r1, #4
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	490f      	ldr	r1, [pc, #60]	; (8002ec4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002e88:	400a      	ands	r2, r1
 8002e8a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	69d9      	ldr	r1, [r3, #28]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	021a      	lsls	r2, r3, #8
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	61da      	str	r2, [r3, #28]
      break;
 8002ea0:	e004      	b.n	8002eac <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002ea2:	2317      	movs	r3, #23
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
      break;
 8002eaa:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	223c      	movs	r2, #60	; 0x3c
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	5499      	strb	r1, [r3, r2]

  return status;
 8002eb4:	2317      	movs	r3, #23
 8002eb6:	18fb      	adds	r3, r7, r3
 8002eb8:	781b      	ldrb	r3, [r3, #0]
}
 8002eba:	0018      	movs	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b006      	add	sp, #24
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	fffffbff 	.word	0xfffffbff

08002ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a34      	ldr	r2, [pc, #208]	; (8002fac <TIM_Base_SetConfig+0xe4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d008      	beq.n	8002ef2 <TIM_Base_SetConfig+0x2a>
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	05db      	lsls	r3, r3, #23
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d003      	beq.n	8002ef2 <TIM_Base_SetConfig+0x2a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a30      	ldr	r2, [pc, #192]	; (8002fb0 <TIM_Base_SetConfig+0xe8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d108      	bne.n	8002f04 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2270      	movs	r2, #112	; 0x70
 8002ef6:	4393      	bics	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a29      	ldr	r2, [pc, #164]	; (8002fac <TIM_Base_SetConfig+0xe4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d018      	beq.n	8002f3e <TIM_Base_SetConfig+0x76>
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	05db      	lsls	r3, r3, #23
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d013      	beq.n	8002f3e <TIM_Base_SetConfig+0x76>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a25      	ldr	r2, [pc, #148]	; (8002fb0 <TIM_Base_SetConfig+0xe8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00f      	beq.n	8002f3e <TIM_Base_SetConfig+0x76>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a24      	ldr	r2, [pc, #144]	; (8002fb4 <TIM_Base_SetConfig+0xec>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00b      	beq.n	8002f3e <TIM_Base_SetConfig+0x76>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a23      	ldr	r2, [pc, #140]	; (8002fb8 <TIM_Base_SetConfig+0xf0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d007      	beq.n	8002f3e <TIM_Base_SetConfig+0x76>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <TIM_Base_SetConfig+0xf4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d003      	beq.n	8002f3e <TIM_Base_SetConfig+0x76>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a21      	ldr	r2, [pc, #132]	; (8002fc0 <TIM_Base_SetConfig+0xf8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d108      	bne.n	8002f50 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4a20      	ldr	r2, [pc, #128]	; (8002fc4 <TIM_Base_SetConfig+0xfc>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2280      	movs	r2, #128	; 0x80
 8002f54:	4393      	bics	r3, r2
 8002f56:	001a      	movs	r2, r3
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a0c      	ldr	r2, [pc, #48]	; (8002fac <TIM_Base_SetConfig+0xe4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00b      	beq.n	8002f96 <TIM_Base_SetConfig+0xce>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a0d      	ldr	r2, [pc, #52]	; (8002fb8 <TIM_Base_SetConfig+0xf0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d007      	beq.n	8002f96 <TIM_Base_SetConfig+0xce>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a0c      	ldr	r2, [pc, #48]	; (8002fbc <TIM_Base_SetConfig+0xf4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_Base_SetConfig+0xce>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a0b      	ldr	r2, [pc, #44]	; (8002fc0 <TIM_Base_SetConfig+0xf8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d103      	bne.n	8002f9e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	615a      	str	r2, [r3, #20]
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b004      	add	sp, #16
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40012c00 	.word	0x40012c00
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	40002000 	.word	0x40002000
 8002fb8:	40014000 	.word	0x40014000
 8002fbc:	40014400 	.word	0x40014400
 8002fc0:	40014800 	.word	0x40014800
 8002fc4:	fffffcff 	.word	0xfffffcff

08002fc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	4393      	bics	r3, r2
 8002fda:	001a      	movs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2270      	movs	r2, #112	; 0x70
 8002ff6:	4393      	bics	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	4393      	bics	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2202      	movs	r2, #2
 8003010:	4393      	bics	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	4313      	orrs	r3, r2
 800301c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a27      	ldr	r2, [pc, #156]	; (80030c0 <TIM_OC1_SetConfig+0xf8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00b      	beq.n	800303e <TIM_OC1_SetConfig+0x76>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a26      	ldr	r2, [pc, #152]	; (80030c4 <TIM_OC1_SetConfig+0xfc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d007      	beq.n	800303e <TIM_OC1_SetConfig+0x76>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a25      	ldr	r2, [pc, #148]	; (80030c8 <TIM_OC1_SetConfig+0x100>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d003      	beq.n	800303e <TIM_OC1_SetConfig+0x76>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a24      	ldr	r2, [pc, #144]	; (80030cc <TIM_OC1_SetConfig+0x104>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d10c      	bne.n	8003058 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2208      	movs	r2, #8
 8003042:	4393      	bics	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4313      	orrs	r3, r2
 800304e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2204      	movs	r2, #4
 8003054:	4393      	bics	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <TIM_OC1_SetConfig+0xf8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00b      	beq.n	8003078 <TIM_OC1_SetConfig+0xb0>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a18      	ldr	r2, [pc, #96]	; (80030c4 <TIM_OC1_SetConfig+0xfc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d007      	beq.n	8003078 <TIM_OC1_SetConfig+0xb0>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <TIM_OC1_SetConfig+0x100>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d003      	beq.n	8003078 <TIM_OC1_SetConfig+0xb0>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a16      	ldr	r2, [pc, #88]	; (80030cc <TIM_OC1_SetConfig+0x104>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d111      	bne.n	800309c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4a15      	ldr	r2, [pc, #84]	; (80030d0 <TIM_OC1_SetConfig+0x108>)
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4a14      	ldr	r2, [pc, #80]	; (80030d4 <TIM_OC1_SetConfig+0x10c>)
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	621a      	str	r2, [r3, #32]
}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b006      	add	sp, #24
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	40012c00 	.word	0x40012c00
 80030c4:	40014000 	.word	0x40014000
 80030c8:	40014400 	.word	0x40014400
 80030cc:	40014800 	.word	0x40014800
 80030d0:	fffffeff 	.word	0xfffffeff
 80030d4:	fffffdff 	.word	0xfffffdff

080030d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	2210      	movs	r2, #16
 80030e8:	4393      	bics	r3, r2
 80030ea:	001a      	movs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4a2e      	ldr	r2, [pc, #184]	; (80031c0 <TIM_OC2_SetConfig+0xe8>)
 8003106:	4013      	ands	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4a2d      	ldr	r2, [pc, #180]	; (80031c4 <TIM_OC2_SetConfig+0xec>)
 800310e:	4013      	ands	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2220      	movs	r2, #32
 8003122:	4393      	bics	r3, r2
 8003124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a24      	ldr	r2, [pc, #144]	; (80031c8 <TIM_OC2_SetConfig+0xf0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d10d      	bne.n	8003156 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2280      	movs	r2, #128	; 0x80
 800313e:	4393      	bics	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	4313      	orrs	r3, r2
 800314c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2240      	movs	r2, #64	; 0x40
 8003152:	4393      	bics	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a1b      	ldr	r2, [pc, #108]	; (80031c8 <TIM_OC2_SetConfig+0xf0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00b      	beq.n	8003176 <TIM_OC2_SetConfig+0x9e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a1a      	ldr	r2, [pc, #104]	; (80031cc <TIM_OC2_SetConfig+0xf4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d007      	beq.n	8003176 <TIM_OC2_SetConfig+0x9e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <TIM_OC2_SetConfig+0xf8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d003      	beq.n	8003176 <TIM_OC2_SetConfig+0x9e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a18      	ldr	r2, [pc, #96]	; (80031d4 <TIM_OC2_SetConfig+0xfc>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d113      	bne.n	800319e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4a17      	ldr	r2, [pc, #92]	; (80031d8 <TIM_OC2_SetConfig+0x100>)
 800317a:	4013      	ands	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4a16      	ldr	r2, [pc, #88]	; (80031dc <TIM_OC2_SetConfig+0x104>)
 8003182:	4013      	ands	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	621a      	str	r2, [r3, #32]
}
 80031b8:	46c0      	nop			; (mov r8, r8)
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b006      	add	sp, #24
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	ffff8fff 	.word	0xffff8fff
 80031c4:	fffffcff 	.word	0xfffffcff
 80031c8:	40012c00 	.word	0x40012c00
 80031cc:	40014000 	.word	0x40014000
 80031d0:	40014400 	.word	0x40014400
 80031d4:	40014800 	.word	0x40014800
 80031d8:	fffffbff 	.word	0xfffffbff
 80031dc:	fffff7ff 	.word	0xfffff7ff

080031e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4a35      	ldr	r2, [pc, #212]	; (80032c4 <TIM_OC3_SetConfig+0xe4>)
 80031f0:	401a      	ands	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2270      	movs	r2, #112	; 0x70
 800320c:	4393      	bics	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2203      	movs	r2, #3
 8003214:	4393      	bics	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	4a28      	ldr	r2, [pc, #160]	; (80032c8 <TIM_OC3_SetConfig+0xe8>)
 8003226:	4013      	ands	r3, r2
 8003228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a24      	ldr	r2, [pc, #144]	; (80032cc <TIM_OC3_SetConfig+0xec>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d10d      	bne.n	800325a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	4a23      	ldr	r2, [pc, #140]	; (80032d0 <TIM_OC3_SetConfig+0xf0>)
 8003242:	4013      	ands	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	4a1f      	ldr	r2, [pc, #124]	; (80032d4 <TIM_OC3_SetConfig+0xf4>)
 8003256:	4013      	ands	r3, r2
 8003258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a1b      	ldr	r2, [pc, #108]	; (80032cc <TIM_OC3_SetConfig+0xec>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00b      	beq.n	800327a <TIM_OC3_SetConfig+0x9a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a1c      	ldr	r2, [pc, #112]	; (80032d8 <TIM_OC3_SetConfig+0xf8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d007      	beq.n	800327a <TIM_OC3_SetConfig+0x9a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a1b      	ldr	r2, [pc, #108]	; (80032dc <TIM_OC3_SetConfig+0xfc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d003      	beq.n	800327a <TIM_OC3_SetConfig+0x9a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a1a      	ldr	r2, [pc, #104]	; (80032e0 <TIM_OC3_SetConfig+0x100>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d113      	bne.n	80032a2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4a19      	ldr	r2, [pc, #100]	; (80032e4 <TIM_OC3_SetConfig+0x104>)
 800327e:	4013      	ands	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4a18      	ldr	r2, [pc, #96]	; (80032e8 <TIM_OC3_SetConfig+0x108>)
 8003286:	4013      	ands	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	621a      	str	r2, [r3, #32]
}
 80032bc:	46c0      	nop			; (mov r8, r8)
 80032be:	46bd      	mov	sp, r7
 80032c0:	b006      	add	sp, #24
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	fffffeff 	.word	0xfffffeff
 80032c8:	fffffdff 	.word	0xfffffdff
 80032cc:	40012c00 	.word	0x40012c00
 80032d0:	fffff7ff 	.word	0xfffff7ff
 80032d4:	fffffbff 	.word	0xfffffbff
 80032d8:	40014000 	.word	0x40014000
 80032dc:	40014400 	.word	0x40014400
 80032e0:	40014800 	.word	0x40014800
 80032e4:	ffffefff 	.word	0xffffefff
 80032e8:	ffffdfff 	.word	0xffffdfff

080032ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	4a28      	ldr	r2, [pc, #160]	; (800339c <TIM_OC4_SetConfig+0xb0>)
 80032fc:	401a      	ands	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4a22      	ldr	r2, [pc, #136]	; (80033a0 <TIM_OC4_SetConfig+0xb4>)
 8003318:	4013      	ands	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4a21      	ldr	r2, [pc, #132]	; (80033a4 <TIM_OC4_SetConfig+0xb8>)
 8003320:	4013      	ands	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	021b      	lsls	r3, r3, #8
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4a1d      	ldr	r2, [pc, #116]	; (80033a8 <TIM_OC4_SetConfig+0xbc>)
 8003334:	4013      	ands	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	031b      	lsls	r3, r3, #12
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a19      	ldr	r2, [pc, #100]	; (80033ac <TIM_OC4_SetConfig+0xc0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d00b      	beq.n	8003364 <TIM_OC4_SetConfig+0x78>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <TIM_OC4_SetConfig+0xc4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d007      	beq.n	8003364 <TIM_OC4_SetConfig+0x78>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <TIM_OC4_SetConfig+0xc8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d003      	beq.n	8003364 <TIM_OC4_SetConfig+0x78>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a16      	ldr	r2, [pc, #88]	; (80033b8 <TIM_OC4_SetConfig+0xcc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d109      	bne.n	8003378 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	4a15      	ldr	r2, [pc, #84]	; (80033bc <TIM_OC4_SetConfig+0xd0>)
 8003368:	4013      	ands	r3, r2
 800336a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	019b      	lsls	r3, r3, #6
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	621a      	str	r2, [r3, #32]
}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	46bd      	mov	sp, r7
 8003396:	b006      	add	sp, #24
 8003398:	bd80      	pop	{r7, pc}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	ffffefff 	.word	0xffffefff
 80033a0:	ffff8fff 	.word	0xffff8fff
 80033a4:	fffffcff 	.word	0xfffffcff
 80033a8:	ffffdfff 	.word	0xffffdfff
 80033ac:	40012c00 	.word	0x40012c00
 80033b0:	40014000 	.word	0x40014000
 80033b4:	40014400 	.word	0x40014400
 80033b8:	40014800 	.word	0x40014800
 80033bc:	ffffbfff 	.word	0xffffbfff

080033c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	221f      	movs	r2, #31
 80033d0:	4013      	ands	r3, r2
 80033d2:	2201      	movs	r2, #1
 80033d4:	409a      	lsls	r2, r3
 80033d6:	0013      	movs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	43d2      	mvns	r2, r2
 80033e2:	401a      	ands	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a1a      	ldr	r2, [r3, #32]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	211f      	movs	r1, #31
 80033f0:	400b      	ands	r3, r1
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4099      	lsls	r1, r3
 80033f6:	000b      	movs	r3, r1
 80033f8:	431a      	orrs	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	621a      	str	r2, [r3, #32]
}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	46bd      	mov	sp, r7
 8003402:	b006      	add	sp, #24
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	223c      	movs	r2, #60	; 0x3c
 8003416:	5c9b      	ldrb	r3, [r3, r2]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800341c:	2302      	movs	r3, #2
 800341e:	e047      	b.n	80034b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	223c      	movs	r2, #60	; 0x3c
 8003424:	2101      	movs	r1, #1
 8003426:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	223d      	movs	r2, #61	; 0x3d
 800342c:	2102      	movs	r1, #2
 800342e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2270      	movs	r2, #112	; 0x70
 8003444:	4393      	bics	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a16      	ldr	r2, [pc, #88]	; (80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00f      	beq.n	8003484 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	2380      	movs	r3, #128	; 0x80
 800346a:	05db      	lsls	r3, r3, #23
 800346c:	429a      	cmp	r2, r3
 800346e:	d009      	beq.n	8003484 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a11      	ldr	r2, [pc, #68]	; (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a10      	ldr	r2, [pc, #64]	; (80034c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d10c      	bne.n	800349e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2280      	movs	r2, #128	; 0x80
 8003488:	4393      	bics	r3, r2
 800348a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	4313      	orrs	r3, r2
 8003494:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	223d      	movs	r2, #61	; 0x3d
 80034a2:	2101      	movs	r1, #1
 80034a4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	223c      	movs	r2, #60	; 0x3c
 80034aa:	2100      	movs	r1, #0
 80034ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b004      	add	sp, #16
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40012c00 	.word	0x40012c00
 80034bc:	40000400 	.word	0x40000400
 80034c0:	40014000 	.word	0x40014000

080034c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	223c      	movs	r2, #60	; 0x3c
 80034d6:	5c9b      	ldrb	r3, [r3, r2]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80034dc:	2302      	movs	r3, #2
 80034de:	e03e      	b.n	800355e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	223c      	movs	r2, #60	; 0x3c
 80034e4:	2101      	movs	r1, #1
 80034e6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	22ff      	movs	r2, #255	; 0xff
 80034ec:	4393      	bics	r3, r2
 80034ee:	001a      	movs	r2, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4a1b      	ldr	r2, [pc, #108]	; (8003568 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80034fc:	401a      	ands	r2, r3
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a18      	ldr	r2, [pc, #96]	; (800356c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800350a:	401a      	ands	r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	4313      	orrs	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a16      	ldr	r2, [pc, #88]	; (8003570 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003518:	401a      	ands	r2, r3
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4a13      	ldr	r2, [pc, #76]	; (8003574 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003526:	401a      	ands	r2, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4a11      	ldr	r2, [pc, #68]	; (8003578 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003534:	401a      	ands	r2, r3
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4a0e      	ldr	r2, [pc, #56]	; (800357c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003542:	401a      	ands	r2, r3
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	223c      	movs	r2, #60	; 0x3c
 8003558:	2100      	movs	r1, #0
 800355a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	0018      	movs	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	b004      	add	sp, #16
 8003564:	bd80      	pop	{r7, pc}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	fffffcff 	.word	0xfffffcff
 800356c:	fffffbff 	.word	0xfffffbff
 8003570:	fffff7ff 	.word	0xfffff7ff
 8003574:	ffffefff 	.word	0xffffefff
 8003578:	ffffdfff 	.word	0xffffdfff
 800357c:	ffffbfff 	.word	0xffffbfff

08003580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e044      	b.n	800361c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d107      	bne.n	80035aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2278      	movs	r2, #120	; 0x78
 800359e:	2100      	movs	r1, #0
 80035a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7fd fdc3 	bl	8001130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2224      	movs	r2, #36	; 0x24
 80035ae:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2101      	movs	r1, #1
 80035bc:	438a      	bics	r2, r1
 80035be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	0018      	movs	r0, r3
 80035c4:	f000 f94a 	bl	800385c <UART_SetConfig>
 80035c8:	0003      	movs	r3, r0
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e024      	b.n	800361c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	0018      	movs	r0, r3
 80035de:	f000 fac5 	bl	8003b6c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	490d      	ldr	r1, [pc, #52]	; (8003624 <HAL_UART_Init+0xa4>)
 80035ee:	400a      	ands	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	212a      	movs	r1, #42	; 0x2a
 80035fe:	438a      	bics	r2, r1
 8003600:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2101      	movs	r1, #1
 800360e:	430a      	orrs	r2, r1
 8003610:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	0018      	movs	r0, r3
 8003616:	f000 fb5d 	bl	8003cd4 <UART_CheckIdleState>
 800361a:	0003      	movs	r3, r0
}
 800361c:	0018      	movs	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	b002      	add	sp, #8
 8003622:	bd80      	pop	{r7, pc}
 8003624:	ffffb7ff 	.word	0xffffb7ff

08003628 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af02      	add	r7, sp, #8
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	1dbb      	adds	r3, r7, #6
 8003636:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800363c:	2b20      	cmp	r3, #32
 800363e:	d000      	beq.n	8003642 <HAL_UART_Transmit+0x1a>
 8003640:	e08d      	b.n	800375e <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_UART_Transmit+0x28>
 8003648:	1dbb      	adds	r3, r7, #6
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e085      	b.n	8003760 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	015b      	lsls	r3, r3, #5
 800365c:	429a      	cmp	r2, r3
 800365e:	d109      	bne.n	8003674 <HAL_UART_Transmit+0x4c>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d105      	bne.n	8003674 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2201      	movs	r2, #1
 800366c:	4013      	ands	r3, r2
 800366e:	d001      	beq.n	8003674 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e075      	b.n	8003760 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2284      	movs	r2, #132	; 0x84
 8003678:	2100      	movs	r1, #0
 800367a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2221      	movs	r2, #33	; 0x21
 8003680:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003682:	f7fd feb1 	bl	80013e8 <HAL_GetTick>
 8003686:	0003      	movs	r3, r0
 8003688:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1dba      	adds	r2, r7, #6
 800368e:	2150      	movs	r1, #80	; 0x50
 8003690:	8812      	ldrh	r2, [r2, #0]
 8003692:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1dba      	adds	r2, r7, #6
 8003698:	2152      	movs	r1, #82	; 0x52
 800369a:	8812      	ldrh	r2, [r2, #0]
 800369c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	015b      	lsls	r3, r3, #5
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d108      	bne.n	80036bc <HAL_UART_Transmit+0x94>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d104      	bne.n	80036bc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	e003      	b.n	80036c4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036c4:	e030      	b.n	8003728 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	0013      	movs	r3, r2
 80036d0:	2200      	movs	r2, #0
 80036d2:	2180      	movs	r1, #128	; 0x80
 80036d4:	f000 fba6 	bl	8003e24 <UART_WaitOnFlagUntilTimeout>
 80036d8:	1e03      	subs	r3, r0, #0
 80036da:	d004      	beq.n	80036e6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e03c      	b.n	8003760 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10b      	bne.n	8003704 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	881a      	ldrh	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	05d2      	lsls	r2, r2, #23
 80036f6:	0dd2      	lsrs	r2, r2, #23
 80036f8:	b292      	uxth	r2, r2
 80036fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	3302      	adds	r3, #2
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	e008      	b.n	8003716 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	b292      	uxth	r2, r2
 800370e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	3301      	adds	r3, #1
 8003714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2252      	movs	r2, #82	; 0x52
 800371a:	5a9b      	ldrh	r3, [r3, r2]
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b299      	uxth	r1, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2252      	movs	r2, #82	; 0x52
 8003726:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2252      	movs	r2, #82	; 0x52
 800372c:	5a9b      	ldrh	r3, [r3, r2]
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1c8      	bne.n	80036c6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	0013      	movs	r3, r2
 800373e:	2200      	movs	r2, #0
 8003740:	2140      	movs	r1, #64	; 0x40
 8003742:	f000 fb6f 	bl	8003e24 <UART_WaitOnFlagUntilTimeout>
 8003746:	1e03      	subs	r3, r0, #0
 8003748:	d004      	beq.n	8003754 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e005      	b.n	8003760 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800375e:	2302      	movs	r3, #2
  }
}
 8003760:	0018      	movs	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	b008      	add	sp, #32
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	1dbb      	adds	r3, r7, #6
 8003774:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2280      	movs	r2, #128	; 0x80
 800377a:	589b      	ldr	r3, [r3, r2]
 800377c:	2b20      	cmp	r3, #32
 800377e:	d145      	bne.n	800380c <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_UART_Receive_DMA+0x26>
 8003786:	1dbb      	adds	r3, r7, #6
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e03d      	b.n	800380e <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	2380      	movs	r3, #128	; 0x80
 8003798:	015b      	lsls	r3, r3, #5
 800379a:	429a      	cmp	r2, r3
 800379c:	d109      	bne.n	80037b2 <HAL_UART_Receive_DMA+0x4a>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d105      	bne.n	80037b2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2201      	movs	r2, #1
 80037aa:	4013      	ands	r3, r2
 80037ac:	d001      	beq.n	80037b2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e02d      	b.n	800380e <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	041b      	lsls	r3, r3, #16
 80037c2:	4013      	ands	r3, r2
 80037c4:	d019      	beq.n	80037fa <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c6:	f3ef 8310 	mrs	r3, PRIMASK
 80037ca:	613b      	str	r3, [r7, #16]
  return(result);
 80037cc:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037ce:	61fb      	str	r3, [r7, #28]
 80037d0:	2301      	movs	r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f383 8810 	msr	PRIMASK, r3
}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2180      	movs	r1, #128	; 0x80
 80037e8:	04c9      	lsls	r1, r1, #19
 80037ea:	430a      	orrs	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	f383 8810 	msr	PRIMASK, r3
}
 80037f8:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80037fa:	1dbb      	adds	r3, r7, #6
 80037fc:	881a      	ldrh	r2, [r3, #0]
 80037fe:	68b9      	ldr	r1, [r7, #8]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	0018      	movs	r0, r3
 8003804:	f000 fb78 	bl	8003ef8 <UART_Start_Receive_DMA>
 8003808:	0003      	movs	r3, r0
 800380a:	e000      	b.n	800380e <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
  }
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b008      	add	sp, #32
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b002      	add	sp, #8
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	46bd      	mov	sp, r7
 8003832:	b002      	add	sp, #8
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	b002      	add	sp, #8
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	000a      	movs	r2, r1
 8003850:	1cbb      	adds	r3, r7, #2
 8003852:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	b002      	add	sp, #8
 800385a:	bd80      	pop	{r7, pc}

0800385c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003864:	231e      	movs	r3, #30
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4aaf      	ldr	r2, [pc, #700]	; (8003b48 <UART_SetConfig+0x2ec>)
 800388c:	4013      	ands	r3, r2
 800388e:	0019      	movs	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	430a      	orrs	r2, r1
 8003898:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	4aaa      	ldr	r2, [pc, #680]	; (8003b4c <UART_SetConfig+0x2f0>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	0019      	movs	r1, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	4313      	orrs	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4aa1      	ldr	r2, [pc, #644]	; (8003b50 <UART_SetConfig+0x2f4>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	0019      	movs	r1, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a9d      	ldr	r2, [pc, #628]	; (8003b54 <UART_SetConfig+0x2f8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d127      	bne.n	8003932 <UART_SetConfig+0xd6>
 80038e2:	4b9d      	ldr	r3, [pc, #628]	; (8003b58 <UART_SetConfig+0x2fc>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	2203      	movs	r2, #3
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d00d      	beq.n	800390a <UART_SetConfig+0xae>
 80038ee:	d81b      	bhi.n	8003928 <UART_SetConfig+0xcc>
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d014      	beq.n	800391e <UART_SetConfig+0xc2>
 80038f4:	d818      	bhi.n	8003928 <UART_SetConfig+0xcc>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <UART_SetConfig+0xa4>
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d00a      	beq.n	8003914 <UART_SetConfig+0xb8>
 80038fe:	e013      	b.n	8003928 <UART_SetConfig+0xcc>
 8003900:	231f      	movs	r3, #31
 8003902:	18fb      	adds	r3, r7, r3
 8003904:	2200      	movs	r2, #0
 8003906:	701a      	strb	r2, [r3, #0]
 8003908:	e065      	b.n	80039d6 <UART_SetConfig+0x17a>
 800390a:	231f      	movs	r3, #31
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	2202      	movs	r2, #2
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	e060      	b.n	80039d6 <UART_SetConfig+0x17a>
 8003914:	231f      	movs	r3, #31
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	2204      	movs	r2, #4
 800391a:	701a      	strb	r2, [r3, #0]
 800391c:	e05b      	b.n	80039d6 <UART_SetConfig+0x17a>
 800391e:	231f      	movs	r3, #31
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	2208      	movs	r2, #8
 8003924:	701a      	strb	r2, [r3, #0]
 8003926:	e056      	b.n	80039d6 <UART_SetConfig+0x17a>
 8003928:	231f      	movs	r3, #31
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	2210      	movs	r2, #16
 800392e:	701a      	strb	r2, [r3, #0]
 8003930:	e051      	b.n	80039d6 <UART_SetConfig+0x17a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a89      	ldr	r2, [pc, #548]	; (8003b5c <UART_SetConfig+0x300>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d134      	bne.n	80039a6 <UART_SetConfig+0x14a>
 800393c:	4b86      	ldr	r3, [pc, #536]	; (8003b58 <UART_SetConfig+0x2fc>)
 800393e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003940:	23c0      	movs	r3, #192	; 0xc0
 8003942:	029b      	lsls	r3, r3, #10
 8003944:	4013      	ands	r3, r2
 8003946:	22c0      	movs	r2, #192	; 0xc0
 8003948:	0292      	lsls	r2, r2, #10
 800394a:	4293      	cmp	r3, r2
 800394c:	d017      	beq.n	800397e <UART_SetConfig+0x122>
 800394e:	22c0      	movs	r2, #192	; 0xc0
 8003950:	0292      	lsls	r2, r2, #10
 8003952:	4293      	cmp	r3, r2
 8003954:	d822      	bhi.n	800399c <UART_SetConfig+0x140>
 8003956:	2280      	movs	r2, #128	; 0x80
 8003958:	0292      	lsls	r2, r2, #10
 800395a:	4293      	cmp	r3, r2
 800395c:	d019      	beq.n	8003992 <UART_SetConfig+0x136>
 800395e:	2280      	movs	r2, #128	; 0x80
 8003960:	0292      	lsls	r2, r2, #10
 8003962:	4293      	cmp	r3, r2
 8003964:	d81a      	bhi.n	800399c <UART_SetConfig+0x140>
 8003966:	2b00      	cmp	r3, #0
 8003968:	d004      	beq.n	8003974 <UART_SetConfig+0x118>
 800396a:	2280      	movs	r2, #128	; 0x80
 800396c:	0252      	lsls	r2, r2, #9
 800396e:	4293      	cmp	r3, r2
 8003970:	d00a      	beq.n	8003988 <UART_SetConfig+0x12c>
 8003972:	e013      	b.n	800399c <UART_SetConfig+0x140>
 8003974:	231f      	movs	r3, #31
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	2200      	movs	r2, #0
 800397a:	701a      	strb	r2, [r3, #0]
 800397c:	e02b      	b.n	80039d6 <UART_SetConfig+0x17a>
 800397e:	231f      	movs	r3, #31
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	2202      	movs	r2, #2
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	e026      	b.n	80039d6 <UART_SetConfig+0x17a>
 8003988:	231f      	movs	r3, #31
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	2204      	movs	r2, #4
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	e021      	b.n	80039d6 <UART_SetConfig+0x17a>
 8003992:	231f      	movs	r3, #31
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	2208      	movs	r2, #8
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	e01c      	b.n	80039d6 <UART_SetConfig+0x17a>
 800399c:	231f      	movs	r3, #31
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	2210      	movs	r2, #16
 80039a2:	701a      	strb	r2, [r3, #0]
 80039a4:	e017      	b.n	80039d6 <UART_SetConfig+0x17a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a6d      	ldr	r2, [pc, #436]	; (8003b60 <UART_SetConfig+0x304>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d104      	bne.n	80039ba <UART_SetConfig+0x15e>
 80039b0:	231f      	movs	r3, #31
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	2200      	movs	r2, #0
 80039b6:	701a      	strb	r2, [r3, #0]
 80039b8:	e00d      	b.n	80039d6 <UART_SetConfig+0x17a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a69      	ldr	r2, [pc, #420]	; (8003b64 <UART_SetConfig+0x308>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d104      	bne.n	80039ce <UART_SetConfig+0x172>
 80039c4:	231f      	movs	r3, #31
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
 80039cc:	e003      	b.n	80039d6 <UART_SetConfig+0x17a>
 80039ce:	231f      	movs	r3, #31
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	2210      	movs	r2, #16
 80039d4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	2380      	movs	r3, #128	; 0x80
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	429a      	cmp	r2, r3
 80039e0:	d15c      	bne.n	8003a9c <UART_SetConfig+0x240>
  {
    switch (clocksource)
 80039e2:	231f      	movs	r3, #31
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d015      	beq.n	8003a18 <UART_SetConfig+0x1bc>
 80039ec:	dc18      	bgt.n	8003a20 <UART_SetConfig+0x1c4>
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d00d      	beq.n	8003a0e <UART_SetConfig+0x1b2>
 80039f2:	dc15      	bgt.n	8003a20 <UART_SetConfig+0x1c4>
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <UART_SetConfig+0x1a2>
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d005      	beq.n	8003a08 <UART_SetConfig+0x1ac>
 80039fc:	e010      	b.n	8003a20 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039fe:	f7fe fde5 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8003a02:	0003      	movs	r3, r0
 8003a04:	61bb      	str	r3, [r7, #24]
        break;
 8003a06:	e012      	b.n	8003a2e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a08:	4b57      	ldr	r3, [pc, #348]	; (8003b68 <UART_SetConfig+0x30c>)
 8003a0a:	61bb      	str	r3, [r7, #24]
        break;
 8003a0c:	e00f      	b.n	8003a2e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a0e:	f7fe fd61 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8003a12:	0003      	movs	r3, r0
 8003a14:	61bb      	str	r3, [r7, #24]
        break;
 8003a16:	e00a      	b.n	8003a2e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	61bb      	str	r3, [r7, #24]
        break;
 8003a1e:	e006      	b.n	8003a2e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a24:	231e      	movs	r3, #30
 8003a26:	18fb      	adds	r3, r7, r3
 8003a28:	2201      	movs	r2, #1
 8003a2a:	701a      	strb	r2, [r3, #0]
        break;
 8003a2c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d100      	bne.n	8003a36 <UART_SetConfig+0x1da>
 8003a34:	e07a      	b.n	8003b2c <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	005a      	lsls	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	18d2      	adds	r2, r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	0019      	movs	r1, r3
 8003a48:	0010      	movs	r0, r2
 8003a4a:	f7fc fb67 	bl	800011c <__udivsi3>
 8003a4e:	0003      	movs	r3, r0
 8003a50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b0f      	cmp	r3, #15
 8003a56:	d91c      	bls.n	8003a92 <UART_SetConfig+0x236>
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	025b      	lsls	r3, r3, #9
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d217      	bcs.n	8003a92 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	200e      	movs	r0, #14
 8003a68:	183b      	adds	r3, r7, r0
 8003a6a:	210f      	movs	r1, #15
 8003a6c:	438a      	bics	r2, r1
 8003a6e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	085b      	lsrs	r3, r3, #1
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2207      	movs	r2, #7
 8003a78:	4013      	ands	r3, r2
 8003a7a:	b299      	uxth	r1, r3
 8003a7c:	183b      	adds	r3, r7, r0
 8003a7e:	183a      	adds	r2, r7, r0
 8003a80:	8812      	ldrh	r2, [r2, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	183a      	adds	r2, r7, r0
 8003a8c:	8812      	ldrh	r2, [r2, #0]
 8003a8e:	60da      	str	r2, [r3, #12]
 8003a90:	e04c      	b.n	8003b2c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003a92:	231e      	movs	r3, #30
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	2201      	movs	r2, #1
 8003a98:	701a      	strb	r2, [r3, #0]
 8003a9a:	e047      	b.n	8003b2c <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a9c:	231f      	movs	r3, #31
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d015      	beq.n	8003ad2 <UART_SetConfig+0x276>
 8003aa6:	dc18      	bgt.n	8003ada <UART_SetConfig+0x27e>
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d00d      	beq.n	8003ac8 <UART_SetConfig+0x26c>
 8003aac:	dc15      	bgt.n	8003ada <UART_SetConfig+0x27e>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <UART_SetConfig+0x25c>
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d005      	beq.n	8003ac2 <UART_SetConfig+0x266>
 8003ab6:	e010      	b.n	8003ada <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab8:	f7fe fd88 	bl	80025cc <HAL_RCC_GetPCLK1Freq>
 8003abc:	0003      	movs	r3, r0
 8003abe:	61bb      	str	r3, [r7, #24]
        break;
 8003ac0:	e012      	b.n	8003ae8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ac2:	4b29      	ldr	r3, [pc, #164]	; (8003b68 <UART_SetConfig+0x30c>)
 8003ac4:	61bb      	str	r3, [r7, #24]
        break;
 8003ac6:	e00f      	b.n	8003ae8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac8:	f7fe fd04 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8003acc:	0003      	movs	r3, r0
 8003ace:	61bb      	str	r3, [r7, #24]
        break;
 8003ad0:	e00a      	b.n	8003ae8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	021b      	lsls	r3, r3, #8
 8003ad6:	61bb      	str	r3, [r7, #24]
        break;
 8003ad8:	e006      	b.n	8003ae8 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ade:	231e      	movs	r3, #30
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
        break;
 8003ae6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d01e      	beq.n	8003b2c <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	085a      	lsrs	r2, r3, #1
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	18d2      	adds	r2, r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	0019      	movs	r1, r3
 8003afe:	0010      	movs	r0, r2
 8003b00:	f7fc fb0c 	bl	800011c <__udivsi3>
 8003b04:	0003      	movs	r3, r0
 8003b06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	2b0f      	cmp	r3, #15
 8003b0c:	d90a      	bls.n	8003b24 <UART_SetConfig+0x2c8>
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	2380      	movs	r3, #128	; 0x80
 8003b12:	025b      	lsls	r3, r3, #9
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d205      	bcs.n	8003b24 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60da      	str	r2, [r3, #12]
 8003b22:	e003      	b.n	8003b2c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003b24:	231e      	movs	r3, #30
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	2201      	movs	r2, #1
 8003b2a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b38:	231e      	movs	r3, #30
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	781b      	ldrb	r3, [r3, #0]
}
 8003b3e:	0018      	movs	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b008      	add	sp, #32
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	efff69f3 	.word	0xefff69f3
 8003b4c:	ffffcfff 	.word	0xffffcfff
 8003b50:	fffff4ff 	.word	0xfffff4ff
 8003b54:	40013800 	.word	0x40013800
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	40004400 	.word	0x40004400
 8003b60:	40004800 	.word	0x40004800
 8003b64:	40004c00 	.word	0x40004c00
 8003b68:	007a1200 	.word	0x007a1200

08003b6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	2201      	movs	r2, #1
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d00b      	beq.n	8003b96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	4a4a      	ldr	r2, [pc, #296]	; (8003cb0 <UART_AdvFeatureConfig+0x144>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	0019      	movs	r1, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d00b      	beq.n	8003bb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4a43      	ldr	r2, [pc, #268]	; (8003cb4 <UART_AdvFeatureConfig+0x148>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	0019      	movs	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d00b      	beq.n	8003bda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	4a3b      	ldr	r2, [pc, #236]	; (8003cb8 <UART_AdvFeatureConfig+0x14c>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	0019      	movs	r1, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	2208      	movs	r2, #8
 8003be0:	4013      	ands	r3, r2
 8003be2:	d00b      	beq.n	8003bfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	4a34      	ldr	r2, [pc, #208]	; (8003cbc <UART_AdvFeatureConfig+0x150>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	0019      	movs	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	2210      	movs	r2, #16
 8003c02:	4013      	ands	r3, r2
 8003c04:	d00b      	beq.n	8003c1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4a2c      	ldr	r2, [pc, #176]	; (8003cc0 <UART_AdvFeatureConfig+0x154>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	0019      	movs	r1, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	2220      	movs	r2, #32
 8003c24:	4013      	ands	r3, r2
 8003c26:	d00b      	beq.n	8003c40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	4a25      	ldr	r2, [pc, #148]	; (8003cc4 <UART_AdvFeatureConfig+0x158>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	0019      	movs	r1, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	2240      	movs	r2, #64	; 0x40
 8003c46:	4013      	ands	r3, r2
 8003c48:	d01d      	beq.n	8003c86 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <UART_AdvFeatureConfig+0x15c>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	0019      	movs	r1, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c66:	2380      	movs	r3, #128	; 0x80
 8003c68:	035b      	lsls	r3, r3, #13
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d10b      	bne.n	8003c86 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4a15      	ldr	r2, [pc, #84]	; (8003ccc <UART_AdvFeatureConfig+0x160>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	0019      	movs	r1, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	2280      	movs	r2, #128	; 0x80
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	d00b      	beq.n	8003ca8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <UART_AdvFeatureConfig+0x164>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	605a      	str	r2, [r3, #4]
  }
}
 8003ca8:	46c0      	nop			; (mov r8, r8)
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b002      	add	sp, #8
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	fffdffff 	.word	0xfffdffff
 8003cb4:	fffeffff 	.word	0xfffeffff
 8003cb8:	fffbffff 	.word	0xfffbffff
 8003cbc:	ffff7fff 	.word	0xffff7fff
 8003cc0:	ffffefff 	.word	0xffffefff
 8003cc4:	ffffdfff 	.word	0xffffdfff
 8003cc8:	ffefffff 	.word	0xffefffff
 8003ccc:	ff9fffff 	.word	0xff9fffff
 8003cd0:	fff7ffff 	.word	0xfff7ffff

08003cd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b092      	sub	sp, #72	; 0x48
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2284      	movs	r2, #132	; 0x84
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ce4:	f7fd fb80 	bl	80013e8 <HAL_GetTick>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2208      	movs	r2, #8
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d12c      	bne.n	8003d54 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfc:	2280      	movs	r2, #128	; 0x80
 8003cfe:	0391      	lsls	r1, r2, #14
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4a46      	ldr	r2, [pc, #280]	; (8003e1c <UART_CheckIdleState+0x148>)
 8003d04:	9200      	str	r2, [sp, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f000 f88c 	bl	8003e24 <UART_WaitOnFlagUntilTimeout>
 8003d0c:	1e03      	subs	r3, r0, #0
 8003d0e:	d021      	beq.n	8003d54 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d10:	f3ef 8310 	mrs	r3, PRIMASK
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d18:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	f383 8810 	msr	PRIMASK, r3
}
 8003d24:	46c0      	nop			; (mov r8, r8)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2180      	movs	r1, #128	; 0x80
 8003d32:	438a      	bics	r2, r1
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3c:	f383 8810 	msr	PRIMASK, r3
}
 8003d40:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2278      	movs	r2, #120	; 0x78
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e05f      	b.n	8003e14 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2204      	movs	r2, #4
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	d146      	bne.n	8003df0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d64:	2280      	movs	r2, #128	; 0x80
 8003d66:	03d1      	lsls	r1, r2, #15
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	4a2c      	ldr	r2, [pc, #176]	; (8003e1c <UART_CheckIdleState+0x148>)
 8003d6c:	9200      	str	r2, [sp, #0]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f000 f858 	bl	8003e24 <UART_WaitOnFlagUntilTimeout>
 8003d74:	1e03      	subs	r3, r0, #0
 8003d76:	d03b      	beq.n	8003df0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d78:	f3ef 8310 	mrs	r3, PRIMASK
 8003d7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d80:	637b      	str	r3, [r7, #52]	; 0x34
 8003d82:	2301      	movs	r3, #1
 8003d84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f383 8810 	msr	PRIMASK, r3
}
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4921      	ldr	r1, [pc, #132]	; (8003e20 <UART_CheckIdleState+0x14c>)
 8003d9a:	400a      	ands	r2, r1
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f383 8810 	msr	PRIMASK, r3
}
 8003da8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003daa:	f3ef 8310 	mrs	r3, PRIMASK
 8003dae:	61bb      	str	r3, [r7, #24]
  return(result);
 8003db0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db2:	633b      	str	r3, [r7, #48]	; 0x30
 8003db4:	2301      	movs	r3, #1
 8003db6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f383 8810 	msr	PRIMASK, r3
}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2101      	movs	r1, #1
 8003dcc:	438a      	bics	r2, r1
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	f383 8810 	msr	PRIMASK, r3
}
 8003dda:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2280      	movs	r2, #128	; 0x80
 8003de0:	2120      	movs	r1, #32
 8003de2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2278      	movs	r2, #120	; 0x78
 8003de8:	2100      	movs	r1, #0
 8003dea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e011      	b.n	8003e14 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2220      	movs	r2, #32
 8003df4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2280      	movs	r2, #128	; 0x80
 8003dfa:	2120      	movs	r1, #32
 8003dfc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2278      	movs	r2, #120	; 0x78
 8003e0e:	2100      	movs	r1, #0
 8003e10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b010      	add	sp, #64	; 0x40
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	01ffffff 	.word	0x01ffffff
 8003e20:	fffffedf 	.word	0xfffffedf

08003e24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	603b      	str	r3, [r7, #0]
 8003e30:	1dfb      	adds	r3, r7, #7
 8003e32:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e34:	e04b      	b.n	8003ece <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	d048      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3c:	f7fd fad4 	bl	80013e8 <HAL_GetTick>
 8003e40:	0002      	movs	r2, r0
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d302      	bcc.n	8003e52 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e04b      	b.n	8003eee <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2204      	movs	r2, #4
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d035      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	2208      	movs	r2, #8
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d111      	bne.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2208      	movs	r2, #8
 8003e76:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f000 f900 	bl	8004080 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2284      	movs	r2, #132	; 0x84
 8003e84:	2108      	movs	r1, #8
 8003e86:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2278      	movs	r2, #120	; 0x78
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e02c      	b.n	8003eee <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69da      	ldr	r2, [r3, #28]
 8003e9a:	2380      	movs	r3, #128	; 0x80
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	401a      	ands	r2, r3
 8003ea0:	2380      	movs	r3, #128	; 0x80
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d112      	bne.n	8003ece <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2280      	movs	r2, #128	; 0x80
 8003eae:	0112      	lsls	r2, r2, #4
 8003eb0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f000 f8e3 	bl	8004080 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2284      	movs	r2, #132	; 0x84
 8003ebe:	2120      	movs	r1, #32
 8003ec0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2278      	movs	r2, #120	; 0x78
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e00f      	b.n	8003eee <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	425a      	negs	r2, r3
 8003ede:	4153      	adcs	r3, r2
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	001a      	movs	r2, r3
 8003ee4:	1dfb      	adds	r3, r7, #7
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d0a4      	beq.n	8003e36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b004      	add	sp, #16
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b090      	sub	sp, #64	; 0x40
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	1dbb      	adds	r3, r7, #6
 8003f04:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	1dba      	adds	r2, r7, #6
 8003f10:	2158      	movs	r1, #88	; 0x58
 8003f12:	8812      	ldrh	r2, [r2, #0]
 8003f14:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2284      	movs	r2, #132	; 0x84
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2280      	movs	r2, #128	; 0x80
 8003f22:	2122      	movs	r1, #34	; 0x22
 8003f24:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d028      	beq.n	8003f80 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f32:	4a3e      	ldr	r2, [pc, #248]	; (800402c <UART_Start_Receive_DMA+0x134>)
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3a:	4a3d      	ldr	r2, [pc, #244]	; (8004030 <UART_Start_Receive_DMA+0x138>)
 8003f3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f42:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <UART_Start_Receive_DMA+0x13c>)
 8003f44:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3324      	adds	r3, #36	; 0x24
 8003f58:	0019      	movs	r1, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	001a      	movs	r2, r3
 8003f60:	1dbb      	adds	r3, r7, #6
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	f7fd fb70 	bl	8001648 <HAL_DMA_Start_IT>
 8003f68:	1e03      	subs	r3, r0, #0
 8003f6a:	d009      	beq.n	8003f80 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2284      	movs	r2, #132	; 0x84
 8003f70:	2110      	movs	r1, #16
 8003f72:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2280      	movs	r2, #128	; 0x80
 8003f78:	2120      	movs	r1, #32
 8003f7a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e050      	b.n	8004022 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d019      	beq.n	8003fbc <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f88:	f3ef 8310 	mrs	r3, PRIMASK
 8003f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f92:	2301      	movs	r3, #1
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f98:	f383 8810 	msr	PRIMASK, r3
}
 8003f9c:	46c0      	nop			; (mov r8, r8)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2180      	movs	r1, #128	; 0x80
 8003faa:	0049      	lsls	r1, r1, #1
 8003fac:	430a      	orrs	r2, r1
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	f383 8810 	msr	PRIMASK, r3
}
 8003fba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003fc0:	613b      	str	r3, [r7, #16]
  return(result);
 8003fc2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f383 8810 	msr	PRIMASK, r3
}
 8003fd0:	46c0      	nop			; (mov r8, r8)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2101      	movs	r1, #1
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	609a      	str	r2, [r3, #8]
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	f383 8810 	msr	PRIMASK, r3
}
 8003fec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fee:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff2:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ff4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	f383 8810 	msr	PRIMASK, r3
}
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2140      	movs	r1, #64	; 0x40
 8004010:	430a      	orrs	r2, r1
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	f383 8810 	msr	PRIMASK, r3
}
 800401e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	0018      	movs	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	b010      	add	sp, #64	; 0x40
 8004028:	bd80      	pop	{r7, pc}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	08004149 	.word	0x08004149
 8004030:	08004275 	.word	0x08004275
 8004034:	080042b7 	.word	0x080042b7

08004038 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004040:	f3ef 8310 	mrs	r3, PRIMASK
 8004044:	60bb      	str	r3, [r7, #8]
  return(result);
 8004046:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	2301      	movs	r3, #1
 800404c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f383 8810 	msr	PRIMASK, r3
}
 8004054:	46c0      	nop			; (mov r8, r8)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	21c0      	movs	r1, #192	; 0xc0
 8004062:	438a      	bics	r2, r1
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f383 8810 	msr	PRIMASK, r3
}
 8004070:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8004078:	46c0      	nop			; (mov r8, r8)
 800407a:	46bd      	mov	sp, r7
 800407c:	b006      	add	sp, #24
 800407e:	bd80      	pop	{r7, pc}

08004080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08e      	sub	sp, #56	; 0x38
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004088:	f3ef 8310 	mrs	r3, PRIMASK
 800408c:	617b      	str	r3, [r7, #20]
  return(result);
 800408e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004090:	637b      	str	r3, [r7, #52]	; 0x34
 8004092:	2301      	movs	r3, #1
 8004094:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	f383 8810 	msr	PRIMASK, r3
}
 800409c:	46c0      	nop			; (mov r8, r8)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4926      	ldr	r1, [pc, #152]	; (8004144 <UART_EndRxTransfer+0xc4>)
 80040aa:	400a      	ands	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	f383 8810 	msr	PRIMASK, r3
}
 80040b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ba:	f3ef 8310 	mrs	r3, PRIMASK
 80040be:	623b      	str	r3, [r7, #32]
  return(result);
 80040c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c2:	633b      	str	r3, [r7, #48]	; 0x30
 80040c4:	2301      	movs	r3, #1
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	f383 8810 	msr	PRIMASK, r3
}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2101      	movs	r1, #1
 80040dc:	438a      	bics	r2, r1
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	f383 8810 	msr	PRIMASK, r3
}
 80040ea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d118      	bne.n	8004126 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f4:	f3ef 8310 	mrs	r3, PRIMASK
 80040f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80040fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040fe:	2301      	movs	r3, #1
 8004100:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f383 8810 	msr	PRIMASK, r3
}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2110      	movs	r1, #16
 8004116:	438a      	bics	r2, r1
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f383 8810 	msr	PRIMASK, r3
}
 8004124:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2280      	movs	r2, #128	; 0x80
 800412a:	2120      	movs	r1, #32
 800412c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	669a      	str	r2, [r3, #104]	; 0x68
}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	46bd      	mov	sp, r7
 800413e:	b00e      	add	sp, #56	; 0x38
 8004140:	bd80      	pop	{r7, pc}
 8004142:	46c0      	nop			; (mov r8, r8)
 8004144:	fffffedf 	.word	0xfffffedf

08004148 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b094      	sub	sp, #80	; 0x50
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	2b20      	cmp	r3, #32
 800415c:	d06f      	beq.n	800423e <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 800415e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004160:	225a      	movs	r2, #90	; 0x5a
 8004162:	2100      	movs	r1, #0
 8004164:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004166:	f3ef 8310 	mrs	r3, PRIMASK
 800416a:	61bb      	str	r3, [r7, #24]
  return(result);
 800416c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800416e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004170:	2301      	movs	r3, #1
 8004172:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f383 8810 	msr	PRIMASK, r3
}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	493a      	ldr	r1, [pc, #232]	; (8004270 <UART_DMAReceiveCplt+0x128>)
 8004188:	400a      	ands	r2, r1
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800418e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	f383 8810 	msr	PRIMASK, r3
}
 8004196:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004198:	f3ef 8310 	mrs	r3, PRIMASK
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a0:	647b      	str	r3, [r7, #68]	; 0x44
 80041a2:	2301      	movs	r3, #1
 80041a4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	f383 8810 	msr	PRIMASK, r3
}
 80041ac:	46c0      	nop			; (mov r8, r8)
 80041ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2101      	movs	r1, #1
 80041ba:	438a      	bics	r2, r1
 80041bc:	609a      	str	r2, [r3, #8]
 80041be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c4:	f383 8810 	msr	PRIMASK, r3
}
 80041c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ca:	f3ef 8310 	mrs	r3, PRIMASK
 80041ce:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041d2:	643b      	str	r3, [r7, #64]	; 0x40
 80041d4:	2301      	movs	r3, #1
 80041d6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041da:	f383 8810 	msr	PRIMASK, r3
}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2140      	movs	r1, #64	; 0x40
 80041ec:	438a      	bics	r2, r1
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f6:	f383 8810 	msr	PRIMASK, r3
}
 80041fa:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fe:	2280      	movs	r2, #128	; 0x80
 8004200:	2120      	movs	r1, #32
 8004202:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004208:	2b01      	cmp	r3, #1
 800420a:	d118      	bne.n	800423e <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800420c:	f3ef 8310 	mrs	r3, PRIMASK
 8004210:	60fb      	str	r3, [r7, #12]
  return(result);
 8004212:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004216:	2301      	movs	r3, #1
 8004218:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f383 8810 	msr	PRIMASK, r3
}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2110      	movs	r1, #16
 800422e:	438a      	bics	r2, r1
 8004230:	601a      	str	r2, [r3, #0]
 8004232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004234:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f383 8810 	msr	PRIMASK, r3
}
 800423c:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800423e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004240:	2200      	movs	r2, #0
 8004242:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004248:	2b01      	cmp	r3, #1
 800424a:	d108      	bne.n	800425e <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800424c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800424e:	2258      	movs	r2, #88	; 0x58
 8004250:	5a9a      	ldrh	r2, [r3, r2]
 8004252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004254:	0011      	movs	r1, r2
 8004256:	0018      	movs	r0, r3
 8004258:	f7ff faf5 	bl	8003846 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800425c:	e003      	b.n	8004266 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800425e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004260:	0018      	movs	r0, r3
 8004262:	f7ff fad8 	bl	8003816 <HAL_UART_RxCpltCallback>
}
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	46bd      	mov	sp, r7
 800426a:	b014      	add	sp, #80	; 0x50
 800426c:	bd80      	pop	{r7, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	fffffeff 	.word	0xfffffeff

08004274 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428c:	2b01      	cmp	r3, #1
 800428e:	d10a      	bne.n	80042a6 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2258      	movs	r2, #88	; 0x58
 8004294:	5a9b      	ldrh	r3, [r3, r2]
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	0011      	movs	r1, r2
 800429e:	0018      	movs	r0, r3
 80042a0:	f7ff fad1 	bl	8003846 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042a4:	e003      	b.n	80042ae <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	0018      	movs	r0, r3
 80042aa:	f7ff fabc 	bl	8003826 <HAL_UART_RxHalfCpltCallback>
}
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b004      	add	sp, #16
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b086      	sub	sp, #24
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2280      	movs	r2, #128	; 0x80
 80042ce:	589b      	ldr	r3, [r3, r2]
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2280      	movs	r2, #128	; 0x80
 80042da:	4013      	ands	r3, r2
 80042dc:	2b80      	cmp	r3, #128	; 0x80
 80042de:	d10a      	bne.n	80042f6 <UART_DMAError+0x40>
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	2b21      	cmp	r3, #33	; 0x21
 80042e4:	d107      	bne.n	80042f6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2252      	movs	r2, #82	; 0x52
 80042ea:	2100      	movs	r1, #0
 80042ec:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	0018      	movs	r0, r3
 80042f2:	f7ff fea1 	bl	8004038 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	2240      	movs	r2, #64	; 0x40
 80042fe:	4013      	ands	r3, r2
 8004300:	2b40      	cmp	r3, #64	; 0x40
 8004302:	d10a      	bne.n	800431a <UART_DMAError+0x64>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b22      	cmp	r3, #34	; 0x22
 8004308:	d107      	bne.n	800431a <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	225a      	movs	r2, #90	; 0x5a
 800430e:	2100      	movs	r1, #0
 8004310:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	0018      	movs	r0, r3
 8004316:	f7ff feb3 	bl	8004080 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2284      	movs	r2, #132	; 0x84
 800431e:	589b      	ldr	r3, [r3, r2]
 8004320:	2210      	movs	r2, #16
 8004322:	431a      	orrs	r2, r3
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2184      	movs	r1, #132	; 0x84
 8004328:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	0018      	movs	r0, r3
 800432e:	f7ff fa82 	bl	8003836 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	46bd      	mov	sp, r7
 8004336:	b006      	add	sp, #24
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <siprintf>:
 800433c:	b40e      	push	{r1, r2, r3}
 800433e:	b500      	push	{lr}
 8004340:	490b      	ldr	r1, [pc, #44]	; (8004370 <siprintf+0x34>)
 8004342:	b09c      	sub	sp, #112	; 0x70
 8004344:	ab1d      	add	r3, sp, #116	; 0x74
 8004346:	9002      	str	r0, [sp, #8]
 8004348:	9006      	str	r0, [sp, #24]
 800434a:	9107      	str	r1, [sp, #28]
 800434c:	9104      	str	r1, [sp, #16]
 800434e:	4809      	ldr	r0, [pc, #36]	; (8004374 <siprintf+0x38>)
 8004350:	4909      	ldr	r1, [pc, #36]	; (8004378 <siprintf+0x3c>)
 8004352:	cb04      	ldmia	r3!, {r2}
 8004354:	9105      	str	r1, [sp, #20]
 8004356:	6800      	ldr	r0, [r0, #0]
 8004358:	a902      	add	r1, sp, #8
 800435a:	9301      	str	r3, [sp, #4]
 800435c:	f000 f9a2 	bl	80046a4 <_svfiprintf_r>
 8004360:	2200      	movs	r2, #0
 8004362:	9b02      	ldr	r3, [sp, #8]
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	b01c      	add	sp, #112	; 0x70
 8004368:	bc08      	pop	{r3}
 800436a:	b003      	add	sp, #12
 800436c:	4718      	bx	r3
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	7fffffff 	.word	0x7fffffff
 8004374:	20000058 	.word	0x20000058
 8004378:	ffff0208 	.word	0xffff0208

0800437c <memset>:
 800437c:	0003      	movs	r3, r0
 800437e:	1882      	adds	r2, r0, r2
 8004380:	4293      	cmp	r3, r2
 8004382:	d100      	bne.n	8004386 <memset+0xa>
 8004384:	4770      	bx	lr
 8004386:	7019      	strb	r1, [r3, #0]
 8004388:	3301      	adds	r3, #1
 800438a:	e7f9      	b.n	8004380 <memset+0x4>

0800438c <__errno>:
 800438c:	4b01      	ldr	r3, [pc, #4]	; (8004394 <__errno+0x8>)
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	4770      	bx	lr
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	20000058 	.word	0x20000058

08004398 <__libc_init_array>:
 8004398:	b570      	push	{r4, r5, r6, lr}
 800439a:	2600      	movs	r6, #0
 800439c:	4c0c      	ldr	r4, [pc, #48]	; (80043d0 <__libc_init_array+0x38>)
 800439e:	4d0d      	ldr	r5, [pc, #52]	; (80043d4 <__libc_init_array+0x3c>)
 80043a0:	1b64      	subs	r4, r4, r5
 80043a2:	10a4      	asrs	r4, r4, #2
 80043a4:	42a6      	cmp	r6, r4
 80043a6:	d109      	bne.n	80043bc <__libc_init_array+0x24>
 80043a8:	2600      	movs	r6, #0
 80043aa:	f000 fc6d 	bl	8004c88 <_init>
 80043ae:	4c0a      	ldr	r4, [pc, #40]	; (80043d8 <__libc_init_array+0x40>)
 80043b0:	4d0a      	ldr	r5, [pc, #40]	; (80043dc <__libc_init_array+0x44>)
 80043b2:	1b64      	subs	r4, r4, r5
 80043b4:	10a4      	asrs	r4, r4, #2
 80043b6:	42a6      	cmp	r6, r4
 80043b8:	d105      	bne.n	80043c6 <__libc_init_array+0x2e>
 80043ba:	bd70      	pop	{r4, r5, r6, pc}
 80043bc:	00b3      	lsls	r3, r6, #2
 80043be:	58eb      	ldr	r3, [r5, r3]
 80043c0:	4798      	blx	r3
 80043c2:	3601      	adds	r6, #1
 80043c4:	e7ee      	b.n	80043a4 <__libc_init_array+0xc>
 80043c6:	00b3      	lsls	r3, r6, #2
 80043c8:	58eb      	ldr	r3, [r5, r3]
 80043ca:	4798      	blx	r3
 80043cc:	3601      	adds	r6, #1
 80043ce:	e7f2      	b.n	80043b6 <__libc_init_array+0x1e>
 80043d0:	08004d14 	.word	0x08004d14
 80043d4:	08004d14 	.word	0x08004d14
 80043d8:	08004d18 	.word	0x08004d18
 80043dc:	08004d14 	.word	0x08004d14

080043e0 <__retarget_lock_acquire_recursive>:
 80043e0:	4770      	bx	lr

080043e2 <__retarget_lock_release_recursive>:
 80043e2:	4770      	bx	lr

080043e4 <_free_r>:
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	0005      	movs	r5, r0
 80043e8:	2900      	cmp	r1, #0
 80043ea:	d010      	beq.n	800440e <_free_r+0x2a>
 80043ec:	1f0c      	subs	r4, r1, #4
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	da00      	bge.n	80043f6 <_free_r+0x12>
 80043f4:	18e4      	adds	r4, r4, r3
 80043f6:	0028      	movs	r0, r5
 80043f8:	f000 f8e2 	bl	80045c0 <__malloc_lock>
 80043fc:	4a1d      	ldr	r2, [pc, #116]	; (8004474 <_free_r+0x90>)
 80043fe:	6813      	ldr	r3, [r2, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d105      	bne.n	8004410 <_free_r+0x2c>
 8004404:	6063      	str	r3, [r4, #4]
 8004406:	6014      	str	r4, [r2, #0]
 8004408:	0028      	movs	r0, r5
 800440a:	f000 f8e1 	bl	80045d0 <__malloc_unlock>
 800440e:	bd70      	pop	{r4, r5, r6, pc}
 8004410:	42a3      	cmp	r3, r4
 8004412:	d908      	bls.n	8004426 <_free_r+0x42>
 8004414:	6820      	ldr	r0, [r4, #0]
 8004416:	1821      	adds	r1, r4, r0
 8004418:	428b      	cmp	r3, r1
 800441a:	d1f3      	bne.n	8004404 <_free_r+0x20>
 800441c:	6819      	ldr	r1, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	1809      	adds	r1, r1, r0
 8004422:	6021      	str	r1, [r4, #0]
 8004424:	e7ee      	b.n	8004404 <_free_r+0x20>
 8004426:	001a      	movs	r2, r3
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <_free_r+0x4e>
 800442e:	42a3      	cmp	r3, r4
 8004430:	d9f9      	bls.n	8004426 <_free_r+0x42>
 8004432:	6811      	ldr	r1, [r2, #0]
 8004434:	1850      	adds	r0, r2, r1
 8004436:	42a0      	cmp	r0, r4
 8004438:	d10b      	bne.n	8004452 <_free_r+0x6e>
 800443a:	6820      	ldr	r0, [r4, #0]
 800443c:	1809      	adds	r1, r1, r0
 800443e:	1850      	adds	r0, r2, r1
 8004440:	6011      	str	r1, [r2, #0]
 8004442:	4283      	cmp	r3, r0
 8004444:	d1e0      	bne.n	8004408 <_free_r+0x24>
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	1841      	adds	r1, r0, r1
 800444c:	6011      	str	r1, [r2, #0]
 800444e:	6053      	str	r3, [r2, #4]
 8004450:	e7da      	b.n	8004408 <_free_r+0x24>
 8004452:	42a0      	cmp	r0, r4
 8004454:	d902      	bls.n	800445c <_free_r+0x78>
 8004456:	230c      	movs	r3, #12
 8004458:	602b      	str	r3, [r5, #0]
 800445a:	e7d5      	b.n	8004408 <_free_r+0x24>
 800445c:	6820      	ldr	r0, [r4, #0]
 800445e:	1821      	adds	r1, r4, r0
 8004460:	428b      	cmp	r3, r1
 8004462:	d103      	bne.n	800446c <_free_r+0x88>
 8004464:	6819      	ldr	r1, [r3, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	1809      	adds	r1, r1, r0
 800446a:	6021      	str	r1, [r4, #0]
 800446c:	6063      	str	r3, [r4, #4]
 800446e:	6054      	str	r4, [r2, #4]
 8004470:	e7ca      	b.n	8004408 <_free_r+0x24>
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	20000424 	.word	0x20000424

08004478 <sbrk_aligned>:
 8004478:	b570      	push	{r4, r5, r6, lr}
 800447a:	4e0f      	ldr	r6, [pc, #60]	; (80044b8 <sbrk_aligned+0x40>)
 800447c:	000d      	movs	r5, r1
 800447e:	6831      	ldr	r1, [r6, #0]
 8004480:	0004      	movs	r4, r0
 8004482:	2900      	cmp	r1, #0
 8004484:	d102      	bne.n	800448c <sbrk_aligned+0x14>
 8004486:	f000 fba1 	bl	8004bcc <_sbrk_r>
 800448a:	6030      	str	r0, [r6, #0]
 800448c:	0029      	movs	r1, r5
 800448e:	0020      	movs	r0, r4
 8004490:	f000 fb9c 	bl	8004bcc <_sbrk_r>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	d00a      	beq.n	80044ae <sbrk_aligned+0x36>
 8004498:	2303      	movs	r3, #3
 800449a:	1cc5      	adds	r5, r0, #3
 800449c:	439d      	bics	r5, r3
 800449e:	42a8      	cmp	r0, r5
 80044a0:	d007      	beq.n	80044b2 <sbrk_aligned+0x3a>
 80044a2:	1a29      	subs	r1, r5, r0
 80044a4:	0020      	movs	r0, r4
 80044a6:	f000 fb91 	bl	8004bcc <_sbrk_r>
 80044aa:	3001      	adds	r0, #1
 80044ac:	d101      	bne.n	80044b2 <sbrk_aligned+0x3a>
 80044ae:	2501      	movs	r5, #1
 80044b0:	426d      	negs	r5, r5
 80044b2:	0028      	movs	r0, r5
 80044b4:	bd70      	pop	{r4, r5, r6, pc}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	20000428 	.word	0x20000428

080044bc <_malloc_r>:
 80044bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044be:	2203      	movs	r2, #3
 80044c0:	1ccb      	adds	r3, r1, #3
 80044c2:	4393      	bics	r3, r2
 80044c4:	3308      	adds	r3, #8
 80044c6:	0006      	movs	r6, r0
 80044c8:	001f      	movs	r7, r3
 80044ca:	2b0c      	cmp	r3, #12
 80044cc:	d238      	bcs.n	8004540 <_malloc_r+0x84>
 80044ce:	270c      	movs	r7, #12
 80044d0:	42b9      	cmp	r1, r7
 80044d2:	d837      	bhi.n	8004544 <_malloc_r+0x88>
 80044d4:	0030      	movs	r0, r6
 80044d6:	f000 f873 	bl	80045c0 <__malloc_lock>
 80044da:	4b38      	ldr	r3, [pc, #224]	; (80045bc <_malloc_r+0x100>)
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	001c      	movs	r4, r3
 80044e2:	2c00      	cmp	r4, #0
 80044e4:	d133      	bne.n	800454e <_malloc_r+0x92>
 80044e6:	0039      	movs	r1, r7
 80044e8:	0030      	movs	r0, r6
 80044ea:	f7ff ffc5 	bl	8004478 <sbrk_aligned>
 80044ee:	0004      	movs	r4, r0
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	d15e      	bne.n	80045b2 <_malloc_r+0xf6>
 80044f4:	9b00      	ldr	r3, [sp, #0]
 80044f6:	681c      	ldr	r4, [r3, #0]
 80044f8:	0025      	movs	r5, r4
 80044fa:	2d00      	cmp	r5, #0
 80044fc:	d14e      	bne.n	800459c <_malloc_r+0xe0>
 80044fe:	2c00      	cmp	r4, #0
 8004500:	d051      	beq.n	80045a6 <_malloc_r+0xea>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	0029      	movs	r1, r5
 8004506:	18e3      	adds	r3, r4, r3
 8004508:	0030      	movs	r0, r6
 800450a:	9301      	str	r3, [sp, #4]
 800450c:	f000 fb5e 	bl	8004bcc <_sbrk_r>
 8004510:	9b01      	ldr	r3, [sp, #4]
 8004512:	4283      	cmp	r3, r0
 8004514:	d147      	bne.n	80045a6 <_malloc_r+0xea>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	0030      	movs	r0, r6
 800451a:	1aff      	subs	r7, r7, r3
 800451c:	0039      	movs	r1, r7
 800451e:	f7ff ffab 	bl	8004478 <sbrk_aligned>
 8004522:	3001      	adds	r0, #1
 8004524:	d03f      	beq.n	80045a6 <_malloc_r+0xea>
 8004526:	6823      	ldr	r3, [r4, #0]
 8004528:	19db      	adds	r3, r3, r7
 800452a:	6023      	str	r3, [r4, #0]
 800452c:	9b00      	ldr	r3, [sp, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d040      	beq.n	80045b6 <_malloc_r+0xfa>
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	42a2      	cmp	r2, r4
 8004538:	d133      	bne.n	80045a2 <_malloc_r+0xe6>
 800453a:	2200      	movs	r2, #0
 800453c:	605a      	str	r2, [r3, #4]
 800453e:	e014      	b.n	800456a <_malloc_r+0xae>
 8004540:	2b00      	cmp	r3, #0
 8004542:	dac5      	bge.n	80044d0 <_malloc_r+0x14>
 8004544:	230c      	movs	r3, #12
 8004546:	2500      	movs	r5, #0
 8004548:	6033      	str	r3, [r6, #0]
 800454a:	0028      	movs	r0, r5
 800454c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800454e:	6821      	ldr	r1, [r4, #0]
 8004550:	1bc9      	subs	r1, r1, r7
 8004552:	d420      	bmi.n	8004596 <_malloc_r+0xda>
 8004554:	290b      	cmp	r1, #11
 8004556:	d918      	bls.n	800458a <_malloc_r+0xce>
 8004558:	19e2      	adds	r2, r4, r7
 800455a:	6027      	str	r7, [r4, #0]
 800455c:	42a3      	cmp	r3, r4
 800455e:	d112      	bne.n	8004586 <_malloc_r+0xca>
 8004560:	9b00      	ldr	r3, [sp, #0]
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	6863      	ldr	r3, [r4, #4]
 8004566:	6011      	str	r1, [r2, #0]
 8004568:	6053      	str	r3, [r2, #4]
 800456a:	0030      	movs	r0, r6
 800456c:	0025      	movs	r5, r4
 800456e:	f000 f82f 	bl	80045d0 <__malloc_unlock>
 8004572:	2207      	movs	r2, #7
 8004574:	350b      	adds	r5, #11
 8004576:	1d23      	adds	r3, r4, #4
 8004578:	4395      	bics	r5, r2
 800457a:	1aea      	subs	r2, r5, r3
 800457c:	429d      	cmp	r5, r3
 800457e:	d0e4      	beq.n	800454a <_malloc_r+0x8e>
 8004580:	1b5b      	subs	r3, r3, r5
 8004582:	50a3      	str	r3, [r4, r2]
 8004584:	e7e1      	b.n	800454a <_malloc_r+0x8e>
 8004586:	605a      	str	r2, [r3, #4]
 8004588:	e7ec      	b.n	8004564 <_malloc_r+0xa8>
 800458a:	6862      	ldr	r2, [r4, #4]
 800458c:	42a3      	cmp	r3, r4
 800458e:	d1d5      	bne.n	800453c <_malloc_r+0x80>
 8004590:	9b00      	ldr	r3, [sp, #0]
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e7e9      	b.n	800456a <_malloc_r+0xae>
 8004596:	0023      	movs	r3, r4
 8004598:	6864      	ldr	r4, [r4, #4]
 800459a:	e7a2      	b.n	80044e2 <_malloc_r+0x26>
 800459c:	002c      	movs	r4, r5
 800459e:	686d      	ldr	r5, [r5, #4]
 80045a0:	e7ab      	b.n	80044fa <_malloc_r+0x3e>
 80045a2:	0013      	movs	r3, r2
 80045a4:	e7c4      	b.n	8004530 <_malloc_r+0x74>
 80045a6:	230c      	movs	r3, #12
 80045a8:	0030      	movs	r0, r6
 80045aa:	6033      	str	r3, [r6, #0]
 80045ac:	f000 f810 	bl	80045d0 <__malloc_unlock>
 80045b0:	e7cb      	b.n	800454a <_malloc_r+0x8e>
 80045b2:	6027      	str	r7, [r4, #0]
 80045b4:	e7d9      	b.n	800456a <_malloc_r+0xae>
 80045b6:	605b      	str	r3, [r3, #4]
 80045b8:	deff      	udf	#255	; 0xff
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	20000424 	.word	0x20000424

080045c0 <__malloc_lock>:
 80045c0:	b510      	push	{r4, lr}
 80045c2:	4802      	ldr	r0, [pc, #8]	; (80045cc <__malloc_lock+0xc>)
 80045c4:	f7ff ff0c 	bl	80043e0 <__retarget_lock_acquire_recursive>
 80045c8:	bd10      	pop	{r4, pc}
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	20000420 	.word	0x20000420

080045d0 <__malloc_unlock>:
 80045d0:	b510      	push	{r4, lr}
 80045d2:	4802      	ldr	r0, [pc, #8]	; (80045dc <__malloc_unlock+0xc>)
 80045d4:	f7ff ff05 	bl	80043e2 <__retarget_lock_release_recursive>
 80045d8:	bd10      	pop	{r4, pc}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	20000420 	.word	0x20000420

080045e0 <__ssputs_r>:
 80045e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045e2:	b085      	sub	sp, #20
 80045e4:	9301      	str	r3, [sp, #4]
 80045e6:	9203      	str	r2, [sp, #12]
 80045e8:	688e      	ldr	r6, [r1, #8]
 80045ea:	9a01      	ldr	r2, [sp, #4]
 80045ec:	0007      	movs	r7, r0
 80045ee:	000c      	movs	r4, r1
 80045f0:	680b      	ldr	r3, [r1, #0]
 80045f2:	4296      	cmp	r6, r2
 80045f4:	d831      	bhi.n	800465a <__ssputs_r+0x7a>
 80045f6:	898a      	ldrh	r2, [r1, #12]
 80045f8:	2190      	movs	r1, #144	; 0x90
 80045fa:	00c9      	lsls	r1, r1, #3
 80045fc:	420a      	tst	r2, r1
 80045fe:	d029      	beq.n	8004654 <__ssputs_r+0x74>
 8004600:	2003      	movs	r0, #3
 8004602:	6921      	ldr	r1, [r4, #16]
 8004604:	1a5b      	subs	r3, r3, r1
 8004606:	9302      	str	r3, [sp, #8]
 8004608:	6963      	ldr	r3, [r4, #20]
 800460a:	4343      	muls	r3, r0
 800460c:	0fdd      	lsrs	r5, r3, #31
 800460e:	18ed      	adds	r5, r5, r3
 8004610:	9b01      	ldr	r3, [sp, #4]
 8004612:	9802      	ldr	r0, [sp, #8]
 8004614:	3301      	adds	r3, #1
 8004616:	181b      	adds	r3, r3, r0
 8004618:	106d      	asrs	r5, r5, #1
 800461a:	42ab      	cmp	r3, r5
 800461c:	d900      	bls.n	8004620 <__ssputs_r+0x40>
 800461e:	001d      	movs	r5, r3
 8004620:	0552      	lsls	r2, r2, #21
 8004622:	d529      	bpl.n	8004678 <__ssputs_r+0x98>
 8004624:	0029      	movs	r1, r5
 8004626:	0038      	movs	r0, r7
 8004628:	f7ff ff48 	bl	80044bc <_malloc_r>
 800462c:	1e06      	subs	r6, r0, #0
 800462e:	d02d      	beq.n	800468c <__ssputs_r+0xac>
 8004630:	9a02      	ldr	r2, [sp, #8]
 8004632:	6921      	ldr	r1, [r4, #16]
 8004634:	f000 fae7 	bl	8004c06 <memcpy>
 8004638:	89a2      	ldrh	r2, [r4, #12]
 800463a:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <__ssputs_r+0xc0>)
 800463c:	401a      	ands	r2, r3
 800463e:	2380      	movs	r3, #128	; 0x80
 8004640:	4313      	orrs	r3, r2
 8004642:	81a3      	strh	r3, [r4, #12]
 8004644:	9b02      	ldr	r3, [sp, #8]
 8004646:	6126      	str	r6, [r4, #16]
 8004648:	18f6      	adds	r6, r6, r3
 800464a:	6026      	str	r6, [r4, #0]
 800464c:	6165      	str	r5, [r4, #20]
 800464e:	9e01      	ldr	r6, [sp, #4]
 8004650:	1aed      	subs	r5, r5, r3
 8004652:	60a5      	str	r5, [r4, #8]
 8004654:	9b01      	ldr	r3, [sp, #4]
 8004656:	429e      	cmp	r6, r3
 8004658:	d900      	bls.n	800465c <__ssputs_r+0x7c>
 800465a:	9e01      	ldr	r6, [sp, #4]
 800465c:	0032      	movs	r2, r6
 800465e:	9903      	ldr	r1, [sp, #12]
 8004660:	6820      	ldr	r0, [r4, #0]
 8004662:	f000 fa9f 	bl	8004ba4 <memmove>
 8004666:	2000      	movs	r0, #0
 8004668:	68a3      	ldr	r3, [r4, #8]
 800466a:	1b9b      	subs	r3, r3, r6
 800466c:	60a3      	str	r3, [r4, #8]
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	199b      	adds	r3, r3, r6
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	b005      	add	sp, #20
 8004676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004678:	002a      	movs	r2, r5
 800467a:	0038      	movs	r0, r7
 800467c:	f000 facc 	bl	8004c18 <_realloc_r>
 8004680:	1e06      	subs	r6, r0, #0
 8004682:	d1df      	bne.n	8004644 <__ssputs_r+0x64>
 8004684:	0038      	movs	r0, r7
 8004686:	6921      	ldr	r1, [r4, #16]
 8004688:	f7ff feac 	bl	80043e4 <_free_r>
 800468c:	230c      	movs	r3, #12
 800468e:	2001      	movs	r0, #1
 8004690:	603b      	str	r3, [r7, #0]
 8004692:	89a2      	ldrh	r2, [r4, #12]
 8004694:	3334      	adds	r3, #52	; 0x34
 8004696:	4313      	orrs	r3, r2
 8004698:	81a3      	strh	r3, [r4, #12]
 800469a:	4240      	negs	r0, r0
 800469c:	e7ea      	b.n	8004674 <__ssputs_r+0x94>
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	fffffb7f 	.word	0xfffffb7f

080046a4 <_svfiprintf_r>:
 80046a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046a6:	b0a1      	sub	sp, #132	; 0x84
 80046a8:	9003      	str	r0, [sp, #12]
 80046aa:	001d      	movs	r5, r3
 80046ac:	898b      	ldrh	r3, [r1, #12]
 80046ae:	000f      	movs	r7, r1
 80046b0:	0016      	movs	r6, r2
 80046b2:	061b      	lsls	r3, r3, #24
 80046b4:	d511      	bpl.n	80046da <_svfiprintf_r+0x36>
 80046b6:	690b      	ldr	r3, [r1, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10e      	bne.n	80046da <_svfiprintf_r+0x36>
 80046bc:	2140      	movs	r1, #64	; 0x40
 80046be:	f7ff fefd 	bl	80044bc <_malloc_r>
 80046c2:	6038      	str	r0, [r7, #0]
 80046c4:	6138      	str	r0, [r7, #16]
 80046c6:	2800      	cmp	r0, #0
 80046c8:	d105      	bne.n	80046d6 <_svfiprintf_r+0x32>
 80046ca:	230c      	movs	r3, #12
 80046cc:	9a03      	ldr	r2, [sp, #12]
 80046ce:	3801      	subs	r0, #1
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	b021      	add	sp, #132	; 0x84
 80046d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046d6:	2340      	movs	r3, #64	; 0x40
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	2300      	movs	r3, #0
 80046dc:	ac08      	add	r4, sp, #32
 80046de:	6163      	str	r3, [r4, #20]
 80046e0:	3320      	adds	r3, #32
 80046e2:	7663      	strb	r3, [r4, #25]
 80046e4:	3310      	adds	r3, #16
 80046e6:	76a3      	strb	r3, [r4, #26]
 80046e8:	9507      	str	r5, [sp, #28]
 80046ea:	0035      	movs	r5, r6
 80046ec:	782b      	ldrb	r3, [r5, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <_svfiprintf_r+0x52>
 80046f2:	2b25      	cmp	r3, #37	; 0x25
 80046f4:	d148      	bne.n	8004788 <_svfiprintf_r+0xe4>
 80046f6:	1bab      	subs	r3, r5, r6
 80046f8:	9305      	str	r3, [sp, #20]
 80046fa:	42b5      	cmp	r5, r6
 80046fc:	d00b      	beq.n	8004716 <_svfiprintf_r+0x72>
 80046fe:	0032      	movs	r2, r6
 8004700:	0039      	movs	r1, r7
 8004702:	9803      	ldr	r0, [sp, #12]
 8004704:	f7ff ff6c 	bl	80045e0 <__ssputs_r>
 8004708:	3001      	adds	r0, #1
 800470a:	d100      	bne.n	800470e <_svfiprintf_r+0x6a>
 800470c:	e0af      	b.n	800486e <_svfiprintf_r+0x1ca>
 800470e:	6963      	ldr	r3, [r4, #20]
 8004710:	9a05      	ldr	r2, [sp, #20]
 8004712:	189b      	adds	r3, r3, r2
 8004714:	6163      	str	r3, [r4, #20]
 8004716:	782b      	ldrb	r3, [r5, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d100      	bne.n	800471e <_svfiprintf_r+0x7a>
 800471c:	e0a7      	b.n	800486e <_svfiprintf_r+0x1ca>
 800471e:	2201      	movs	r2, #1
 8004720:	2300      	movs	r3, #0
 8004722:	4252      	negs	r2, r2
 8004724:	6062      	str	r2, [r4, #4]
 8004726:	a904      	add	r1, sp, #16
 8004728:	3254      	adds	r2, #84	; 0x54
 800472a:	1852      	adds	r2, r2, r1
 800472c:	1c6e      	adds	r6, r5, #1
 800472e:	6023      	str	r3, [r4, #0]
 8004730:	60e3      	str	r3, [r4, #12]
 8004732:	60a3      	str	r3, [r4, #8]
 8004734:	7013      	strb	r3, [r2, #0]
 8004736:	65a3      	str	r3, [r4, #88]	; 0x58
 8004738:	4b55      	ldr	r3, [pc, #340]	; (8004890 <_svfiprintf_r+0x1ec>)
 800473a:	2205      	movs	r2, #5
 800473c:	0018      	movs	r0, r3
 800473e:	7831      	ldrb	r1, [r6, #0]
 8004740:	9305      	str	r3, [sp, #20]
 8004742:	f000 fa55 	bl	8004bf0 <memchr>
 8004746:	1c75      	adds	r5, r6, #1
 8004748:	2800      	cmp	r0, #0
 800474a:	d11f      	bne.n	800478c <_svfiprintf_r+0xe8>
 800474c:	6822      	ldr	r2, [r4, #0]
 800474e:	06d3      	lsls	r3, r2, #27
 8004750:	d504      	bpl.n	800475c <_svfiprintf_r+0xb8>
 8004752:	2353      	movs	r3, #83	; 0x53
 8004754:	a904      	add	r1, sp, #16
 8004756:	185b      	adds	r3, r3, r1
 8004758:	2120      	movs	r1, #32
 800475a:	7019      	strb	r1, [r3, #0]
 800475c:	0713      	lsls	r3, r2, #28
 800475e:	d504      	bpl.n	800476a <_svfiprintf_r+0xc6>
 8004760:	2353      	movs	r3, #83	; 0x53
 8004762:	a904      	add	r1, sp, #16
 8004764:	185b      	adds	r3, r3, r1
 8004766:	212b      	movs	r1, #43	; 0x2b
 8004768:	7019      	strb	r1, [r3, #0]
 800476a:	7833      	ldrb	r3, [r6, #0]
 800476c:	2b2a      	cmp	r3, #42	; 0x2a
 800476e:	d016      	beq.n	800479e <_svfiprintf_r+0xfa>
 8004770:	0035      	movs	r5, r6
 8004772:	2100      	movs	r1, #0
 8004774:	200a      	movs	r0, #10
 8004776:	68e3      	ldr	r3, [r4, #12]
 8004778:	782a      	ldrb	r2, [r5, #0]
 800477a:	1c6e      	adds	r6, r5, #1
 800477c:	3a30      	subs	r2, #48	; 0x30
 800477e:	2a09      	cmp	r2, #9
 8004780:	d94e      	bls.n	8004820 <_svfiprintf_r+0x17c>
 8004782:	2900      	cmp	r1, #0
 8004784:	d111      	bne.n	80047aa <_svfiprintf_r+0x106>
 8004786:	e017      	b.n	80047b8 <_svfiprintf_r+0x114>
 8004788:	3501      	adds	r5, #1
 800478a:	e7af      	b.n	80046ec <_svfiprintf_r+0x48>
 800478c:	9b05      	ldr	r3, [sp, #20]
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	1ac0      	subs	r0, r0, r3
 8004792:	2301      	movs	r3, #1
 8004794:	4083      	lsls	r3, r0
 8004796:	4313      	orrs	r3, r2
 8004798:	002e      	movs	r6, r5
 800479a:	6023      	str	r3, [r4, #0]
 800479c:	e7cc      	b.n	8004738 <_svfiprintf_r+0x94>
 800479e:	9b07      	ldr	r3, [sp, #28]
 80047a0:	1d19      	adds	r1, r3, #4
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	9107      	str	r1, [sp, #28]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	db01      	blt.n	80047ae <_svfiprintf_r+0x10a>
 80047aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80047ac:	e004      	b.n	80047b8 <_svfiprintf_r+0x114>
 80047ae:	425b      	negs	r3, r3
 80047b0:	60e3      	str	r3, [r4, #12]
 80047b2:	2302      	movs	r3, #2
 80047b4:	4313      	orrs	r3, r2
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	782b      	ldrb	r3, [r5, #0]
 80047ba:	2b2e      	cmp	r3, #46	; 0x2e
 80047bc:	d10a      	bne.n	80047d4 <_svfiprintf_r+0x130>
 80047be:	786b      	ldrb	r3, [r5, #1]
 80047c0:	2b2a      	cmp	r3, #42	; 0x2a
 80047c2:	d135      	bne.n	8004830 <_svfiprintf_r+0x18c>
 80047c4:	9b07      	ldr	r3, [sp, #28]
 80047c6:	3502      	adds	r5, #2
 80047c8:	1d1a      	adds	r2, r3, #4
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	9207      	str	r2, [sp, #28]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	db2b      	blt.n	800482a <_svfiprintf_r+0x186>
 80047d2:	9309      	str	r3, [sp, #36]	; 0x24
 80047d4:	4e2f      	ldr	r6, [pc, #188]	; (8004894 <_svfiprintf_r+0x1f0>)
 80047d6:	2203      	movs	r2, #3
 80047d8:	0030      	movs	r0, r6
 80047da:	7829      	ldrb	r1, [r5, #0]
 80047dc:	f000 fa08 	bl	8004bf0 <memchr>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d006      	beq.n	80047f2 <_svfiprintf_r+0x14e>
 80047e4:	2340      	movs	r3, #64	; 0x40
 80047e6:	1b80      	subs	r0, r0, r6
 80047e8:	4083      	lsls	r3, r0
 80047ea:	6822      	ldr	r2, [r4, #0]
 80047ec:	3501      	adds	r5, #1
 80047ee:	4313      	orrs	r3, r2
 80047f0:	6023      	str	r3, [r4, #0]
 80047f2:	7829      	ldrb	r1, [r5, #0]
 80047f4:	2206      	movs	r2, #6
 80047f6:	4828      	ldr	r0, [pc, #160]	; (8004898 <_svfiprintf_r+0x1f4>)
 80047f8:	1c6e      	adds	r6, r5, #1
 80047fa:	7621      	strb	r1, [r4, #24]
 80047fc:	f000 f9f8 	bl	8004bf0 <memchr>
 8004800:	2800      	cmp	r0, #0
 8004802:	d03c      	beq.n	800487e <_svfiprintf_r+0x1da>
 8004804:	4b25      	ldr	r3, [pc, #148]	; (800489c <_svfiprintf_r+0x1f8>)
 8004806:	2b00      	cmp	r3, #0
 8004808:	d125      	bne.n	8004856 <_svfiprintf_r+0x1b2>
 800480a:	2207      	movs	r2, #7
 800480c:	9b07      	ldr	r3, [sp, #28]
 800480e:	3307      	adds	r3, #7
 8004810:	4393      	bics	r3, r2
 8004812:	3308      	adds	r3, #8
 8004814:	9307      	str	r3, [sp, #28]
 8004816:	6963      	ldr	r3, [r4, #20]
 8004818:	9a04      	ldr	r2, [sp, #16]
 800481a:	189b      	adds	r3, r3, r2
 800481c:	6163      	str	r3, [r4, #20]
 800481e:	e764      	b.n	80046ea <_svfiprintf_r+0x46>
 8004820:	4343      	muls	r3, r0
 8004822:	0035      	movs	r5, r6
 8004824:	2101      	movs	r1, #1
 8004826:	189b      	adds	r3, r3, r2
 8004828:	e7a6      	b.n	8004778 <_svfiprintf_r+0xd4>
 800482a:	2301      	movs	r3, #1
 800482c:	425b      	negs	r3, r3
 800482e:	e7d0      	b.n	80047d2 <_svfiprintf_r+0x12e>
 8004830:	2300      	movs	r3, #0
 8004832:	200a      	movs	r0, #10
 8004834:	001a      	movs	r2, r3
 8004836:	3501      	adds	r5, #1
 8004838:	6063      	str	r3, [r4, #4]
 800483a:	7829      	ldrb	r1, [r5, #0]
 800483c:	1c6e      	adds	r6, r5, #1
 800483e:	3930      	subs	r1, #48	; 0x30
 8004840:	2909      	cmp	r1, #9
 8004842:	d903      	bls.n	800484c <_svfiprintf_r+0x1a8>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0c5      	beq.n	80047d4 <_svfiprintf_r+0x130>
 8004848:	9209      	str	r2, [sp, #36]	; 0x24
 800484a:	e7c3      	b.n	80047d4 <_svfiprintf_r+0x130>
 800484c:	4342      	muls	r2, r0
 800484e:	0035      	movs	r5, r6
 8004850:	2301      	movs	r3, #1
 8004852:	1852      	adds	r2, r2, r1
 8004854:	e7f1      	b.n	800483a <_svfiprintf_r+0x196>
 8004856:	aa07      	add	r2, sp, #28
 8004858:	9200      	str	r2, [sp, #0]
 800485a:	0021      	movs	r1, r4
 800485c:	003a      	movs	r2, r7
 800485e:	4b10      	ldr	r3, [pc, #64]	; (80048a0 <_svfiprintf_r+0x1fc>)
 8004860:	9803      	ldr	r0, [sp, #12]
 8004862:	e000      	b.n	8004866 <_svfiprintf_r+0x1c2>
 8004864:	bf00      	nop
 8004866:	9004      	str	r0, [sp, #16]
 8004868:	9b04      	ldr	r3, [sp, #16]
 800486a:	3301      	adds	r3, #1
 800486c:	d1d3      	bne.n	8004816 <_svfiprintf_r+0x172>
 800486e:	89bb      	ldrh	r3, [r7, #12]
 8004870:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004872:	065b      	lsls	r3, r3, #25
 8004874:	d400      	bmi.n	8004878 <_svfiprintf_r+0x1d4>
 8004876:	e72c      	b.n	80046d2 <_svfiprintf_r+0x2e>
 8004878:	2001      	movs	r0, #1
 800487a:	4240      	negs	r0, r0
 800487c:	e729      	b.n	80046d2 <_svfiprintf_r+0x2e>
 800487e:	aa07      	add	r2, sp, #28
 8004880:	9200      	str	r2, [sp, #0]
 8004882:	0021      	movs	r1, r4
 8004884:	003a      	movs	r2, r7
 8004886:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <_svfiprintf_r+0x1fc>)
 8004888:	9803      	ldr	r0, [sp, #12]
 800488a:	f000 f87b 	bl	8004984 <_printf_i>
 800488e:	e7ea      	b.n	8004866 <_svfiprintf_r+0x1c2>
 8004890:	08004ce0 	.word	0x08004ce0
 8004894:	08004ce6 	.word	0x08004ce6
 8004898:	08004cea 	.word	0x08004cea
 800489c:	00000000 	.word	0x00000000
 80048a0:	080045e1 	.word	0x080045e1

080048a4 <_printf_common>:
 80048a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048a6:	0016      	movs	r6, r2
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	688a      	ldr	r2, [r1, #8]
 80048ac:	690b      	ldr	r3, [r1, #16]
 80048ae:	000c      	movs	r4, r1
 80048b0:	9000      	str	r0, [sp, #0]
 80048b2:	4293      	cmp	r3, r2
 80048b4:	da00      	bge.n	80048b8 <_printf_common+0x14>
 80048b6:	0013      	movs	r3, r2
 80048b8:	0022      	movs	r2, r4
 80048ba:	6033      	str	r3, [r6, #0]
 80048bc:	3243      	adds	r2, #67	; 0x43
 80048be:	7812      	ldrb	r2, [r2, #0]
 80048c0:	2a00      	cmp	r2, #0
 80048c2:	d001      	beq.n	80048c8 <_printf_common+0x24>
 80048c4:	3301      	adds	r3, #1
 80048c6:	6033      	str	r3, [r6, #0]
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	069b      	lsls	r3, r3, #26
 80048cc:	d502      	bpl.n	80048d4 <_printf_common+0x30>
 80048ce:	6833      	ldr	r3, [r6, #0]
 80048d0:	3302      	adds	r3, #2
 80048d2:	6033      	str	r3, [r6, #0]
 80048d4:	6822      	ldr	r2, [r4, #0]
 80048d6:	2306      	movs	r3, #6
 80048d8:	0015      	movs	r5, r2
 80048da:	401d      	ands	r5, r3
 80048dc:	421a      	tst	r2, r3
 80048de:	d027      	beq.n	8004930 <_printf_common+0x8c>
 80048e0:	0023      	movs	r3, r4
 80048e2:	3343      	adds	r3, #67	; 0x43
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	1e5a      	subs	r2, r3, #1
 80048e8:	4193      	sbcs	r3, r2
 80048ea:	6822      	ldr	r2, [r4, #0]
 80048ec:	0692      	lsls	r2, r2, #26
 80048ee:	d430      	bmi.n	8004952 <_printf_common+0xae>
 80048f0:	0022      	movs	r2, r4
 80048f2:	9901      	ldr	r1, [sp, #4]
 80048f4:	9800      	ldr	r0, [sp, #0]
 80048f6:	9d08      	ldr	r5, [sp, #32]
 80048f8:	3243      	adds	r2, #67	; 0x43
 80048fa:	47a8      	blx	r5
 80048fc:	3001      	adds	r0, #1
 80048fe:	d025      	beq.n	800494c <_printf_common+0xa8>
 8004900:	2206      	movs	r2, #6
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	2500      	movs	r5, #0
 8004906:	4013      	ands	r3, r2
 8004908:	2b04      	cmp	r3, #4
 800490a:	d105      	bne.n	8004918 <_printf_common+0x74>
 800490c:	6833      	ldr	r3, [r6, #0]
 800490e:	68e5      	ldr	r5, [r4, #12]
 8004910:	1aed      	subs	r5, r5, r3
 8004912:	43eb      	mvns	r3, r5
 8004914:	17db      	asrs	r3, r3, #31
 8004916:	401d      	ands	r5, r3
 8004918:	68a3      	ldr	r3, [r4, #8]
 800491a:	6922      	ldr	r2, [r4, #16]
 800491c:	4293      	cmp	r3, r2
 800491e:	dd01      	ble.n	8004924 <_printf_common+0x80>
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	18ed      	adds	r5, r5, r3
 8004924:	2600      	movs	r6, #0
 8004926:	42b5      	cmp	r5, r6
 8004928:	d120      	bne.n	800496c <_printf_common+0xc8>
 800492a:	2000      	movs	r0, #0
 800492c:	e010      	b.n	8004950 <_printf_common+0xac>
 800492e:	3501      	adds	r5, #1
 8004930:	68e3      	ldr	r3, [r4, #12]
 8004932:	6832      	ldr	r2, [r6, #0]
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	42ab      	cmp	r3, r5
 8004938:	ddd2      	ble.n	80048e0 <_printf_common+0x3c>
 800493a:	0022      	movs	r2, r4
 800493c:	2301      	movs	r3, #1
 800493e:	9901      	ldr	r1, [sp, #4]
 8004940:	9800      	ldr	r0, [sp, #0]
 8004942:	9f08      	ldr	r7, [sp, #32]
 8004944:	3219      	adds	r2, #25
 8004946:	47b8      	blx	r7
 8004948:	3001      	adds	r0, #1
 800494a:	d1f0      	bne.n	800492e <_printf_common+0x8a>
 800494c:	2001      	movs	r0, #1
 800494e:	4240      	negs	r0, r0
 8004950:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004952:	2030      	movs	r0, #48	; 0x30
 8004954:	18e1      	adds	r1, r4, r3
 8004956:	3143      	adds	r1, #67	; 0x43
 8004958:	7008      	strb	r0, [r1, #0]
 800495a:	0021      	movs	r1, r4
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	3145      	adds	r1, #69	; 0x45
 8004960:	7809      	ldrb	r1, [r1, #0]
 8004962:	18a2      	adds	r2, r4, r2
 8004964:	3243      	adds	r2, #67	; 0x43
 8004966:	3302      	adds	r3, #2
 8004968:	7011      	strb	r1, [r2, #0]
 800496a:	e7c1      	b.n	80048f0 <_printf_common+0x4c>
 800496c:	0022      	movs	r2, r4
 800496e:	2301      	movs	r3, #1
 8004970:	9901      	ldr	r1, [sp, #4]
 8004972:	9800      	ldr	r0, [sp, #0]
 8004974:	9f08      	ldr	r7, [sp, #32]
 8004976:	321a      	adds	r2, #26
 8004978:	47b8      	blx	r7
 800497a:	3001      	adds	r0, #1
 800497c:	d0e6      	beq.n	800494c <_printf_common+0xa8>
 800497e:	3601      	adds	r6, #1
 8004980:	e7d1      	b.n	8004926 <_printf_common+0x82>
	...

08004984 <_printf_i>:
 8004984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004986:	b08b      	sub	sp, #44	; 0x2c
 8004988:	9206      	str	r2, [sp, #24]
 800498a:	000a      	movs	r2, r1
 800498c:	3243      	adds	r2, #67	; 0x43
 800498e:	9307      	str	r3, [sp, #28]
 8004990:	9005      	str	r0, [sp, #20]
 8004992:	9204      	str	r2, [sp, #16]
 8004994:	7e0a      	ldrb	r2, [r1, #24]
 8004996:	000c      	movs	r4, r1
 8004998:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800499a:	2a78      	cmp	r2, #120	; 0x78
 800499c:	d809      	bhi.n	80049b2 <_printf_i+0x2e>
 800499e:	2a62      	cmp	r2, #98	; 0x62
 80049a0:	d80b      	bhi.n	80049ba <_printf_i+0x36>
 80049a2:	2a00      	cmp	r2, #0
 80049a4:	d100      	bne.n	80049a8 <_printf_i+0x24>
 80049a6:	e0be      	b.n	8004b26 <_printf_i+0x1a2>
 80049a8:	497c      	ldr	r1, [pc, #496]	; (8004b9c <_printf_i+0x218>)
 80049aa:	9103      	str	r1, [sp, #12]
 80049ac:	2a58      	cmp	r2, #88	; 0x58
 80049ae:	d100      	bne.n	80049b2 <_printf_i+0x2e>
 80049b0:	e093      	b.n	8004ada <_printf_i+0x156>
 80049b2:	0026      	movs	r6, r4
 80049b4:	3642      	adds	r6, #66	; 0x42
 80049b6:	7032      	strb	r2, [r6, #0]
 80049b8:	e022      	b.n	8004a00 <_printf_i+0x7c>
 80049ba:	0010      	movs	r0, r2
 80049bc:	3863      	subs	r0, #99	; 0x63
 80049be:	2815      	cmp	r0, #21
 80049c0:	d8f7      	bhi.n	80049b2 <_printf_i+0x2e>
 80049c2:	f7fb fba1 	bl	8000108 <__gnu_thumb1_case_shi>
 80049c6:	0016      	.short	0x0016
 80049c8:	fff6001f 	.word	0xfff6001f
 80049cc:	fff6fff6 	.word	0xfff6fff6
 80049d0:	001ffff6 	.word	0x001ffff6
 80049d4:	fff6fff6 	.word	0xfff6fff6
 80049d8:	fff6fff6 	.word	0xfff6fff6
 80049dc:	003600a3 	.word	0x003600a3
 80049e0:	fff60083 	.word	0xfff60083
 80049e4:	00b4fff6 	.word	0x00b4fff6
 80049e8:	0036fff6 	.word	0x0036fff6
 80049ec:	fff6fff6 	.word	0xfff6fff6
 80049f0:	0087      	.short	0x0087
 80049f2:	0026      	movs	r6, r4
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	3642      	adds	r6, #66	; 0x42
 80049f8:	1d11      	adds	r1, r2, #4
 80049fa:	6019      	str	r1, [r3, #0]
 80049fc:	6813      	ldr	r3, [r2, #0]
 80049fe:	7033      	strb	r3, [r6, #0]
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0a2      	b.n	8004b4a <_printf_i+0x1c6>
 8004a04:	6818      	ldr	r0, [r3, #0]
 8004a06:	6809      	ldr	r1, [r1, #0]
 8004a08:	1d02      	adds	r2, r0, #4
 8004a0a:	060d      	lsls	r5, r1, #24
 8004a0c:	d50b      	bpl.n	8004a26 <_printf_i+0xa2>
 8004a0e:	6805      	ldr	r5, [r0, #0]
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	2d00      	cmp	r5, #0
 8004a14:	da03      	bge.n	8004a1e <_printf_i+0x9a>
 8004a16:	232d      	movs	r3, #45	; 0x2d
 8004a18:	9a04      	ldr	r2, [sp, #16]
 8004a1a:	426d      	negs	r5, r5
 8004a1c:	7013      	strb	r3, [r2, #0]
 8004a1e:	4b5f      	ldr	r3, [pc, #380]	; (8004b9c <_printf_i+0x218>)
 8004a20:	270a      	movs	r7, #10
 8004a22:	9303      	str	r3, [sp, #12]
 8004a24:	e01b      	b.n	8004a5e <_printf_i+0xda>
 8004a26:	6805      	ldr	r5, [r0, #0]
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	0649      	lsls	r1, r1, #25
 8004a2c:	d5f1      	bpl.n	8004a12 <_printf_i+0x8e>
 8004a2e:	b22d      	sxth	r5, r5
 8004a30:	e7ef      	b.n	8004a12 <_printf_i+0x8e>
 8004a32:	680d      	ldr	r5, [r1, #0]
 8004a34:	6819      	ldr	r1, [r3, #0]
 8004a36:	1d08      	adds	r0, r1, #4
 8004a38:	6018      	str	r0, [r3, #0]
 8004a3a:	062e      	lsls	r6, r5, #24
 8004a3c:	d501      	bpl.n	8004a42 <_printf_i+0xbe>
 8004a3e:	680d      	ldr	r5, [r1, #0]
 8004a40:	e003      	b.n	8004a4a <_printf_i+0xc6>
 8004a42:	066d      	lsls	r5, r5, #25
 8004a44:	d5fb      	bpl.n	8004a3e <_printf_i+0xba>
 8004a46:	680d      	ldr	r5, [r1, #0]
 8004a48:	b2ad      	uxth	r5, r5
 8004a4a:	4b54      	ldr	r3, [pc, #336]	; (8004b9c <_printf_i+0x218>)
 8004a4c:	2708      	movs	r7, #8
 8004a4e:	9303      	str	r3, [sp, #12]
 8004a50:	2a6f      	cmp	r2, #111	; 0x6f
 8004a52:	d000      	beq.n	8004a56 <_printf_i+0xd2>
 8004a54:	3702      	adds	r7, #2
 8004a56:	0023      	movs	r3, r4
 8004a58:	2200      	movs	r2, #0
 8004a5a:	3343      	adds	r3, #67	; 0x43
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	6863      	ldr	r3, [r4, #4]
 8004a60:	60a3      	str	r3, [r4, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	db03      	blt.n	8004a6e <_printf_i+0xea>
 8004a66:	2104      	movs	r1, #4
 8004a68:	6822      	ldr	r2, [r4, #0]
 8004a6a:	438a      	bics	r2, r1
 8004a6c:	6022      	str	r2, [r4, #0]
 8004a6e:	2d00      	cmp	r5, #0
 8004a70:	d102      	bne.n	8004a78 <_printf_i+0xf4>
 8004a72:	9e04      	ldr	r6, [sp, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00c      	beq.n	8004a92 <_printf_i+0x10e>
 8004a78:	9e04      	ldr	r6, [sp, #16]
 8004a7a:	0028      	movs	r0, r5
 8004a7c:	0039      	movs	r1, r7
 8004a7e:	f7fb fbd3 	bl	8000228 <__aeabi_uidivmod>
 8004a82:	9b03      	ldr	r3, [sp, #12]
 8004a84:	3e01      	subs	r6, #1
 8004a86:	5c5b      	ldrb	r3, [r3, r1]
 8004a88:	7033      	strb	r3, [r6, #0]
 8004a8a:	002b      	movs	r3, r5
 8004a8c:	0005      	movs	r5, r0
 8004a8e:	429f      	cmp	r7, r3
 8004a90:	d9f3      	bls.n	8004a7a <_printf_i+0xf6>
 8004a92:	2f08      	cmp	r7, #8
 8004a94:	d109      	bne.n	8004aaa <_printf_i+0x126>
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	07db      	lsls	r3, r3, #31
 8004a9a:	d506      	bpl.n	8004aaa <_printf_i+0x126>
 8004a9c:	6862      	ldr	r2, [r4, #4]
 8004a9e:	6923      	ldr	r3, [r4, #16]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	dc02      	bgt.n	8004aaa <_printf_i+0x126>
 8004aa4:	2330      	movs	r3, #48	; 0x30
 8004aa6:	3e01      	subs	r6, #1
 8004aa8:	7033      	strb	r3, [r6, #0]
 8004aaa:	9b04      	ldr	r3, [sp, #16]
 8004aac:	1b9b      	subs	r3, r3, r6
 8004aae:	6123      	str	r3, [r4, #16]
 8004ab0:	9b07      	ldr	r3, [sp, #28]
 8004ab2:	0021      	movs	r1, r4
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	9805      	ldr	r0, [sp, #20]
 8004ab8:	9b06      	ldr	r3, [sp, #24]
 8004aba:	aa09      	add	r2, sp, #36	; 0x24
 8004abc:	f7ff fef2 	bl	80048a4 <_printf_common>
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d147      	bne.n	8004b54 <_printf_i+0x1d0>
 8004ac4:	2001      	movs	r0, #1
 8004ac6:	4240      	negs	r0, r0
 8004ac8:	b00b      	add	sp, #44	; 0x2c
 8004aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004acc:	2220      	movs	r2, #32
 8004ace:	6809      	ldr	r1, [r1, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	6022      	str	r2, [r4, #0]
 8004ad4:	2278      	movs	r2, #120	; 0x78
 8004ad6:	4932      	ldr	r1, [pc, #200]	; (8004ba0 <_printf_i+0x21c>)
 8004ad8:	9103      	str	r1, [sp, #12]
 8004ada:	0021      	movs	r1, r4
 8004adc:	3145      	adds	r1, #69	; 0x45
 8004ade:	700a      	strb	r2, [r1, #0]
 8004ae0:	6819      	ldr	r1, [r3, #0]
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	c920      	ldmia	r1!, {r5}
 8004ae6:	0610      	lsls	r0, r2, #24
 8004ae8:	d402      	bmi.n	8004af0 <_printf_i+0x16c>
 8004aea:	0650      	lsls	r0, r2, #25
 8004aec:	d500      	bpl.n	8004af0 <_printf_i+0x16c>
 8004aee:	b2ad      	uxth	r5, r5
 8004af0:	6019      	str	r1, [r3, #0]
 8004af2:	07d3      	lsls	r3, r2, #31
 8004af4:	d502      	bpl.n	8004afc <_printf_i+0x178>
 8004af6:	2320      	movs	r3, #32
 8004af8:	4313      	orrs	r3, r2
 8004afa:	6023      	str	r3, [r4, #0]
 8004afc:	2710      	movs	r7, #16
 8004afe:	2d00      	cmp	r5, #0
 8004b00:	d1a9      	bne.n	8004a56 <_printf_i+0xd2>
 8004b02:	2220      	movs	r2, #32
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	4393      	bics	r3, r2
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	e7a4      	b.n	8004a56 <_printf_i+0xd2>
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	680d      	ldr	r5, [r1, #0]
 8004b10:	1d10      	adds	r0, r2, #4
 8004b12:	6949      	ldr	r1, [r1, #20]
 8004b14:	6018      	str	r0, [r3, #0]
 8004b16:	6813      	ldr	r3, [r2, #0]
 8004b18:	062e      	lsls	r6, r5, #24
 8004b1a:	d501      	bpl.n	8004b20 <_printf_i+0x19c>
 8004b1c:	6019      	str	r1, [r3, #0]
 8004b1e:	e002      	b.n	8004b26 <_printf_i+0x1a2>
 8004b20:	066d      	lsls	r5, r5, #25
 8004b22:	d5fb      	bpl.n	8004b1c <_printf_i+0x198>
 8004b24:	8019      	strh	r1, [r3, #0]
 8004b26:	2300      	movs	r3, #0
 8004b28:	9e04      	ldr	r6, [sp, #16]
 8004b2a:	6123      	str	r3, [r4, #16]
 8004b2c:	e7c0      	b.n	8004ab0 <_printf_i+0x12c>
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	1d11      	adds	r1, r2, #4
 8004b32:	6019      	str	r1, [r3, #0]
 8004b34:	6816      	ldr	r6, [r2, #0]
 8004b36:	2100      	movs	r1, #0
 8004b38:	0030      	movs	r0, r6
 8004b3a:	6862      	ldr	r2, [r4, #4]
 8004b3c:	f000 f858 	bl	8004bf0 <memchr>
 8004b40:	2800      	cmp	r0, #0
 8004b42:	d001      	beq.n	8004b48 <_printf_i+0x1c4>
 8004b44:	1b80      	subs	r0, r0, r6
 8004b46:	6060      	str	r0, [r4, #4]
 8004b48:	6863      	ldr	r3, [r4, #4]
 8004b4a:	6123      	str	r3, [r4, #16]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	9a04      	ldr	r2, [sp, #16]
 8004b50:	7013      	strb	r3, [r2, #0]
 8004b52:	e7ad      	b.n	8004ab0 <_printf_i+0x12c>
 8004b54:	0032      	movs	r2, r6
 8004b56:	6923      	ldr	r3, [r4, #16]
 8004b58:	9906      	ldr	r1, [sp, #24]
 8004b5a:	9805      	ldr	r0, [sp, #20]
 8004b5c:	9d07      	ldr	r5, [sp, #28]
 8004b5e:	47a8      	blx	r5
 8004b60:	3001      	adds	r0, #1
 8004b62:	d0af      	beq.n	8004ac4 <_printf_i+0x140>
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	079b      	lsls	r3, r3, #30
 8004b68:	d415      	bmi.n	8004b96 <_printf_i+0x212>
 8004b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b6c:	68e0      	ldr	r0, [r4, #12]
 8004b6e:	4298      	cmp	r0, r3
 8004b70:	daaa      	bge.n	8004ac8 <_printf_i+0x144>
 8004b72:	0018      	movs	r0, r3
 8004b74:	e7a8      	b.n	8004ac8 <_printf_i+0x144>
 8004b76:	0022      	movs	r2, r4
 8004b78:	2301      	movs	r3, #1
 8004b7a:	9906      	ldr	r1, [sp, #24]
 8004b7c:	9805      	ldr	r0, [sp, #20]
 8004b7e:	9e07      	ldr	r6, [sp, #28]
 8004b80:	3219      	adds	r2, #25
 8004b82:	47b0      	blx	r6
 8004b84:	3001      	adds	r0, #1
 8004b86:	d09d      	beq.n	8004ac4 <_printf_i+0x140>
 8004b88:	3501      	adds	r5, #1
 8004b8a:	68e3      	ldr	r3, [r4, #12]
 8004b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	42ab      	cmp	r3, r5
 8004b92:	dcf0      	bgt.n	8004b76 <_printf_i+0x1f2>
 8004b94:	e7e9      	b.n	8004b6a <_printf_i+0x1e6>
 8004b96:	2500      	movs	r5, #0
 8004b98:	e7f7      	b.n	8004b8a <_printf_i+0x206>
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	08004cf1 	.word	0x08004cf1
 8004ba0:	08004d02 	.word	0x08004d02

08004ba4 <memmove>:
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	4288      	cmp	r0, r1
 8004ba8:	d902      	bls.n	8004bb0 <memmove+0xc>
 8004baa:	188b      	adds	r3, r1, r2
 8004bac:	4298      	cmp	r0, r3
 8004bae:	d303      	bcc.n	8004bb8 <memmove+0x14>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e007      	b.n	8004bc4 <memmove+0x20>
 8004bb4:	5c8b      	ldrb	r3, [r1, r2]
 8004bb6:	5483      	strb	r3, [r0, r2]
 8004bb8:	3a01      	subs	r2, #1
 8004bba:	d2fb      	bcs.n	8004bb4 <memmove+0x10>
 8004bbc:	bd10      	pop	{r4, pc}
 8004bbe:	5ccc      	ldrb	r4, [r1, r3]
 8004bc0:	54c4      	strb	r4, [r0, r3]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d1fa      	bne.n	8004bbe <memmove+0x1a>
 8004bc8:	e7f8      	b.n	8004bbc <memmove+0x18>
	...

08004bcc <_sbrk_r>:
 8004bcc:	2300      	movs	r3, #0
 8004bce:	b570      	push	{r4, r5, r6, lr}
 8004bd0:	4d06      	ldr	r5, [pc, #24]	; (8004bec <_sbrk_r+0x20>)
 8004bd2:	0004      	movs	r4, r0
 8004bd4:	0008      	movs	r0, r1
 8004bd6:	602b      	str	r3, [r5, #0]
 8004bd8:	f7fc fb46 	bl	8001268 <_sbrk>
 8004bdc:	1c43      	adds	r3, r0, #1
 8004bde:	d103      	bne.n	8004be8 <_sbrk_r+0x1c>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d000      	beq.n	8004be8 <_sbrk_r+0x1c>
 8004be6:	6023      	str	r3, [r4, #0]
 8004be8:	bd70      	pop	{r4, r5, r6, pc}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	2000041c 	.word	0x2000041c

08004bf0 <memchr>:
 8004bf0:	b2c9      	uxtb	r1, r1
 8004bf2:	1882      	adds	r2, r0, r2
 8004bf4:	4290      	cmp	r0, r2
 8004bf6:	d101      	bne.n	8004bfc <memchr+0xc>
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	4770      	bx	lr
 8004bfc:	7803      	ldrb	r3, [r0, #0]
 8004bfe:	428b      	cmp	r3, r1
 8004c00:	d0fb      	beq.n	8004bfa <memchr+0xa>
 8004c02:	3001      	adds	r0, #1
 8004c04:	e7f6      	b.n	8004bf4 <memchr+0x4>

08004c06 <memcpy>:
 8004c06:	2300      	movs	r3, #0
 8004c08:	b510      	push	{r4, lr}
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d100      	bne.n	8004c10 <memcpy+0xa>
 8004c0e:	bd10      	pop	{r4, pc}
 8004c10:	5ccc      	ldrb	r4, [r1, r3]
 8004c12:	54c4      	strb	r4, [r0, r3]
 8004c14:	3301      	adds	r3, #1
 8004c16:	e7f8      	b.n	8004c0a <memcpy+0x4>

08004c18 <_realloc_r>:
 8004c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c1a:	0007      	movs	r7, r0
 8004c1c:	000e      	movs	r6, r1
 8004c1e:	0014      	movs	r4, r2
 8004c20:	2900      	cmp	r1, #0
 8004c22:	d105      	bne.n	8004c30 <_realloc_r+0x18>
 8004c24:	0011      	movs	r1, r2
 8004c26:	f7ff fc49 	bl	80044bc <_malloc_r>
 8004c2a:	0005      	movs	r5, r0
 8004c2c:	0028      	movs	r0, r5
 8004c2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c30:	2a00      	cmp	r2, #0
 8004c32:	d103      	bne.n	8004c3c <_realloc_r+0x24>
 8004c34:	f7ff fbd6 	bl	80043e4 <_free_r>
 8004c38:	0025      	movs	r5, r4
 8004c3a:	e7f7      	b.n	8004c2c <_realloc_r+0x14>
 8004c3c:	f000 f81b 	bl	8004c76 <_malloc_usable_size_r>
 8004c40:	9001      	str	r0, [sp, #4]
 8004c42:	4284      	cmp	r4, r0
 8004c44:	d803      	bhi.n	8004c4e <_realloc_r+0x36>
 8004c46:	0035      	movs	r5, r6
 8004c48:	0843      	lsrs	r3, r0, #1
 8004c4a:	42a3      	cmp	r3, r4
 8004c4c:	d3ee      	bcc.n	8004c2c <_realloc_r+0x14>
 8004c4e:	0021      	movs	r1, r4
 8004c50:	0038      	movs	r0, r7
 8004c52:	f7ff fc33 	bl	80044bc <_malloc_r>
 8004c56:	1e05      	subs	r5, r0, #0
 8004c58:	d0e8      	beq.n	8004c2c <_realloc_r+0x14>
 8004c5a:	9b01      	ldr	r3, [sp, #4]
 8004c5c:	0022      	movs	r2, r4
 8004c5e:	429c      	cmp	r4, r3
 8004c60:	d900      	bls.n	8004c64 <_realloc_r+0x4c>
 8004c62:	001a      	movs	r2, r3
 8004c64:	0031      	movs	r1, r6
 8004c66:	0028      	movs	r0, r5
 8004c68:	f7ff ffcd 	bl	8004c06 <memcpy>
 8004c6c:	0031      	movs	r1, r6
 8004c6e:	0038      	movs	r0, r7
 8004c70:	f7ff fbb8 	bl	80043e4 <_free_r>
 8004c74:	e7da      	b.n	8004c2c <_realloc_r+0x14>

08004c76 <_malloc_usable_size_r>:
 8004c76:	1f0b      	subs	r3, r1, #4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	1f18      	subs	r0, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	da01      	bge.n	8004c84 <_malloc_usable_size_r+0xe>
 8004c80:	580b      	ldr	r3, [r1, r0]
 8004c82:	18c0      	adds	r0, r0, r3
 8004c84:	4770      	bx	lr
	...

08004c88 <_init>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8e:	bc08      	pop	{r3}
 8004c90:	469e      	mov	lr, r3
 8004c92:	4770      	bx	lr

08004c94 <_fini>:
 8004c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9a:	bc08      	pop	{r3}
 8004c9c:	469e      	mov	lr, r3
 8004c9e:	4770      	bx	lr
