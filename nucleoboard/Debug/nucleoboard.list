
nucleoboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004358  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004418  08004418  00014418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800448c  0800448c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800448c  0800448c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800448c  0800448c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800448c  0800448c  0001448c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004490  08004490  00014490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000060  080044f0  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  080044f0  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d0d9  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e5b  00000000  00000000  0002d1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  0002f000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b7  00000000  00000000  0002fc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a0c4  00000000  00000000  0003060f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebeb  00000000  00000000  0004a6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098c0f  00000000  00000000  000592be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000310c  00000000  00000000  000f1ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000f4fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004400 	.word	0x08004400

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08004400 	.word	0x08004400

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <update_encoder>:
 *      Author: Ashli Forbes
 */
#include "encoder_handler.h"

void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim)
{
 8000408:	b5b0      	push	{r4, r5, r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	6039      	str	r1, [r7, #0]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000418:	60fb      	str	r3, [r7, #12]
	if(!encoder_value->first_time)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	b25b      	sxtb	r3, r3
 8000420:	2b00      	cmp	r3, #0
 8000422:	d103      	bne.n	800042c <update_encoder+0x24>
	{
		encoder_value->first_time = 1;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	701a      	strb	r2, [r3, #0]
 800042a:	e052      	b.n	80004d2 <update_encoder+0xca>
	}
	else
	{
	  if(temp_counter == encoder_value->last_counter_value)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	691b      	ldr	r3, [r3, #16]
 8000430:	68fa      	ldr	r2, [r7, #12]
 8000432:	429a      	cmp	r2, r3
 8000434:	d103      	bne.n	800043e <update_encoder+0x36>
	  {
	    encoder_value->delta_position = 0;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2200      	movs	r2, #0
 800043a:	805a      	strh	r2, [r3, #2]
 800043c:	e049      	b.n	80004d2 <update_encoder+0xca>
	  }
	  else if(temp_counter > encoder_value->last_counter_value)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	691b      	ldr	r3, [r3, #16]
 8000442:	68fa      	ldr	r2, [r7, #12]
 8000444:	429a      	cmp	r2, r3
 8000446:	d922      	bls.n	800048e <update_encoder+0x86>
	  {
	    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	2210      	movs	r2, #16
 8000450:	4013      	ands	r3, r2
 8000452:	2b10      	cmp	r3, #16
 8000454:	d110      	bne.n	8000478 <update_encoder+0x70>
	    {
	      encoder_value->delta_position = -encoder_value->last_counter_value -
		(__HAL_TIM_GET_AUTORELOAD(htim)-temp_counter);
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	b29a      	uxth	r2, r3
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000460:	b29b      	uxth	r3, r3
 8000462:	1ad3      	subs	r3, r2, r3
 8000464:	b29a      	uxth	r2, r3
	      encoder_value->delta_position = -encoder_value->last_counter_value -
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	691b      	ldr	r3, [r3, #16]
 800046a:	b29b      	uxth	r3, r3
 800046c:	1ad3      	subs	r3, r2, r3
 800046e:	b29b      	uxth	r3, r3
 8000470:	b21a      	sxth	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	805a      	strh	r2, [r3, #2]
 8000476:	e02c      	b.n	80004d2 <update_encoder+0xca>
	    }
	    else
	    {
	      encoder_value->delta_position = temp_counter -
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	b29a      	uxth	r2, r3
	           encoder_value->last_counter_value;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	691b      	ldr	r3, [r3, #16]
	      encoder_value->delta_position = temp_counter -
 8000480:	b29b      	uxth	r3, r3
 8000482:	1ad3      	subs	r3, r2, r3
 8000484:	b29b      	uxth	r3, r3
 8000486:	b21a      	sxth	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	805a      	strh	r2, [r3, #2]
 800048c:	e021      	b.n	80004d2 <update_encoder+0xca>
	    }
	  }
	  else
	  {
	    if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2210      	movs	r2, #16
 8000496:	4013      	ands	r3, r2
 8000498:	2b10      	cmp	r3, #16
 800049a:	d10a      	bne.n	80004b2 <update_encoder+0xaa>
	    {
		encoder_value->delta_position = temp_counter -
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	b29a      	uxth	r2, r3
	            encoder_value->last_counter_value;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	691b      	ldr	r3, [r3, #16]
		encoder_value->delta_position = temp_counter -
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	1ad3      	subs	r3, r2, r3
 80004a8:	b29b      	uxth	r3, r3
 80004aa:	b21a      	sxth	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	805a      	strh	r2, [r3, #2]
 80004b0:	e00f      	b.n	80004d2 <update_encoder+0xca>
	    }
	    else
	    {
		encoder_value->delta_position = temp_counter +
		(__HAL_TIM_GET_AUTORELOAD(htim) -
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004b8:	b29a      	uxth	r2, r3
	              encoder_value->last_counter_value);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	691b      	ldr	r3, [r3, #16]
		(__HAL_TIM_GET_AUTORELOAD(htim) -
 80004be:	b29b      	uxth	r3, r3
 80004c0:	1ad3      	subs	r3, r2, r3
 80004c2:	b29a      	uxth	r2, r3
		encoder_value->delta_position = temp_counter +
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	18d3      	adds	r3, r2, r3
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	b21a      	sxth	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	805a      	strh	r2, [r3, #2]
	    }
	   }
	}
	encoder_value->position += encoder_value ->delta_position;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	689a      	ldr	r2, [r3, #8]
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	6879      	ldr	r1, [r7, #4]
 80004da:	2002      	movs	r0, #2
 80004dc:	5e09      	ldrsh	r1, [r1, r0]
 80004de:	000c      	movs	r4, r1
 80004e0:	17c9      	asrs	r1, r1, #31
 80004e2:	000d      	movs	r5, r1
 80004e4:	1912      	adds	r2, r2, r4
 80004e6:	416b      	adcs	r3, r5
 80004e8:	6879      	ldr	r1, [r7, #4]
 80004ea:	608a      	str	r2, [r1, #8]
 80004ec:	60cb      	str	r3, [r1, #12]
	encoder_value->last_counter_value = temp_counter;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	68fa      	ldr	r2, [r7, #12]
 80004f2:	611a      	str	r2, [r3, #16]
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b004      	add	sp, #16
 80004fa:	bdb0      	pop	{r4, r5, r7, pc}

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	b087      	sub	sp, #28
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f000 fc39 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f8a3 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 fa1b 	bl	8000944 <MX_GPIO_Init>
  MX_DMA_Init();
 800050e:	f000 f9fb 	bl	8000908 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000512:	f000 f9c9 	bl	80008a8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000516:	f000 f8fd 	bl	8000714 <MX_TIM2_Init>
  MX_TIM3_Init();
 800051a:	f000 f963 	bl	80007e4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uint8_t message[DATA_LENGTH] = {'\0'};
 800051e:	230c      	movs	r3, #12
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	3304      	adds	r3, #4
 8000528:	2203      	movs	r2, #3
 800052a:	2100      	movs	r1, #0
 800052c:	0018      	movs	r0, r3
 800052e:	f003 fae1 	bl	8003af4 <memset>
  uint8_t RxData[DATA_LENGTH];
  int32_t dutyCycle = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dutyCycle = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
	  // measure velocity, position
	  update_encoder(&enc_instance, &htim2);
 800053a:	4a3f      	ldr	r2, [pc, #252]	; (8000638 <main+0x13c>)
 800053c:	4b3f      	ldr	r3, [pc, #252]	; (800063c <main+0x140>)
 800053e:	0011      	movs	r1, r2
 8000540:	0018      	movs	r0, r3
 8000542:	f7ff ff61 	bl	8000408 <update_encoder>
	  encoder_delta_position = enc_instance.delta_position;
 8000546:	4b3d      	ldr	r3, [pc, #244]	; (800063c <main+0x140>)
 8000548:	2202      	movs	r2, #2
 800054a:	5e9b      	ldrsh	r3, [r3, r2]
 800054c:	001c      	movs	r4, r3
 800054e:	17db      	asrs	r3, r3, #31
 8000550:	001d      	movs	r5, r3
 8000552:	4b3b      	ldr	r3, [pc, #236]	; (8000640 <main+0x144>)
 8000554:	601c      	str	r4, [r3, #0]
 8000556:	605d      	str	r5, [r3, #4]
	//  encoder_delta_position = _HAL_TIM_GET_COUNTER(&htim2);
	  sprintf(message, "%d\r\n", encoder_delta_position); //add detailed message
 8000558:	4b39      	ldr	r3, [pc, #228]	; (8000640 <main+0x144>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	4939      	ldr	r1, [pc, #228]	; (8000644 <main+0x148>)
 8000560:	260c      	movs	r6, #12
 8000562:	19b8      	adds	r0, r7, r6
 8000564:	f003 faa6 	bl	8003ab4 <siprintf>
	  HAL_UART_Transmit(&huart1, message, sizeof(message), UART_TIMEOUT);
 8000568:	19b9      	adds	r1, r7, r6
 800056a:	4837      	ldr	r0, [pc, #220]	; (8000648 <main+0x14c>)
 800056c:	2364      	movs	r3, #100	; 0x64
 800056e:	2207      	movs	r2, #7
 8000570:	f002 fc16 	bl	8002da0 <HAL_UART_Transmit>
	  HAL_UART_Receive_DMA(&huart1, RxData, sizeof(RxData));
 8000574:	1d39      	adds	r1, r7, #4
 8000576:	4b34      	ldr	r3, [pc, #208]	; (8000648 <main+0x14c>)
 8000578:	2207      	movs	r2, #7
 800057a:	0018      	movs	r0, r3
 800057c:	f002 fcb0 	bl	8002ee0 <HAL_UART_Receive_DMA>

	  //check for negative PWM
 	  if(RxData[0]== '-')
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b2d      	cmp	r3, #45	; 0x2d
 8000586:	d107      	bne.n	8000598 <main+0x9c>
 	  {
 		 HAL_GPIO_WritePin(MotoDir_GPIO_Port , MotoDir_Pin, GPIO_PIN_RESET);
 8000588:	2390      	movs	r3, #144	; 0x90
 800058a:	05db      	lsls	r3, r3, #23
 800058c:	2200      	movs	r2, #0
 800058e:	2120      	movs	r1, #32
 8000590:	0018      	movs	r0, r3
 8000592:	f001 f843 	bl	800161c <HAL_GPIO_WritePin>
 8000596:	e006      	b.n	80005a6 <main+0xaa>
 	  }
 	  else
 	  {
 		 HAL_GPIO_WritePin(MotoDir_GPIO_Port , MotoDir_Pin, GPIO_PIN_SET);
 8000598:	2390      	movs	r3, #144	; 0x90
 800059a:	05db      	lsls	r3, r3, #23
 800059c:	2201      	movs	r2, #1
 800059e:	2120      	movs	r1, #32
 80005a0:	0018      	movs	r0, r3
 80005a2:	f001 f83b 	bl	800161c <HAL_GPIO_WritePin>
 	  }

	  for(uint8_t i = 0; RxData[i] != '\t' && i< sizeof(RxData); i++)
 80005a6:	2313      	movs	r3, #19
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	e01b      	b.n	80005e8 <main+0xec>
	   {
		  if(RxData[i]== '-')
 80005b0:	2013      	movs	r0, #19
 80005b2:	183b      	adds	r3, r7, r0
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	1d3a      	adds	r2, r7, #4
 80005b8:	5cd3      	ldrb	r3, [r2, r3]
 80005ba:	2b2d      	cmp	r3, #45	; 0x2d
 80005bc:	d00d      	beq.n	80005da <main+0xde>
			  continue;
		  }
		  else
		  {
			  //change values from string to integer value
			  dutyCycle = dutyCycle*10 + (RxData[i] - '0');
 80005be:	697a      	ldr	r2, [r7, #20]
 80005c0:	0013      	movs	r3, r2
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	189b      	adds	r3, r3, r2
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	0019      	movs	r1, r3
 80005ca:	183b      	adds	r3, r7, r0
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	1d3a      	adds	r2, r7, #4
 80005d0:	5cd3      	ldrb	r3, [r2, r3]
 80005d2:	3b30      	subs	r3, #48	; 0x30
 80005d4:	18cb      	adds	r3, r1, r3
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	e000      	b.n	80005dc <main+0xe0>
			  continue;
 80005da:	46c0      	nop			; (mov r8, r8)
	  for(uint8_t i = 0; RxData[i] != '\t' && i< sizeof(RxData); i++)
 80005dc:	2113      	movs	r1, #19
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	781a      	ldrb	r2, [r3, #0]
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	3201      	adds	r2, #1
 80005e6:	701a      	strb	r2, [r3, #0]
 80005e8:	2113      	movs	r1, #19
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	1d3a      	adds	r2, r7, #4
 80005f0:	5cd3      	ldrb	r3, [r2, r3]
 80005f2:	2b09      	cmp	r3, #9
 80005f4:	d003      	beq.n	80005fe <main+0x102>
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b06      	cmp	r3, #6
 80005fc:	d9d8      	bls.n	80005b0 <main+0xb4>
		  }
	   }

	  dutyCycle = abs(dutyCycle);
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	17da      	asrs	r2, r3, #31
 8000602:	189b      	adds	r3, r3, r2
 8000604:	4053      	eors	r3, r2
 8000606:	617b      	str	r3, [r7, #20]

	  //push PWM value
	  if(dutyCycle < DUTYCYCLE_MAX)
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	23fa      	movs	r3, #250	; 0xfa
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	429a      	cmp	r2, r3
 8000610:	da0e      	bge.n	8000630 <main+0x134>
	  {
		  dutyCycle = dutyCycle*DUTYCYCLE_SCALER;
 8000612:	697a      	ldr	r2, [r7, #20]
 8000614:	0013      	movs	r3, r2
 8000616:	041b      	lsls	r3, r3, #16
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	22fa      	movs	r2, #250	; 0xfa
 800061c:	0091      	lsls	r1, r2, #2
 800061e:	0018      	movs	r0, r3
 8000620:	f7ff fe06 	bl	8000230 <__divsi3>
 8000624:	0003      	movs	r3, r0
 8000626:	617b      	str	r3, [r7, #20]
		  TIM3->CCR1 = dutyCycle;
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <main+0x150>)
 800062a:	697a      	ldr	r2, [r7, #20]
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
 800062e:	e782      	b.n	8000536 <main+0x3a>
	  }
	  else
	  {
		  TIM3->CCR1 = 0;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <main+0x150>)
 8000632:	2200      	movs	r2, #0
 8000634:	635a      	str	r2, [r3, #52]	; 0x34
	  dutyCycle = 0;
 8000636:	e77e      	b.n	8000536 <main+0x3a>
 8000638:	2000007c 	.word	0x2000007c
 800063c:	200001e0 	.word	0x200001e0
 8000640:	200001d8 	.word	0x200001d8
 8000644:	08004418 	.word	0x08004418
 8000648:	2000010c 	.word	0x2000010c
 800064c:	40000400 	.word	0x40000400

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b590      	push	{r4, r7, lr}
 8000652:	b099      	sub	sp, #100	; 0x64
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	242c      	movs	r4, #44	; 0x2c
 8000658:	193b      	adds	r3, r7, r4
 800065a:	0018      	movs	r0, r3
 800065c:	2334      	movs	r3, #52	; 0x34
 800065e:	001a      	movs	r2, r3
 8000660:	2100      	movs	r1, #0
 8000662:	f003 fa47 	bl	8003af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000666:	231c      	movs	r3, #28
 8000668:	18fb      	adds	r3, r7, r3
 800066a:	0018      	movs	r0, r3
 800066c:	2310      	movs	r3, #16
 800066e:	001a      	movs	r2, r3
 8000670:	2100      	movs	r1, #0
 8000672:	f003 fa3f 	bl	8003af4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000676:	003b      	movs	r3, r7
 8000678:	0018      	movs	r0, r3
 800067a:	231c      	movs	r3, #28
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f003 fa38 	bl	8003af4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	0021      	movs	r1, r4
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2202      	movs	r2, #2
 800068a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2201      	movs	r2, #1
 8000690:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2210      	movs	r2, #16
 8000696:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2202      	movs	r2, #2
 800069c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	0212      	lsls	r2, r2, #8
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	22a0      	movs	r2, #160	; 0xa0
 80006aa:	0392      	lsls	r2, r2, #14
 80006ac:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2201      	movs	r2, #1
 80006b2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 ffce 	bl	8001658 <HAL_RCC_OscConfig>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006c0:	f000 f988 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	211c      	movs	r1, #28
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2207      	movs	r2, #7
 80006ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2202      	movs	r2, #2
 80006d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2101      	movs	r1, #1
 80006e2:	0018      	movs	r0, r3
 80006e4:	f001 fb3e 	bl	8001d64 <HAL_RCC_ClockConfig>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006ec:	f000 f972 	bl	80009d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80006f0:	003b      	movs	r3, r7
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006f6:	003b      	movs	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fc:	003b      	movs	r3, r7
 80006fe:	0018      	movs	r0, r3
 8000700:	f001 fc9c 	bl	800203c <HAL_RCCEx_PeriphCLKConfig>
 8000704:	1e03      	subs	r3, r0, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000708:	f000 f964 	bl	80009d4 <Error_Handler>
  }
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	b019      	add	sp, #100	; 0x64
 8000712:	bd90      	pop	{r4, r7, pc}

08000714 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b08d      	sub	sp, #52	; 0x34
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800071a:	240c      	movs	r4, #12
 800071c:	193b      	adds	r3, r7, r4
 800071e:	0018      	movs	r0, r3
 8000720:	2324      	movs	r3, #36	; 0x24
 8000722:	001a      	movs	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	f003 f9e5 	bl	8003af4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	0018      	movs	r0, r3
 800072e:	2308      	movs	r3, #8
 8000730:	001a      	movs	r2, r3
 8000732:	2100      	movs	r1, #0
 8000734:	f003 f9de 	bl	8003af4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000738:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <MX_TIM2_Init+0xcc>)
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	05d2      	lsls	r2, r2, #23
 800073e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000740:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <MX_TIM2_Init+0xcc>)
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000746:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <MX_TIM2_Init+0xcc>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <MX_TIM2_Init+0xcc>)
 800074e:	2201      	movs	r2, #1
 8000750:	4252      	negs	r2, r2
 8000752:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_TIM2_Init+0xcc>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <MX_TIM2_Init+0xcc>)
 800075c:	2280      	movs	r2, #128	; 0x80
 800075e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000760:	0021      	movs	r1, r4
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2201      	movs	r2, #1
 8000766:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2201      	movs	r2, #1
 8000772:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 10;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	220a      	movs	r2, #10
 800077e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2201      	movs	r2, #1
 800078a:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000798:	187a      	adds	r2, r7, r1
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_TIM2_Init+0xcc>)
 800079c:	0011      	movs	r1, r2
 800079e:	0018      	movs	r0, r3
 80007a0:	f001 fd9a 	bl	80022d8 <HAL_TIM_Encoder_Init>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80007a8:	f000 f914 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b8:	1d3a      	adds	r2, r7, #4
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_TIM2_Init+0xcc>)
 80007bc:	0011      	movs	r1, r2
 80007be:	0018      	movs	r0, r3
 80007c0:	f002 fa3c 	bl	8002c3c <HAL_TIMEx_MasterConfigSynchronization>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80007c8:	f000 f904 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <MX_TIM2_Init+0xcc>)
 80007ce:	213c      	movs	r1, #60	; 0x3c
 80007d0:	0018      	movs	r0, r3
 80007d2:	f001 fe29 	bl	8002428 <HAL_TIM_Encoder_Start>
  /* USER CODE END TIM2_Init 2 */

}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b00d      	add	sp, #52	; 0x34
 80007dc:	bd90      	pop	{r4, r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	2000007c 	.word	0x2000007c

080007e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ea:	2320      	movs	r3, #32
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	0018      	movs	r0, r3
 80007f0:	2308      	movs	r3, #8
 80007f2:	001a      	movs	r2, r3
 80007f4:	2100      	movs	r1, #0
 80007f6:	f003 f97d 	bl	8003af4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	0018      	movs	r0, r3
 80007fe:	231c      	movs	r3, #28
 8000800:	001a      	movs	r2, r3
 8000802:	2100      	movs	r1, #0
 8000804:	f003 f976 	bl	8003af4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000808:	4b24      	ldr	r3, [pc, #144]	; (800089c <MX_TIM3_Init+0xb8>)
 800080a:	4a25      	ldr	r2, [pc, #148]	; (80008a0 <MX_TIM3_Init+0xbc>)
 800080c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800080e:	4b23      	ldr	r3, [pc, #140]	; (800089c <MX_TIM3_Init+0xb8>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000814:	4b21      	ldr	r3, [pc, #132]	; (800089c <MX_TIM3_Init+0xb8>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800081a:	4b20      	ldr	r3, [pc, #128]	; (800089c <MX_TIM3_Init+0xb8>)
 800081c:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <MX_TIM3_Init+0xc0>)
 800081e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <MX_TIM3_Init+0xb8>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <MX_TIM3_Init+0xb8>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_TIM3_Init+0xb8>)
 800082e:	0018      	movs	r0, r3
 8000830:	f001 fd02 	bl	8002238 <HAL_TIM_PWM_Init>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000838:	f000 f8cc 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083c:	2120      	movs	r1, #32
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800084a:	187a      	adds	r2, r7, r1
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_TIM3_Init+0xb8>)
 800084e:	0011      	movs	r1, r2
 8000850:	0018      	movs	r0, r3
 8000852:	f002 f9f3 	bl	8002c3c <HAL_TIMEx_MasterConfigSynchronization>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800085a:	f000 f8bb 	bl	80009d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2260      	movs	r2, #96	; 0x60
 8000862:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000876:	1d39      	adds	r1, r7, #4
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_TIM3_Init+0xb8>)
 800087a:	2200      	movs	r2, #0
 800087c:	0018      	movs	r0, r3
 800087e:	f001 fe77 	bl	8002570 <HAL_TIM_PWM_ConfigChannel>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000886:	f000 f8a5 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800088a:	4b04      	ldr	r3, [pc, #16]	; (800089c <MX_TIM3_Init+0xb8>)
 800088c:	0018      	movs	r0, r3
 800088e:	f000 f933 	bl	8000af8 <HAL_TIM_MspPostInit>

}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b00a      	add	sp, #40	; 0x28
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	200000c4 	.word	0x200000c4
 80008a0:	40000400 	.word	0x40000400
 80008a4:	0000ffff 	.word	0x0000ffff

080008a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008ae:	4a15      	ldr	r2, [pc, #84]	; (8000904 <MX_USART1_UART_Init+0x5c>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008b4:	22e1      	movs	r2, #225	; 0xe1
 80008b6:	0252      	lsls	r2, r2, #9
 80008b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ea:	4b05      	ldr	r3, [pc, #20]	; (8000900 <MX_USART1_UART_Init+0x58>)
 80008ec:	0018      	movs	r0, r3
 80008ee:	f002 fa03 	bl	8002cf8 <HAL_UART_Init>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008f6:	f000 f86d 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	2000010c 	.word	0x2000010c
 8000904:	40013800 	.word	0x40013800

08000908 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_DMA_Init+0x38>)
 8000910:	695a      	ldr	r2, [r3, #20]
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_DMA_Init+0x38>)
 8000914:	2101      	movs	r1, #1
 8000916:	430a      	orrs	r2, r1
 8000918:	615a      	str	r2, [r3, #20]
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_DMA_Init+0x38>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	2201      	movs	r2, #1
 8000920:	4013      	ands	r3, r2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	200a      	movs	r0, #10
 800092c:	f000 fb34 	bl	8000f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000930:	200a      	movs	r0, #10
 8000932:	f000 fb46 	bl	8000fc2 <HAL_NVIC_EnableIRQ>

}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b002      	add	sp, #8
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	40021000 	.word	0x40021000

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b089      	sub	sp, #36	; 0x24
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	240c      	movs	r4, #12
 800094c:	193b      	adds	r3, r7, r4
 800094e:	0018      	movs	r0, r3
 8000950:	2314      	movs	r3, #20
 8000952:	001a      	movs	r2, r3
 8000954:	2100      	movs	r1, #0
 8000956:	f003 f8cd 	bl	8003af4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800095a:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <MX_GPIO_Init+0x8c>)
 800095c:	695a      	ldr	r2, [r3, #20]
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <MX_GPIO_Init+0x8c>)
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	03c9      	lsls	r1, r1, #15
 8000964:	430a      	orrs	r2, r1
 8000966:	615a      	str	r2, [r3, #20]
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_GPIO_Init+0x8c>)
 800096a:	695a      	ldr	r2, [r3, #20]
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	03db      	lsls	r3, r3, #15
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_GPIO_Init+0x8c>)
 8000978:	695a      	ldr	r2, [r3, #20]
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_GPIO_Init+0x8c>)
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	0289      	lsls	r1, r1, #10
 8000980:	430a      	orrs	r2, r1
 8000982:	615a      	str	r2, [r3, #20]
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_GPIO_Init+0x8c>)
 8000986:	695a      	ldr	r2, [r3, #20]
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	029b      	lsls	r3, r3, #10
 800098c:	4013      	ands	r3, r2
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MotoDir_GPIO_Port, MotoDir_Pin, GPIO_PIN_RESET);
 8000992:	2390      	movs	r3, #144	; 0x90
 8000994:	05db      	lsls	r3, r3, #23
 8000996:	2200      	movs	r2, #0
 8000998:	2120      	movs	r1, #32
 800099a:	0018      	movs	r0, r3
 800099c:	f000 fe3e 	bl	800161c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MotoDir_Pin */
  GPIO_InitStruct.Pin = MotoDir_Pin;
 80009a0:	0021      	movs	r1, r4
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2220      	movs	r2, #32
 80009a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2201      	movs	r2, #1
 80009ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MotoDir_GPIO_Port, &GPIO_InitStruct);
 80009ba:	187a      	adds	r2, r7, r1
 80009bc:	2390      	movs	r3, #144	; 0x90
 80009be:	05db      	lsls	r3, r3, #23
 80009c0:	0011      	movs	r1, r2
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 fcb2 	bl	800132c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b009      	add	sp, #36	; 0x24
 80009ce:	bd90      	pop	{r4, r7, pc}
 80009d0:	40021000 	.word	0x40021000

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <HAL_MspInit+0x44>)
 80009e8:	699a      	ldr	r2, [r3, #24]
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_MspInit+0x44>)
 80009ec:	2101      	movs	r1, #1
 80009ee:	430a      	orrs	r2, r1
 80009f0:	619a      	str	r2, [r3, #24]
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <HAL_MspInit+0x44>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	2201      	movs	r2, #1
 80009f8:	4013      	ands	r3, r2
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_MspInit+0x44>)
 8000a00:	69da      	ldr	r2, [r3, #28]
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_MspInit+0x44>)
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	0549      	lsls	r1, r1, #21
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	61da      	str	r2, [r3, #28]
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_MspInit+0x44>)
 8000a0e:	69da      	ldr	r2, [r3, #28]
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	055b      	lsls	r3, r3, #21
 8000a14:	4013      	ands	r3, r2
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b002      	add	sp, #8
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	40021000 	.word	0x40021000

08000a28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b08b      	sub	sp, #44	; 0x2c
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	2414      	movs	r4, #20
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	0018      	movs	r0, r3
 8000a36:	2314      	movs	r3, #20
 8000a38:	001a      	movs	r2, r3
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f003 f85a 	bl	8003af4 <memset>
  if(htim_encoder->Instance==TIM2)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	05db      	lsls	r3, r3, #23
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d130      	bne.n	8000aae <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <HAL_TIM_Encoder_MspInit+0x90>)
 8000a4e:	69da      	ldr	r2, [r3, #28]
 8000a50:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <HAL_TIM_Encoder_MspInit+0x90>)
 8000a52:	2101      	movs	r1, #1
 8000a54:	430a      	orrs	r2, r1
 8000a56:	61da      	str	r2, [r3, #28]
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <HAL_TIM_Encoder_MspInit+0x90>)
 8000a5a:	69db      	ldr	r3, [r3, #28]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4013      	ands	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <HAL_TIM_Encoder_MspInit+0x90>)
 8000a66:	695a      	ldr	r2, [r3, #20]
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <HAL_TIM_Encoder_MspInit+0x90>)
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	0289      	lsls	r1, r1, #10
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_TIM_Encoder_MspInit+0x90>)
 8000a74:	695a      	ldr	r2, [r3, #20]
 8000a76:	2380      	movs	r3, #128	; 0x80
 8000a78:	029b      	lsls	r3, r3, #10
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a80:	0021      	movs	r1, r4
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2203      	movs	r2, #3
 8000a86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2201      	movs	r2, #1
 8000a92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	187a      	adds	r2, r7, r1
 8000aa2:	2390      	movs	r3, #144	; 0x90
 8000aa4:	05db      	lsls	r3, r3, #23
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f000 fc3f 	bl	800132c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b00b      	add	sp, #44	; 0x2c
 8000ab4:	bd90      	pop	{r4, r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <HAL_TIM_PWM_MspInit+0x34>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d10b      	bne.n	8000ae6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_TIM_PWM_MspInit+0x38>)
 8000ad0:	69da      	ldr	r2, [r3, #28]
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_TIM_PWM_MspInit+0x38>)
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	61da      	str	r2, [r3, #28]
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_TIM_PWM_MspInit+0x38>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	2202      	movs	r2, #2
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b004      	add	sp, #16
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	40000400 	.word	0x40000400
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b089      	sub	sp, #36	; 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	240c      	movs	r4, #12
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	0018      	movs	r0, r3
 8000b06:	2314      	movs	r3, #20
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f002 fff2 	bl	8003af4 <memset>
  if(htim->Instance==TIM3)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a15      	ldr	r2, [pc, #84]	; (8000b6c <HAL_TIM_MspPostInit+0x74>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d124      	bne.n	8000b64 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_TIM_MspPostInit+0x78>)
 8000b1c:	695a      	ldr	r2, [r3, #20]
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_TIM_MspPostInit+0x78>)
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	0289      	lsls	r1, r1, #10
 8000b24:	430a      	orrs	r2, r1
 8000b26:	615a      	str	r2, [r3, #20]
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <HAL_TIM_MspPostInit+0x78>)
 8000b2a:	695a      	ldr	r2, [r3, #20]
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	029b      	lsls	r3, r3, #10
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWMOut_Pin;
 8000b36:	0021      	movs	r1, r4
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2240      	movs	r2, #64	; 0x40
 8000b3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2202      	movs	r2, #2
 8000b42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	2201      	movs	r2, #1
 8000b54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWMOut_GPIO_Port, &GPIO_InitStruct);
 8000b56:	187a      	adds	r2, r7, r1
 8000b58:	2390      	movs	r3, #144	; 0x90
 8000b5a:	05db      	lsls	r3, r3, #23
 8000b5c:	0011      	movs	r1, r2
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 fbe4 	bl	800132c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b009      	add	sp, #36	; 0x24
 8000b6a:	bd90      	pop	{r4, r7, pc}
 8000b6c:	40000400 	.word	0x40000400
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b08b      	sub	sp, #44	; 0x2c
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	2414      	movs	r4, #20
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	0018      	movs	r0, r3
 8000b82:	2314      	movs	r3, #20
 8000b84:	001a      	movs	r2, r3
 8000b86:	2100      	movs	r1, #0
 8000b88:	f002 ffb4 	bl	8003af4 <memset>
  if(huart->Instance==USART1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a30      	ldr	r2, [pc, #192]	; (8000c54 <HAL_UART_MspInit+0xe0>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d159      	bne.n	8000c4a <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b96:	4b30      	ldr	r3, [pc, #192]	; (8000c58 <HAL_UART_MspInit+0xe4>)
 8000b98:	699a      	ldr	r2, [r3, #24]
 8000b9a:	4b2f      	ldr	r3, [pc, #188]	; (8000c58 <HAL_UART_MspInit+0xe4>)
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	01c9      	lsls	r1, r1, #7
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	619a      	str	r2, [r3, #24]
 8000ba4:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <HAL_UART_MspInit+0xe4>)
 8000ba6:	699a      	ldr	r2, [r3, #24]
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	01db      	lsls	r3, r3, #7
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <HAL_UART_MspInit+0xe4>)
 8000bb4:	695a      	ldr	r2, [r3, #20]
 8000bb6:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <HAL_UART_MspInit+0xe4>)
 8000bb8:	2180      	movs	r1, #128	; 0x80
 8000bba:	0289      	lsls	r1, r1, #10
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	615a      	str	r2, [r3, #20]
 8000bc0:	4b25      	ldr	r3, [pc, #148]	; (8000c58 <HAL_UART_MspInit+0xe4>)
 8000bc2:	695a      	ldr	r2, [r3, #20]
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	029b      	lsls	r3, r3, #10
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	22c0      	movs	r2, #192	; 0xc0
 8000bd2:	00d2      	lsls	r2, r2, #3
 8000bd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	0021      	movs	r1, r4
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2202      	movs	r2, #2
 8000bdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2203      	movs	r2, #3
 8000be8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2201      	movs	r2, #1
 8000bee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	187a      	adds	r2, r7, r1
 8000bf2:	2390      	movs	r3, #144	; 0x90
 8000bf4:	05db      	lsls	r3, r3, #23
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f000 fb97 	bl	800132c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c00:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <HAL_UART_MspInit+0xec>)
 8000c02:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c12:	2280      	movs	r2, #128	; 0x80
 8000c14:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c24:	2220      	movs	r2, #32
 8000c26:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c30:	0018      	movs	r0, r3
 8000c32:	f000 f9e3 	bl	8000ffc <HAL_DMA_Init>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000c3a:	f7ff fecb 	bl	80009d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c42:	675a      	str	r2, [r3, #116]	; 0x74
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <HAL_UART_MspInit+0xe8>)
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b00b      	add	sp, #44	; 0x2c
 8000c50:	bd90      	pop	{r4, r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	40013800 	.word	0x40013800
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	20000194 	.word	0x20000194
 8000c60:	40020030 	.word	0x40020030

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c88:	f000 f8be 	bl	8000e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 fa5c 	bl	8001158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	20000194 	.word	0x20000194

08000cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <_sbrk+0x5c>)
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <_sbrk+0x60>)
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <_sbrk+0x64>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <_sbrk+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	18d3      	adds	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d207      	bcs.n	8000cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cdc:	f002 ff12 	bl	8003b04 <__errno>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	425b      	negs	r3, r3
 8000cea:	e009      	b.n	8000d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	18d2      	adds	r2, r2, r3
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <_sbrk+0x64>)
 8000cfc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b006      	add	sp, #24
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20004000 	.word	0x20004000
 8000d0c:	00000400 	.word	0x00000400
 8000d10:	200001f8 	.word	0x200001f8
 8000d14:	20000348 	.word	0x20000348

08000d18 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d26:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d28:	f7ff fff6 	bl	8000d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d2e:	490d      	ldr	r1, [pc, #52]	; (8000d64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <LoopForever+0xe>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d44:	4c0a      	ldr	r4, [pc, #40]	; (8000d70 <LoopForever+0x16>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d52:	f002 fedd 	bl	8003b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d56:	f7ff fbd1 	bl	80004fc <main>

08000d5a <LoopForever>:

LoopForever:
    b LoopForever
 8000d5a:	e7fe      	b.n	8000d5a <LoopForever>
  ldr   r0, =_estack
 8000d5c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d64:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d68:	08004494 	.word	0x08004494
  ldr r2, =_sbss
 8000d6c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d70:	20000348 	.word	0x20000348

08000d74 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC1_COMP_IRQHandler>
	...

08000d78 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <HAL_Init+0x24>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_Init+0x24>)
 8000d82:	2110      	movs	r1, #16
 8000d84:	430a      	orrs	r2, r1
 8000d86:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f000 f809 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8e:	f7ff fe27 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	40022000 	.word	0x40022000

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_InitTick+0x5c>)
 8000daa:	681c      	ldr	r4, [r3, #0]
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <HAL_InitTick+0x60>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	0019      	movs	r1, r3
 8000db2:	23fa      	movs	r3, #250	; 0xfa
 8000db4:	0098      	lsls	r0, r3, #2
 8000db6:	f7ff f9b1 	bl	800011c <__udivsi3>
 8000dba:	0003      	movs	r3, r0
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	0020      	movs	r0, r4
 8000dc0:	f7ff f9ac 	bl	800011c <__udivsi3>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f000 f90b 	bl	8000fe2 <HAL_SYSTICK_Config>
 8000dcc:	1e03      	subs	r3, r0, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e00f      	b.n	8000df4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d80b      	bhi.n	8000df2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	2301      	movs	r3, #1
 8000dde:	425b      	negs	r3, r3
 8000de0:	2200      	movs	r2, #0
 8000de2:	0018      	movs	r0, r3
 8000de4:	f000 f8d8 	bl	8000f98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_InitTick+0x64>)
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e000      	b.n	8000df4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	0018      	movs	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b003      	add	sp, #12
 8000dfa:	bd90      	pop	{r4, r7, pc}
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000004 	.word	0x20000004

08000e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_IncTick+0x1c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	001a      	movs	r2, r3
 8000e12:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_IncTick+0x20>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	18d2      	adds	r2, r2, r3
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_IncTick+0x20>)
 8000e1a:	601a      	str	r2, [r3, #0]
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	20000008 	.word	0x20000008
 8000e28:	200001fc 	.word	0x200001fc

08000e2c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b02      	ldr	r3, [pc, #8]	; (8000e3c <HAL_GetTick+0x10>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	200001fc 	.word	0x200001fc

08000e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	0002      	movs	r2, r0
 8000e48:	1dfb      	adds	r3, r7, #7
 8000e4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	1dfb      	adds	r3, r7, #7
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b7f      	cmp	r3, #127	; 0x7f
 8000e52:	d809      	bhi.n	8000e68 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e54:	1dfb      	adds	r3, r7, #7
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	001a      	movs	r2, r3
 8000e5a:	231f      	movs	r3, #31
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_EnableIRQ+0x30>)
 8000e60:	2101      	movs	r1, #1
 8000e62:	4091      	lsls	r1, r2
 8000e64:	000a      	movs	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]
  }
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b002      	add	sp, #8
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	e000e100 	.word	0xe000e100

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	0002      	movs	r2, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b7f      	cmp	r3, #127	; 0x7f
 8000e88:	d828      	bhi.n	8000edc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e8a:	4a2f      	ldr	r2, [pc, #188]	; (8000f48 <__NVIC_SetPriority+0xd4>)
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b25b      	sxtb	r3, r3
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	33c0      	adds	r3, #192	; 0xc0
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	589b      	ldr	r3, [r3, r2]
 8000e9a:	1dfa      	adds	r2, r7, #7
 8000e9c:	7812      	ldrb	r2, [r2, #0]
 8000e9e:	0011      	movs	r1, r2
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	400a      	ands	r2, r1
 8000ea4:	00d2      	lsls	r2, r2, #3
 8000ea6:	21ff      	movs	r1, #255	; 0xff
 8000ea8:	4091      	lsls	r1, r2
 8000eaa:	000a      	movs	r2, r1
 8000eac:	43d2      	mvns	r2, r2
 8000eae:	401a      	ands	r2, r3
 8000eb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	019b      	lsls	r3, r3, #6
 8000eb6:	22ff      	movs	r2, #255	; 0xff
 8000eb8:	401a      	ands	r2, r3
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	4003      	ands	r3, r0
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ec8:	481f      	ldr	r0, [pc, #124]	; (8000f48 <__NVIC_SetPriority+0xd4>)
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b25b      	sxtb	r3, r3
 8000ed0:	089b      	lsrs	r3, r3, #2
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	33c0      	adds	r3, #192	; 0xc0
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000eda:	e031      	b.n	8000f40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000edc:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <__NVIC_SetPriority+0xd8>)
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	0019      	movs	r1, r3
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	400b      	ands	r3, r1
 8000ee8:	3b08      	subs	r3, #8
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	3306      	adds	r3, #6
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	18d3      	adds	r3, r2, r3
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	1dfa      	adds	r2, r7, #7
 8000ef8:	7812      	ldrb	r2, [r2, #0]
 8000efa:	0011      	movs	r1, r2
 8000efc:	2203      	movs	r2, #3
 8000efe:	400a      	ands	r2, r1
 8000f00:	00d2      	lsls	r2, r2, #3
 8000f02:	21ff      	movs	r1, #255	; 0xff
 8000f04:	4091      	lsls	r1, r2
 8000f06:	000a      	movs	r2, r1
 8000f08:	43d2      	mvns	r2, r2
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	019b      	lsls	r3, r3, #6
 8000f12:	22ff      	movs	r2, #255	; 0xff
 8000f14:	401a      	ands	r2, r3
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	4003      	ands	r3, r0
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f24:	4809      	ldr	r0, [pc, #36]	; (8000f4c <__NVIC_SetPriority+0xd8>)
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	001c      	movs	r4, r3
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	4023      	ands	r3, r4
 8000f30:	3b08      	subs	r3, #8
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	430a      	orrs	r2, r1
 8000f36:	3306      	adds	r3, #6
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	18c3      	adds	r3, r0, r3
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	601a      	str	r2, [r3, #0]
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b003      	add	sp, #12
 8000f46:	bd90      	pop	{r4, r7, pc}
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	1e5a      	subs	r2, r3, #1
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	045b      	lsls	r3, r3, #17
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d301      	bcc.n	8000f68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f64:	2301      	movs	r3, #1
 8000f66:	e010      	b.n	8000f8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <SysTick_Config+0x44>)
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	3a01      	subs	r2, #1
 8000f6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f70:	2301      	movs	r3, #1
 8000f72:	425b      	negs	r3, r3
 8000f74:	2103      	movs	r1, #3
 8000f76:	0018      	movs	r0, r3
 8000f78:	f7ff ff7c 	bl	8000e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <SysTick_Config+0x44>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <SysTick_Config+0x44>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b002      	add	sp, #8
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	e000e010 	.word	0xe000e010

08000f98 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	1c02      	adds	r2, r0, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	0011      	movs	r1, r2
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f7ff ff5d 	bl	8000e74 <__NVIC_SetPriority>
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b004      	add	sp, #16
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	0002      	movs	r2, r0
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f7ff ff33 	bl	8000e40 <__NVIC_EnableIRQ>
}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b002      	add	sp, #8
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	0018      	movs	r0, r3
 8000fee:	f7ff ffaf 	bl	8000f50 <SysTick_Config>
 8000ff2:	0003      	movs	r3, r0
}
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b002      	add	sp, #8
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e036      	b.n	8001080 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2221      	movs	r2, #33	; 0x21
 8001016:	2102      	movs	r1, #2
 8001018:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4a18      	ldr	r2, [pc, #96]	; (8001088 <HAL_DMA_Init+0x8c>)
 8001026:	4013      	ands	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001032:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800103e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800104a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69db      	ldr	r3, [r3, #28]
 8001050:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	0018      	movs	r0, r3
 8001064:	f000 f946 	bl	80012f4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2221      	movs	r2, #33	; 0x21
 8001072:	2101      	movs	r1, #1
 8001074:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2220      	movs	r2, #32
 800107a:	2100      	movs	r1, #0
 800107c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b004      	add	sp, #16
 8001086:	bd80      	pop	{r7, pc}
 8001088:	ffffc00f 	.word	0xffffc00f

0800108c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800109a:	2317      	movs	r3, #23
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2220      	movs	r2, #32
 80010a6:	5c9b      	ldrb	r3, [r3, r2]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <HAL_DMA_Start_IT+0x24>
 80010ac:	2302      	movs	r3, #2
 80010ae:	e04f      	b.n	8001150 <HAL_DMA_Start_IT+0xc4>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2220      	movs	r2, #32
 80010b4:	2101      	movs	r1, #1
 80010b6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2221      	movs	r2, #33	; 0x21
 80010bc:	5c9b      	ldrb	r3, [r3, r2]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d13a      	bne.n	800113a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2221      	movs	r2, #33	; 0x21
 80010c8:	2102      	movs	r1, #2
 80010ca:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2200      	movs	r2, #0
 80010d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2101      	movs	r1, #1
 80010de:	438a      	bics	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f000 f8d7 	bl	800129c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	210e      	movs	r1, #14
 8001102:	430a      	orrs	r2, r1
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	e00f      	b.n	8001128 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	210a      	movs	r1, #10
 8001114:	430a      	orrs	r2, r1
 8001116:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2104      	movs	r1, #4
 8001124:	438a      	bics	r2, r1
 8001126:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2101      	movs	r1, #1
 8001134:	430a      	orrs	r2, r1
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	e007      	b.n	800114a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2220      	movs	r2, #32
 800113e:	2100      	movs	r1, #0
 8001140:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001142:	2317      	movs	r3, #23
 8001144:	18fb      	adds	r3, r7, r3
 8001146:	2202      	movs	r2, #2
 8001148:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800114a:	2317      	movs	r3, #23
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	781b      	ldrb	r3, [r3, #0]
}
 8001150:	0018      	movs	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	b006      	add	sp, #24
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	2204      	movs	r2, #4
 8001176:	409a      	lsls	r2, r3
 8001178:	0013      	movs	r3, r2
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	4013      	ands	r3, r2
 800117e:	d024      	beq.n	80011ca <HAL_DMA_IRQHandler+0x72>
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	2204      	movs	r2, #4
 8001184:	4013      	ands	r3, r2
 8001186:	d020      	beq.n	80011ca <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2220      	movs	r2, #32
 8001190:	4013      	ands	r3, r2
 8001192:	d107      	bne.n	80011a4 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2104      	movs	r1, #4
 80011a0:	438a      	bics	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ac:	2104      	movs	r1, #4
 80011ae:	4091      	lsls	r1, r2
 80011b0:	000a      	movs	r2, r1
 80011b2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d100      	bne.n	80011be <HAL_DMA_IRQHandler+0x66>
 80011bc:	e06a      	b.n	8001294 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	0010      	movs	r0, r2
 80011c6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80011c8:	e064      	b.n	8001294 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	2202      	movs	r2, #2
 80011d0:	409a      	lsls	r2, r3
 80011d2:	0013      	movs	r3, r2
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	4013      	ands	r3, r2
 80011d8:	d02b      	beq.n	8001232 <HAL_DMA_IRQHandler+0xda>
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	2202      	movs	r2, #2
 80011de:	4013      	ands	r3, r2
 80011e0:	d027      	beq.n	8001232 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2220      	movs	r2, #32
 80011ea:	4013      	ands	r3, r2
 80011ec:	d10b      	bne.n	8001206 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	210a      	movs	r1, #10
 80011fa:	438a      	bics	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2221      	movs	r2, #33	; 0x21
 8001202:	2101      	movs	r1, #1
 8001204:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800120e:	2102      	movs	r1, #2
 8001210:	4091      	lsls	r1, r2
 8001212:	000a      	movs	r2, r1
 8001214:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2220      	movs	r2, #32
 800121a:	2100      	movs	r1, #0
 800121c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	2b00      	cmp	r3, #0
 8001224:	d036      	beq.n	8001294 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	0010      	movs	r0, r2
 800122e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001230:	e030      	b.n	8001294 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	2208      	movs	r2, #8
 8001238:	409a      	lsls	r2, r3
 800123a:	0013      	movs	r3, r2
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	4013      	ands	r3, r2
 8001240:	d028      	beq.n	8001294 <HAL_DMA_IRQHandler+0x13c>
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	2208      	movs	r2, #8
 8001246:	4013      	ands	r3, r2
 8001248:	d024      	beq.n	8001294 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	210e      	movs	r1, #14
 8001256:	438a      	bics	r2, r1
 8001258:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001262:	2101      	movs	r1, #1
 8001264:	4091      	lsls	r1, r2
 8001266:	000a      	movs	r2, r1
 8001268:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2221      	movs	r2, #33	; 0x21
 8001274:	2101      	movs	r1, #1
 8001276:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2220      	movs	r2, #32
 800127c:	2100      	movs	r1, #0
 800127e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	0010      	movs	r0, r2
 8001290:	4798      	blx	r3
    }
  }
}
 8001292:	e7ff      	b.n	8001294 <HAL_DMA_IRQHandler+0x13c>
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b004      	add	sp, #16
 800129a:	bd80      	pop	{r7, pc}

0800129c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b2:	2101      	movs	r1, #1
 80012b4:	4091      	lsls	r1, r2
 80012b6:	000a      	movs	r2, r1
 80012b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b10      	cmp	r3, #16
 80012c8:	d108      	bne.n	80012dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012da:	e007      	b.n	80012ec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	60da      	str	r2, [r3, #12]
}
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b004      	add	sp, #16
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a08      	ldr	r2, [pc, #32]	; (8001324 <DMA_CalcBaseAndBitshift+0x30>)
 8001302:	4694      	mov	ip, r2
 8001304:	4463      	add	r3, ip
 8001306:	2114      	movs	r1, #20
 8001308:	0018      	movs	r0, r3
 800130a:	f7fe ff07 	bl	800011c <__udivsi3>
 800130e:	0003      	movs	r3, r0
 8001310:	009a      	lsls	r2, r3, #2
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a03      	ldr	r2, [pc, #12]	; (8001328 <DMA_CalcBaseAndBitshift+0x34>)
 800131a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800131c:	46c0      	nop			; (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	b002      	add	sp, #8
 8001322:	bd80      	pop	{r7, pc}
 8001324:	bffdfff8 	.word	0xbffdfff8
 8001328:	40020000 	.word	0x40020000

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133a:	e155      	b.n	80015e8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	4091      	lsls	r1, r2
 8001346:	000a      	movs	r2, r1
 8001348:	4013      	ands	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d100      	bne.n	8001354 <HAL_GPIO_Init+0x28>
 8001352:	e146      	b.n	80015e2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2203      	movs	r2, #3
 800135a:	4013      	ands	r3, r2
 800135c:	2b01      	cmp	r3, #1
 800135e:	d005      	beq.n	800136c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2203      	movs	r2, #3
 8001366:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001368:	2b02      	cmp	r3, #2
 800136a:	d130      	bne.n	80013ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	409a      	lsls	r2, r3
 800137a:	0013      	movs	r3, r2
 800137c:	43da      	mvns	r2, r3
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	409a      	lsls	r2, r3
 800138e:	0013      	movs	r3, r2
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013a2:	2201      	movs	r2, #1
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	409a      	lsls	r2, r3
 80013a8:	0013      	movs	r3, r2
 80013aa:	43da      	mvns	r2, r3
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	091b      	lsrs	r3, r3, #4
 80013b8:	2201      	movs	r2, #1
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
 80013c0:	0013      	movs	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2203      	movs	r2, #3
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d017      	beq.n	800140a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	2203      	movs	r2, #3
 80013e6:	409a      	lsls	r2, r3
 80013e8:	0013      	movs	r3, r2
 80013ea:	43da      	mvns	r2, r3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2203      	movs	r2, #3
 8001410:	4013      	ands	r3, r2
 8001412:	2b02      	cmp	r3, #2
 8001414:	d123      	bne.n	800145e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	08da      	lsrs	r2, r3, #3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3208      	adds	r2, #8
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	58d3      	ldr	r3, [r2, r3]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2207      	movs	r2, #7
 8001428:	4013      	ands	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	220f      	movs	r2, #15
 800142e:	409a      	lsls	r2, r3
 8001430:	0013      	movs	r3, r2
 8001432:	43da      	mvns	r2, r3
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	691a      	ldr	r2, [r3, #16]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	2107      	movs	r1, #7
 8001442:	400b      	ands	r3, r1
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	409a      	lsls	r2, r3
 8001448:	0013      	movs	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	08da      	lsrs	r2, r3, #3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3208      	adds	r2, #8
 8001458:	0092      	lsls	r2, r2, #2
 800145a:	6939      	ldr	r1, [r7, #16]
 800145c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	409a      	lsls	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	43da      	mvns	r2, r3
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2203      	movs	r2, #3
 800147c:	401a      	ands	r2, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	409a      	lsls	r2, r3
 8001484:	0013      	movs	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	23c0      	movs	r3, #192	; 0xc0
 8001498:	029b      	lsls	r3, r3, #10
 800149a:	4013      	ands	r3, r2
 800149c:	d100      	bne.n	80014a0 <HAL_GPIO_Init+0x174>
 800149e:	e0a0      	b.n	80015e2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a0:	4b57      	ldr	r3, [pc, #348]	; (8001600 <HAL_GPIO_Init+0x2d4>)
 80014a2:	699a      	ldr	r2, [r3, #24]
 80014a4:	4b56      	ldr	r3, [pc, #344]	; (8001600 <HAL_GPIO_Init+0x2d4>)
 80014a6:	2101      	movs	r1, #1
 80014a8:	430a      	orrs	r2, r1
 80014aa:	619a      	str	r2, [r3, #24]
 80014ac:	4b54      	ldr	r3, [pc, #336]	; (8001600 <HAL_GPIO_Init+0x2d4>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2201      	movs	r2, #1
 80014b2:	4013      	ands	r3, r2
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014b8:	4a52      	ldr	r2, [pc, #328]	; (8001604 <HAL_GPIO_Init+0x2d8>)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3302      	adds	r3, #2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	589b      	ldr	r3, [r3, r2]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2203      	movs	r2, #3
 80014ca:	4013      	ands	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	220f      	movs	r2, #15
 80014d0:	409a      	lsls	r2, r3
 80014d2:	0013      	movs	r3, r2
 80014d4:	43da      	mvns	r2, r3
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4013      	ands	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	2390      	movs	r3, #144	; 0x90
 80014e0:	05db      	lsls	r3, r3, #23
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d019      	beq.n	800151a <HAL_GPIO_Init+0x1ee>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a47      	ldr	r2, [pc, #284]	; (8001608 <HAL_GPIO_Init+0x2dc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d013      	beq.n	8001516 <HAL_GPIO_Init+0x1ea>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a46      	ldr	r2, [pc, #280]	; (800160c <HAL_GPIO_Init+0x2e0>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d00d      	beq.n	8001512 <HAL_GPIO_Init+0x1e6>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a45      	ldr	r2, [pc, #276]	; (8001610 <HAL_GPIO_Init+0x2e4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d007      	beq.n	800150e <HAL_GPIO_Init+0x1e2>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a44      	ldr	r2, [pc, #272]	; (8001614 <HAL_GPIO_Init+0x2e8>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <HAL_GPIO_Init+0x1de>
 8001506:	2304      	movs	r3, #4
 8001508:	e008      	b.n	800151c <HAL_GPIO_Init+0x1f0>
 800150a:	2305      	movs	r3, #5
 800150c:	e006      	b.n	800151c <HAL_GPIO_Init+0x1f0>
 800150e:	2303      	movs	r3, #3
 8001510:	e004      	b.n	800151c <HAL_GPIO_Init+0x1f0>
 8001512:	2302      	movs	r3, #2
 8001514:	e002      	b.n	800151c <HAL_GPIO_Init+0x1f0>
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <HAL_GPIO_Init+0x1f0>
 800151a:	2300      	movs	r3, #0
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	2103      	movs	r1, #3
 8001520:	400a      	ands	r2, r1
 8001522:	0092      	lsls	r2, r2, #2
 8001524:	4093      	lsls	r3, r2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800152c:	4935      	ldr	r1, [pc, #212]	; (8001604 <HAL_GPIO_Init+0x2d8>)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	089b      	lsrs	r3, r3, #2
 8001532:	3302      	adds	r3, #2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800153a:	4b37      	ldr	r3, [pc, #220]	; (8001618 <HAL_GPIO_Init+0x2ec>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	43da      	mvns	r2, r3
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	035b      	lsls	r3, r3, #13
 8001552:	4013      	ands	r3, r2
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800155e:	4b2e      	ldr	r3, [pc, #184]	; (8001618 <HAL_GPIO_Init+0x2ec>)
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001564:	4b2c      	ldr	r3, [pc, #176]	; (8001618 <HAL_GPIO_Init+0x2ec>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	43da      	mvns	r2, r3
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	039b      	lsls	r3, r3, #14
 800157c:	4013      	ands	r3, r2
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001588:	4b23      	ldr	r3, [pc, #140]	; (8001618 <HAL_GPIO_Init+0x2ec>)
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800158e:	4b22      	ldr	r3, [pc, #136]	; (8001618 <HAL_GPIO_Init+0x2ec>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	43da      	mvns	r2, r3
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	029b      	lsls	r3, r3, #10
 80015a6:	4013      	ands	r3, r2
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_GPIO_Init+0x2ec>)
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80015b8:	4b17      	ldr	r3, [pc, #92]	; (8001618 <HAL_GPIO_Init+0x2ec>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	43da      	mvns	r2, r3
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	025b      	lsls	r3, r3, #9
 80015d0:	4013      	ands	r3, r2
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_GPIO_Init+0x2ec>)
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3301      	adds	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	40da      	lsrs	r2, r3
 80015f0:	1e13      	subs	r3, r2, #0
 80015f2:	d000      	beq.n	80015f6 <HAL_GPIO_Init+0x2ca>
 80015f4:	e6a2      	b.n	800133c <HAL_GPIO_Init+0x10>
  } 
}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b006      	add	sp, #24
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000
 8001604:	40010000 	.word	0x40010000
 8001608:	48000400 	.word	0x48000400
 800160c:	48000800 	.word	0x48000800
 8001610:	48000c00 	.word	0x48000c00
 8001614:	48001000 	.word	0x48001000
 8001618:	40010400 	.word	0x40010400

0800161c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	0008      	movs	r0, r1
 8001626:	0011      	movs	r1, r2
 8001628:	1cbb      	adds	r3, r7, #2
 800162a:	1c02      	adds	r2, r0, #0
 800162c:	801a      	strh	r2, [r3, #0]
 800162e:	1c7b      	adds	r3, r7, #1
 8001630:	1c0a      	adds	r2, r1, #0
 8001632:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001634:	1c7b      	adds	r3, r7, #1
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d004      	beq.n	8001646 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800163c:	1cbb      	adds	r3, r7, #2
 800163e:	881a      	ldrh	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001644:	e003      	b.n	800164e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001646:	1cbb      	adds	r3, r7, #2
 8001648:	881a      	ldrh	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	46bd      	mov	sp, r7
 8001652:	b002      	add	sp, #8
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d102      	bne.n	800166c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	f000 fb76 	bl	8001d58 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2201      	movs	r2, #1
 8001672:	4013      	ands	r3, r2
 8001674:	d100      	bne.n	8001678 <HAL_RCC_OscConfig+0x20>
 8001676:	e08e      	b.n	8001796 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001678:	4bc5      	ldr	r3, [pc, #788]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	220c      	movs	r2, #12
 800167e:	4013      	ands	r3, r2
 8001680:	2b04      	cmp	r3, #4
 8001682:	d00e      	beq.n	80016a2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001684:	4bc2      	ldr	r3, [pc, #776]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	220c      	movs	r2, #12
 800168a:	4013      	ands	r3, r2
 800168c:	2b08      	cmp	r3, #8
 800168e:	d117      	bne.n	80016c0 <HAL_RCC_OscConfig+0x68>
 8001690:	4bbf      	ldr	r3, [pc, #764]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	23c0      	movs	r3, #192	; 0xc0
 8001696:	025b      	lsls	r3, r3, #9
 8001698:	401a      	ands	r2, r3
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	025b      	lsls	r3, r3, #9
 800169e:	429a      	cmp	r2, r3
 80016a0:	d10e      	bne.n	80016c0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a2:	4bbb      	ldr	r3, [pc, #748]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	029b      	lsls	r3, r3, #10
 80016aa:	4013      	ands	r3, r2
 80016ac:	d100      	bne.n	80016b0 <HAL_RCC_OscConfig+0x58>
 80016ae:	e071      	b.n	8001794 <HAL_RCC_OscConfig+0x13c>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d000      	beq.n	80016ba <HAL_RCC_OscConfig+0x62>
 80016b8:	e06c      	b.n	8001794 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	f000 fb4c 	bl	8001d58 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d107      	bne.n	80016d8 <HAL_RCC_OscConfig+0x80>
 80016c8:	4bb1      	ldr	r3, [pc, #708]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4bb0      	ldr	r3, [pc, #704]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80016ce:	2180      	movs	r1, #128	; 0x80
 80016d0:	0249      	lsls	r1, r1, #9
 80016d2:	430a      	orrs	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	e02f      	b.n	8001738 <HAL_RCC_OscConfig+0xe0>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10c      	bne.n	80016fa <HAL_RCC_OscConfig+0xa2>
 80016e0:	4bab      	ldr	r3, [pc, #684]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4baa      	ldr	r3, [pc, #680]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80016e6:	49ab      	ldr	r1, [pc, #684]	; (8001994 <HAL_RCC_OscConfig+0x33c>)
 80016e8:	400a      	ands	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	4ba8      	ldr	r3, [pc, #672]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4ba7      	ldr	r3, [pc, #668]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80016f2:	49a9      	ldr	r1, [pc, #676]	; (8001998 <HAL_RCC_OscConfig+0x340>)
 80016f4:	400a      	ands	r2, r1
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	e01e      	b.n	8001738 <HAL_RCC_OscConfig+0xe0>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b05      	cmp	r3, #5
 8001700:	d10e      	bne.n	8001720 <HAL_RCC_OscConfig+0xc8>
 8001702:	4ba3      	ldr	r3, [pc, #652]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4ba2      	ldr	r3, [pc, #648]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001708:	2180      	movs	r1, #128	; 0x80
 800170a:	02c9      	lsls	r1, r1, #11
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	4b9f      	ldr	r3, [pc, #636]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b9e      	ldr	r3, [pc, #632]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001716:	2180      	movs	r1, #128	; 0x80
 8001718:	0249      	lsls	r1, r1, #9
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e00b      	b.n	8001738 <HAL_RCC_OscConfig+0xe0>
 8001720:	4b9b      	ldr	r3, [pc, #620]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b9a      	ldr	r3, [pc, #616]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001726:	499b      	ldr	r1, [pc, #620]	; (8001994 <HAL_RCC_OscConfig+0x33c>)
 8001728:	400a      	ands	r2, r1
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	4b98      	ldr	r3, [pc, #608]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b97      	ldr	r3, [pc, #604]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001732:	4999      	ldr	r1, [pc, #612]	; (8001998 <HAL_RCC_OscConfig+0x340>)
 8001734:	400a      	ands	r2, r1
 8001736:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d014      	beq.n	800176a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff fb74 	bl	8000e2c <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174a:	f7ff fb6f 	bl	8000e2c <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b64      	cmp	r3, #100	; 0x64
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e2fd      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175c:	4b8c      	ldr	r3, [pc, #560]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	029b      	lsls	r3, r3, #10
 8001764:	4013      	ands	r3, r2
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0xf2>
 8001768:	e015      	b.n	8001796 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176a:	f7ff fb5f 	bl	8000e2c <HAL_GetTick>
 800176e:	0003      	movs	r3, r0
 8001770:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fb5a 	bl	8000e2c <HAL_GetTick>
 8001778:	0002      	movs	r2, r0
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e2e8      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001786:	4b82      	ldr	r3, [pc, #520]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	029b      	lsls	r3, r3, #10
 800178e:	4013      	ands	r3, r2
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x11c>
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001794:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2202      	movs	r2, #2
 800179c:	4013      	ands	r3, r2
 800179e:	d100      	bne.n	80017a2 <HAL_RCC_OscConfig+0x14a>
 80017a0:	e06c      	b.n	800187c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017a2:	4b7b      	ldr	r3, [pc, #492]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	220c      	movs	r2, #12
 80017a8:	4013      	ands	r3, r2
 80017aa:	d00e      	beq.n	80017ca <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017ac:	4b78      	ldr	r3, [pc, #480]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	220c      	movs	r2, #12
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d11f      	bne.n	80017f8 <HAL_RCC_OscConfig+0x1a0>
 80017b8:	4b75      	ldr	r3, [pc, #468]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	23c0      	movs	r3, #192	; 0xc0
 80017be:	025b      	lsls	r3, r3, #9
 80017c0:	401a      	ands	r2, r3
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d116      	bne.n	80017f8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ca:	4b71      	ldr	r3, [pc, #452]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2202      	movs	r2, #2
 80017d0:	4013      	ands	r3, r2
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_OscConfig+0x188>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e2bb      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e0:	4b6b      	ldr	r3, [pc, #428]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	22f8      	movs	r2, #248	; 0xf8
 80017e6:	4393      	bics	r3, r2
 80017e8:	0019      	movs	r1, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	00da      	lsls	r2, r3, #3
 80017f0:	4b67      	ldr	r3, [pc, #412]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f6:	e041      	b.n	800187c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d024      	beq.n	800184a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001800:	4b63      	ldr	r3, [pc, #396]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b62      	ldr	r3, [pc, #392]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001806:	2101      	movs	r1, #1
 8001808:	430a      	orrs	r2, r1
 800180a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fb0e 	bl	8000e2c <HAL_GetTick>
 8001810:	0003      	movs	r3, r0
 8001812:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001816:	f7ff fb09 	bl	8000e2c <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e297      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001828:	4b59      	ldr	r3, [pc, #356]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2202      	movs	r2, #2
 800182e:	4013      	ands	r3, r2
 8001830:	d0f1      	beq.n	8001816 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001832:	4b57      	ldr	r3, [pc, #348]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	22f8      	movs	r2, #248	; 0xf8
 8001838:	4393      	bics	r3, r2
 800183a:	0019      	movs	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	00da      	lsls	r2, r3, #3
 8001842:	4b53      	ldr	r3, [pc, #332]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001844:	430a      	orrs	r2, r1
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	e018      	b.n	800187c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184a:	4b51      	ldr	r3, [pc, #324]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b50      	ldr	r3, [pc, #320]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001850:	2101      	movs	r1, #1
 8001852:	438a      	bics	r2, r1
 8001854:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7ff fae9 	bl	8000e2c <HAL_GetTick>
 800185a:	0003      	movs	r3, r0
 800185c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001860:	f7ff fae4 	bl	8000e2c <HAL_GetTick>
 8001864:	0002      	movs	r2, r0
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e272      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001872:	4b47      	ldr	r3, [pc, #284]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2202      	movs	r2, #2
 8001878:	4013      	ands	r3, r2
 800187a:	d1f1      	bne.n	8001860 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2208      	movs	r2, #8
 8001882:	4013      	ands	r3, r2
 8001884:	d036      	beq.n	80018f4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d019      	beq.n	80018c2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800188e:	4b40      	ldr	r3, [pc, #256]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001892:	4b3f      	ldr	r3, [pc, #252]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001894:	2101      	movs	r1, #1
 8001896:	430a      	orrs	r2, r1
 8001898:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189a:	f7ff fac7 	bl	8000e2c <HAL_GetTick>
 800189e:	0003      	movs	r3, r0
 80018a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a4:	f7ff fac2 	bl	8000e2c <HAL_GetTick>
 80018a8:	0002      	movs	r2, r0
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e250      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b6:	4b36      	ldr	r3, [pc, #216]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	2202      	movs	r2, #2
 80018bc:	4013      	ands	r3, r2
 80018be:	d0f1      	beq.n	80018a4 <HAL_RCC_OscConfig+0x24c>
 80018c0:	e018      	b.n	80018f4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c2:	4b33      	ldr	r3, [pc, #204]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80018c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018c6:	4b32      	ldr	r3, [pc, #200]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80018c8:	2101      	movs	r1, #1
 80018ca:	438a      	bics	r2, r1
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ce:	f7ff faad 	bl	8000e2c <HAL_GetTick>
 80018d2:	0003      	movs	r3, r0
 80018d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d8:	f7ff faa8 	bl	8000e2c <HAL_GetTick>
 80018dc:	0002      	movs	r2, r0
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e236      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ea:	4b29      	ldr	r3, [pc, #164]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	2202      	movs	r2, #2
 80018f0:	4013      	ands	r3, r2
 80018f2:	d1f1      	bne.n	80018d8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2204      	movs	r2, #4
 80018fa:	4013      	ands	r3, r2
 80018fc:	d100      	bne.n	8001900 <HAL_RCC_OscConfig+0x2a8>
 80018fe:	e0b5      	b.n	8001a6c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001900:	201f      	movs	r0, #31
 8001902:	183b      	adds	r3, r7, r0
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 800190a:	69da      	ldr	r2, [r3, #28]
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	055b      	lsls	r3, r3, #21
 8001910:	4013      	ands	r3, r2
 8001912:	d110      	bne.n	8001936 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001914:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001916:	69da      	ldr	r2, [r3, #28]
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	0549      	lsls	r1, r1, #21
 800191e:	430a      	orrs	r2, r1
 8001920:	61da      	str	r2, [r3, #28]
 8001922:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001924:	69da      	ldr	r2, [r3, #28]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	055b      	lsls	r3, r3, #21
 800192a:	4013      	ands	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001930:	183b      	adds	r3, r7, r0
 8001932:	2201      	movs	r2, #1
 8001934:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001936:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_RCC_OscConfig+0x344>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4013      	ands	r3, r2
 8001940:	d11a      	bne.n	8001978 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <HAL_RCC_OscConfig+0x344>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_RCC_OscConfig+0x344>)
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	0049      	lsls	r1, r1, #1
 800194c:	430a      	orrs	r2, r1
 800194e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001950:	f7ff fa6c 	bl	8000e2c <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195a:	f7ff fa67 	bl	8000e2c <HAL_GetTick>
 800195e:	0002      	movs	r2, r0
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b64      	cmp	r3, #100	; 0x64
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e1f5      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_RCC_OscConfig+0x344>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4013      	ands	r3, r2
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d10f      	bne.n	80019a0 <HAL_RCC_OscConfig+0x348>
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001982:	6a1a      	ldr	r2, [r3, #32]
 8001984:	4b02      	ldr	r3, [pc, #8]	; (8001990 <HAL_RCC_OscConfig+0x338>)
 8001986:	2101      	movs	r1, #1
 8001988:	430a      	orrs	r2, r1
 800198a:	621a      	str	r2, [r3, #32]
 800198c:	e036      	b.n	80019fc <HAL_RCC_OscConfig+0x3a4>
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	40021000 	.word	0x40021000
 8001994:	fffeffff 	.word	0xfffeffff
 8001998:	fffbffff 	.word	0xfffbffff
 800199c:	40007000 	.word	0x40007000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10c      	bne.n	80019c2 <HAL_RCC_OscConfig+0x36a>
 80019a8:	4bca      	ldr	r3, [pc, #808]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 80019aa:	6a1a      	ldr	r2, [r3, #32]
 80019ac:	4bc9      	ldr	r3, [pc, #804]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 80019ae:	2101      	movs	r1, #1
 80019b0:	438a      	bics	r2, r1
 80019b2:	621a      	str	r2, [r3, #32]
 80019b4:	4bc7      	ldr	r3, [pc, #796]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 80019b6:	6a1a      	ldr	r2, [r3, #32]
 80019b8:	4bc6      	ldr	r3, [pc, #792]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 80019ba:	2104      	movs	r1, #4
 80019bc:	438a      	bics	r2, r1
 80019be:	621a      	str	r2, [r3, #32]
 80019c0:	e01c      	b.n	80019fc <HAL_RCC_OscConfig+0x3a4>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b05      	cmp	r3, #5
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x38c>
 80019ca:	4bc2      	ldr	r3, [pc, #776]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 80019cc:	6a1a      	ldr	r2, [r3, #32]
 80019ce:	4bc1      	ldr	r3, [pc, #772]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 80019d0:	2104      	movs	r1, #4
 80019d2:	430a      	orrs	r2, r1
 80019d4:	621a      	str	r2, [r3, #32]
 80019d6:	4bbf      	ldr	r3, [pc, #764]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 80019d8:	6a1a      	ldr	r2, [r3, #32]
 80019da:	4bbe      	ldr	r3, [pc, #760]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 80019dc:	2101      	movs	r1, #1
 80019de:	430a      	orrs	r2, r1
 80019e0:	621a      	str	r2, [r3, #32]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0x3a4>
 80019e4:	4bbb      	ldr	r3, [pc, #748]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 80019e6:	6a1a      	ldr	r2, [r3, #32]
 80019e8:	4bba      	ldr	r3, [pc, #744]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 80019ea:	2101      	movs	r1, #1
 80019ec:	438a      	bics	r2, r1
 80019ee:	621a      	str	r2, [r3, #32]
 80019f0:	4bb8      	ldr	r3, [pc, #736]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 80019f2:	6a1a      	ldr	r2, [r3, #32]
 80019f4:	4bb7      	ldr	r3, [pc, #732]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 80019f6:	2104      	movs	r1, #4
 80019f8:	438a      	bics	r2, r1
 80019fa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d014      	beq.n	8001a2e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a04:	f7ff fa12 	bl	8000e2c <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0c:	e009      	b.n	8001a22 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0e:	f7ff fa0d 	bl	8000e2c <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	4aaf      	ldr	r2, [pc, #700]	; (8001cd8 <HAL_RCC_OscConfig+0x680>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e19a      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a22:	4bac      	ldr	r3, [pc, #688]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	2202      	movs	r2, #2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x3b6>
 8001a2c:	e013      	b.n	8001a56 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff f9fd 	bl	8000e2c <HAL_GetTick>
 8001a32:	0003      	movs	r3, r0
 8001a34:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a36:	e009      	b.n	8001a4c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a38:	f7ff f9f8 	bl	8000e2c <HAL_GetTick>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	4aa5      	ldr	r2, [pc, #660]	; (8001cd8 <HAL_RCC_OscConfig+0x680>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e185      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a4c:	4ba1      	ldr	r3, [pc, #644]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	2202      	movs	r2, #2
 8001a52:	4013      	ands	r3, r2
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a56:	231f      	movs	r3, #31
 8001a58:	18fb      	adds	r3, r7, r3
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a60:	4b9c      	ldr	r3, [pc, #624]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001a62:	69da      	ldr	r2, [r3, #28]
 8001a64:	4b9b      	ldr	r3, [pc, #620]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001a66:	499d      	ldr	r1, [pc, #628]	; (8001cdc <HAL_RCC_OscConfig+0x684>)
 8001a68:	400a      	ands	r2, r1
 8001a6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2210      	movs	r2, #16
 8001a72:	4013      	ands	r3, r2
 8001a74:	d063      	beq.n	8001b3e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d12a      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a7e:	4b95      	ldr	r3, [pc, #596]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a82:	4b94      	ldr	r3, [pc, #592]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001a84:	2104      	movs	r1, #4
 8001a86:	430a      	orrs	r2, r1
 8001a88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a8a:	4b92      	ldr	r3, [pc, #584]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a8e:	4b91      	ldr	r3, [pc, #580]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001a90:	2101      	movs	r1, #1
 8001a92:	430a      	orrs	r2, r1
 8001a94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a96:	f7ff f9c9 	bl	8000e2c <HAL_GetTick>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001aa0:	f7ff f9c4 	bl	8000e2c <HAL_GetTick>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e152      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ab2:	4b88      	ldr	r3, [pc, #544]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d0f1      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001abc:	4b85      	ldr	r3, [pc, #532]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac0:	22f8      	movs	r2, #248	; 0xf8
 8001ac2:	4393      	bics	r3, r2
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	00da      	lsls	r2, r3, #3
 8001acc:	4b81      	ldr	r3, [pc, #516]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ad2:	e034      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	3305      	adds	r3, #5
 8001ada:	d111      	bne.n	8001b00 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001adc:	4b7d      	ldr	r3, [pc, #500]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae0:	4b7c      	ldr	r3, [pc, #496]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001ae2:	2104      	movs	r1, #4
 8001ae4:	438a      	bics	r2, r1
 8001ae6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ae8:	4b7a      	ldr	r3, [pc, #488]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aec:	22f8      	movs	r2, #248	; 0xf8
 8001aee:	4393      	bics	r3, r2
 8001af0:	0019      	movs	r1, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	00da      	lsls	r2, r3, #3
 8001af8:	4b76      	ldr	r3, [pc, #472]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001afa:	430a      	orrs	r2, r1
 8001afc:	635a      	str	r2, [r3, #52]	; 0x34
 8001afe:	e01e      	b.n	8001b3e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b00:	4b74      	ldr	r3, [pc, #464]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b04:	4b73      	ldr	r3, [pc, #460]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001b06:	2104      	movs	r1, #4
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b0c:	4b71      	ldr	r3, [pc, #452]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b10:	4b70      	ldr	r3, [pc, #448]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001b12:	2101      	movs	r1, #1
 8001b14:	438a      	bics	r2, r1
 8001b16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b18:	f7ff f988 	bl	8000e2c <HAL_GetTick>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b22:	f7ff f983 	bl	8000e2c <HAL_GetTick>
 8001b26:	0002      	movs	r2, r0
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e111      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b34:	4b67      	ldr	r3, [pc, #412]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b38:	2202      	movs	r2, #2
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d1f1      	bne.n	8001b22 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2220      	movs	r2, #32
 8001b44:	4013      	ands	r3, r2
 8001b46:	d05c      	beq.n	8001c02 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001b48:	4b62      	ldr	r3, [pc, #392]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	220c      	movs	r2, #12
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b0c      	cmp	r3, #12
 8001b52:	d00e      	beq.n	8001b72 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001b54:	4b5f      	ldr	r3, [pc, #380]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	220c      	movs	r2, #12
 8001b5a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d114      	bne.n	8001b8a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001b60:	4b5c      	ldr	r3, [pc, #368]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	23c0      	movs	r3, #192	; 0xc0
 8001b66:	025b      	lsls	r3, r3, #9
 8001b68:	401a      	ands	r2, r3
 8001b6a:	23c0      	movs	r3, #192	; 0xc0
 8001b6c:	025b      	lsls	r3, r3, #9
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d10b      	bne.n	8001b8a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001b72:	4b58      	ldr	r3, [pc, #352]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	029b      	lsls	r3, r3, #10
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d040      	beq.n	8001c00 <HAL_RCC_OscConfig+0x5a8>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d03c      	beq.n	8001c00 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0e6      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d01b      	beq.n	8001bca <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001b92:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b96:	4b4f      	ldr	r3, [pc, #316]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	0249      	lsls	r1, r1, #9
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff f944 	bl	8000e2c <HAL_GetTick>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001baa:	f7ff f93f 	bl	8000e2c <HAL_GetTick>
 8001bae:	0002      	movs	r2, r0
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e0cd      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001bbc:	4b45      	ldr	r3, [pc, #276]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	029b      	lsls	r3, r3, #10
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x552>
 8001bc8:	e01b      	b.n	8001c02 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001bca:	4b42      	ldr	r3, [pc, #264]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bce:	4b41      	ldr	r3, [pc, #260]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001bd0:	4943      	ldr	r1, [pc, #268]	; (8001ce0 <HAL_RCC_OscConfig+0x688>)
 8001bd2:	400a      	ands	r2, r1
 8001bd4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff f929 	bl	8000e2c <HAL_GetTick>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001be0:	f7ff f924 	bl	8000e2c <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e0b2      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001bf2:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	029b      	lsls	r3, r3, #10
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x588>
 8001bfe:	e000      	b.n	8001c02 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c00:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d100      	bne.n	8001c0c <HAL_RCC_OscConfig+0x5b4>
 8001c0a:	e0a4      	b.n	8001d56 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c0c:	4b31      	ldr	r3, [pc, #196]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	220c      	movs	r2, #12
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d100      	bne.n	8001c1a <HAL_RCC_OscConfig+0x5c2>
 8001c18:	e078      	b.n	8001d0c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d14c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c22:	4b2c      	ldr	r3, [pc, #176]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001c28:	492e      	ldr	r1, [pc, #184]	; (8001ce4 <HAL_RCC_OscConfig+0x68c>)
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7ff f8fd 	bl	8000e2c <HAL_GetTick>
 8001c32:	0003      	movs	r3, r0
 8001c34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff f8f8 	bl	8000e2c <HAL_GetTick>
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e086      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4a:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	049b      	lsls	r3, r3, #18
 8001c52:	4013      	ands	r3, r2
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c56:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	220f      	movs	r2, #15
 8001c5c:	4393      	bics	r3, r2
 8001c5e:	0019      	movs	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001c66:	430a      	orrs	r2, r1
 8001c68:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <HAL_RCC_OscConfig+0x690>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	0019      	movs	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001c80:	430a      	orrs	r2, r1
 8001c82:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001c8a:	2180      	movs	r1, #128	; 0x80
 8001c8c:	0449      	lsls	r1, r1, #17
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c92:	f7ff f8cb 	bl	8000e2c <HAL_GetTick>
 8001c96:	0003      	movs	r3, r0
 8001c98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7ff f8c6 	bl	8000e2c <HAL_GetTick>
 8001ca0:	0002      	movs	r2, r0
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e054      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	049b      	lsls	r3, r3, #18
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x644>
 8001cba:	e04c      	b.n	8001d56 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <HAL_RCC_OscConfig+0x67c>)
 8001cc2:	4908      	ldr	r1, [pc, #32]	; (8001ce4 <HAL_RCC_OscConfig+0x68c>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff f8b0 	bl	8000e2c <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd0:	e015      	b.n	8001cfe <HAL_RCC_OscConfig+0x6a6>
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	00001388 	.word	0x00001388
 8001cdc:	efffffff 	.word	0xefffffff
 8001ce0:	fffeffff 	.word	0xfffeffff
 8001ce4:	feffffff 	.word	0xfeffffff
 8001ce8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff f89e 	bl	8000e2c <HAL_GetTick>
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e02c      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <HAL_RCC_OscConfig+0x708>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	049b      	lsls	r3, r3, #18
 8001d06:	4013      	ands	r3, r2
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x694>
 8001d0a:	e024      	b.n	8001d56 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e01f      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_RCC_OscConfig+0x708>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <HAL_RCC_OscConfig+0x708>)
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	23c0      	movs	r3, #192	; 0xc0
 8001d28:	025b      	lsls	r3, r3, #9
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d10e      	bne.n	8001d52 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	220f      	movs	r2, #15
 8001d38:	401a      	ands	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d107      	bne.n	8001d52 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	23f0      	movs	r3, #240	; 0xf0
 8001d46:	039b      	lsls	r3, r3, #14
 8001d48:	401a      	ands	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b008      	add	sp, #32
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000

08001d64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0bf      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d78:	4b61      	ldr	r3, [pc, #388]	; (8001f00 <HAL_RCC_ClockConfig+0x19c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	4013      	ands	r3, r2
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d911      	bls.n	8001daa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b5e      	ldr	r3, [pc, #376]	; (8001f00 <HAL_RCC_ClockConfig+0x19c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4393      	bics	r3, r2
 8001d8e:	0019      	movs	r1, r3
 8001d90:	4b5b      	ldr	r3, [pc, #364]	; (8001f00 <HAL_RCC_ClockConfig+0x19c>)
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d98:	4b59      	ldr	r3, [pc, #356]	; (8001f00 <HAL_RCC_ClockConfig+0x19c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4013      	ands	r3, r2
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0a6      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2202      	movs	r2, #2
 8001db0:	4013      	ands	r3, r2
 8001db2:	d015      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2204      	movs	r2, #4
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d006      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001dbe:	4b51      	ldr	r3, [pc, #324]	; (8001f04 <HAL_RCC_ClockConfig+0x1a0>)
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <HAL_RCC_ClockConfig+0x1a0>)
 8001dc4:	21e0      	movs	r1, #224	; 0xe0
 8001dc6:	00c9      	lsls	r1, r1, #3
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dcc:	4b4d      	ldr	r3, [pc, #308]	; (8001f04 <HAL_RCC_ClockConfig+0x1a0>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	22f0      	movs	r2, #240	; 0xf0
 8001dd2:	4393      	bics	r3, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	4b4a      	ldr	r3, [pc, #296]	; (8001f04 <HAL_RCC_ClockConfig+0x1a0>)
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2201      	movs	r2, #1
 8001de6:	4013      	ands	r3, r2
 8001de8:	d04c      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d107      	bne.n	8001e02 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	4b44      	ldr	r3, [pc, #272]	; (8001f04 <HAL_RCC_ClockConfig+0x1a0>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	029b      	lsls	r3, r3, #10
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d120      	bne.n	8001e40 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e07a      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0a:	4b3e      	ldr	r3, [pc, #248]	; (8001f04 <HAL_RCC_ClockConfig+0x1a0>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	049b      	lsls	r3, r3, #18
 8001e12:	4013      	ands	r3, r2
 8001e14:	d114      	bne.n	8001e40 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e06e      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001e22:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <HAL_RCC_ClockConfig+0x1a0>)
 8001e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e26:	2380      	movs	r3, #128	; 0x80
 8001e28:	029b      	lsls	r3, r3, #10
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d108      	bne.n	8001e40 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e062      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e32:	4b34      	ldr	r3, [pc, #208]	; (8001f04 <HAL_RCC_ClockConfig+0x1a0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2202      	movs	r2, #2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e05b      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e40:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <HAL_RCC_ClockConfig+0x1a0>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2203      	movs	r2, #3
 8001e46:	4393      	bics	r3, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_RCC_ClockConfig+0x1a0>)
 8001e50:	430a      	orrs	r2, r1
 8001e52:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e54:	f7fe ffea 	bl	8000e2c <HAL_GetTick>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5c:	e009      	b.n	8001e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5e:	f7fe ffe5 	bl	8000e2c <HAL_GetTick>
 8001e62:	0002      	movs	r2, r0
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	4a27      	ldr	r2, [pc, #156]	; (8001f08 <HAL_RCC_ClockConfig+0x1a4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e042      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	4b24      	ldr	r3, [pc, #144]	; (8001f04 <HAL_RCC_ClockConfig+0x1a0>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	220c      	movs	r2, #12
 8001e78:	401a      	ands	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d1ec      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e84:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <HAL_RCC_ClockConfig+0x19c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d211      	bcs.n	8001eb6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <HAL_RCC_ClockConfig+0x19c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2201      	movs	r2, #1
 8001e98:	4393      	bics	r3, r2
 8001e9a:	0019      	movs	r1, r3
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_RCC_ClockConfig+0x19c>)
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea4:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <HAL_RCC_ClockConfig+0x19c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4013      	ands	r3, r2
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e020      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2204      	movs	r2, #4
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d009      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec0:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_RCC_ClockConfig+0x1a0>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a11      	ldr	r2, [pc, #68]	; (8001f0c <HAL_RCC_ClockConfig+0x1a8>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	0019      	movs	r1, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <HAL_RCC_ClockConfig+0x1a0>)
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ed4:	f000 f820 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8001ed8:	0001      	movs	r1, r0
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_RCC_ClockConfig+0x1a0>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	091b      	lsrs	r3, r3, #4
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	; (8001f10 <HAL_RCC_ClockConfig+0x1ac>)
 8001ee6:	5cd3      	ldrb	r3, [r2, r3]
 8001ee8:	000a      	movs	r2, r1
 8001eea:	40da      	lsrs	r2, r3
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_RCC_ClockConfig+0x1b0>)
 8001eee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7fe ff55 	bl	8000da0 <HAL_InitTick>
  
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b004      	add	sp, #16
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40022000 	.word	0x40022000
 8001f04:	40021000 	.word	0x40021000
 8001f08:	00001388 	.word	0x00001388
 8001f0c:	fffff8ff 	.word	0xfffff8ff
 8001f10:	08004420 	.word	0x08004420
 8001f14:	20000000 	.word	0x20000000

08001f18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001f32:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d046      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0xb8>
 8001f42:	d848      	bhi.n	8001fd6 <HAL_RCC_GetSysClockFreq+0xbe>
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d002      	beq.n	8001f4e <HAL_RCC_GetSysClockFreq+0x36>
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d003      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x3c>
 8001f4c:	e043      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f4e:	4b27      	ldr	r3, [pc, #156]	; (8001fec <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f50:	613b      	str	r3, [r7, #16]
      break;
 8001f52:	e043      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	0c9b      	lsrs	r3, r3, #18
 8001f58:	220f      	movs	r2, #15
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	4a24      	ldr	r2, [pc, #144]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001f5e:	5cd3      	ldrb	r3, [r2, r3]
 8001f60:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f62:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	220f      	movs	r2, #15
 8001f68:	4013      	ands	r3, r2
 8001f6a:	4a22      	ldr	r2, [pc, #136]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001f6c:	5cd3      	ldrb	r3, [r2, r3]
 8001f6e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	23c0      	movs	r3, #192	; 0xc0
 8001f74:	025b      	lsls	r3, r3, #9
 8001f76:	401a      	ands	r2, r3
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	025b      	lsls	r3, r3, #9
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d109      	bne.n	8001f94 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	481a      	ldr	r0, [pc, #104]	; (8001fec <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f84:	f7fe f8ca 	bl	800011c <__udivsi3>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	001a      	movs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4353      	muls	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	e01a      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	23c0      	movs	r3, #192	; 0xc0
 8001f98:	025b      	lsls	r3, r3, #9
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	23c0      	movs	r3, #192	; 0xc0
 8001f9e:	025b      	lsls	r3, r3, #9
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d109      	bne.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	4814      	ldr	r0, [pc, #80]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001fa8:	f7fe f8b8 	bl	800011c <__udivsi3>
 8001fac:	0003      	movs	r3, r0
 8001fae:	001a      	movs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4353      	muls	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	480c      	ldr	r0, [pc, #48]	; (8001fec <HAL_RCC_GetSysClockFreq+0xd4>)
 8001fbc:	f7fe f8ae 	bl	800011c <__udivsi3>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	001a      	movs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4353      	muls	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	613b      	str	r3, [r7, #16]
      break;
 8001fce:	e005      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001fd2:	613b      	str	r3, [r7, #16]
      break;
 8001fd4:	e002      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCC_GetSysClockFreq+0xd4>)
 8001fd8:	613b      	str	r3, [r7, #16]
      break;
 8001fda:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001fdc:	693b      	ldr	r3, [r7, #16]
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b006      	add	sp, #24
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	007a1200 	.word	0x007a1200
 8001ff0:	08004438 	.word	0x08004438
 8001ff4:	08004448 	.word	0x08004448
 8001ff8:	02dc6c00 	.word	0x02dc6c00

08001ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002000:	4b02      	ldr	r3, [pc, #8]	; (800200c <HAL_RCC_GetHCLKFreq+0x10>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	0018      	movs	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	20000000 	.word	0x20000000

08002010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002014:	f7ff fff2 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 8002018:	0001      	movs	r1, r0
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_RCC_GetPCLK1Freq+0x24>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	2207      	movs	r2, #7
 8002022:	4013      	ands	r3, r2
 8002024:	4a04      	ldr	r2, [pc, #16]	; (8002038 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002026:	5cd3      	ldrb	r3, [r2, r3]
 8002028:	40d9      	lsrs	r1, r3
 800202a:	000b      	movs	r3, r1
}    
 800202c:	0018      	movs	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	40021000 	.word	0x40021000
 8002038:	08004430 	.word	0x08004430

0800203c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	025b      	lsls	r3, r3, #9
 8002054:	4013      	ands	r3, r2
 8002056:	d100      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002058:	e08e      	b.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800205a:	2017      	movs	r0, #23
 800205c:	183b      	adds	r3, r7, r0
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002062:	4b6e      	ldr	r3, [pc, #440]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002064:	69da      	ldr	r2, [r3, #28]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	055b      	lsls	r3, r3, #21
 800206a:	4013      	ands	r3, r2
 800206c:	d110      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	4b6b      	ldr	r3, [pc, #428]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002070:	69da      	ldr	r2, [r3, #28]
 8002072:	4b6a      	ldr	r3, [pc, #424]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	0549      	lsls	r1, r1, #21
 8002078:	430a      	orrs	r2, r1
 800207a:	61da      	str	r2, [r3, #28]
 800207c:	4b67      	ldr	r3, [pc, #412]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800207e:	69da      	ldr	r2, [r3, #28]
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	055b      	lsls	r3, r3, #21
 8002084:	4013      	ands	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208a:	183b      	adds	r3, r7, r0
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002090:	4b63      	ldr	r3, [pc, #396]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4013      	ands	r3, r2
 800209a:	d11a      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209c:	4b60      	ldr	r3, [pc, #384]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b5f      	ldr	r3, [pc, #380]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80020a2:	2180      	movs	r1, #128	; 0x80
 80020a4:	0049      	lsls	r1, r1, #1
 80020a6:	430a      	orrs	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020aa:	f7fe febf 	bl	8000e2c <HAL_GetTick>
 80020ae:	0003      	movs	r3, r0
 80020b0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b2:	e008      	b.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b4:	f7fe feba 	bl	8000e2c <HAL_GetTick>
 80020b8:	0002      	movs	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	; 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e0a6      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c6:	4b56      	ldr	r3, [pc, #344]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4013      	ands	r3, r2
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020d2:	4b52      	ldr	r3, [pc, #328]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020d4:	6a1a      	ldr	r2, [r3, #32]
 80020d6:	23c0      	movs	r3, #192	; 0xc0
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4013      	ands	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d034      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	23c0      	movs	r3, #192	; 0xc0
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4013      	ands	r3, r2
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d02c      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020f4:	4b49      	ldr	r3, [pc, #292]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4a4a      	ldr	r2, [pc, #296]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020fe:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002100:	6a1a      	ldr	r2, [r3, #32]
 8002102:	4b46      	ldr	r3, [pc, #280]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	0249      	lsls	r1, r1, #9
 8002108:	430a      	orrs	r2, r1
 800210a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800210c:	4b43      	ldr	r3, [pc, #268]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800210e:	6a1a      	ldr	r2, [r3, #32]
 8002110:	4b42      	ldr	r3, [pc, #264]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002112:	4945      	ldr	r1, [pc, #276]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002114:	400a      	ands	r2, r1
 8002116:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002118:	4b40      	ldr	r3, [pc, #256]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	4013      	ands	r3, r2
 8002124:	d013      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7fe fe81 	bl	8000e2c <HAL_GetTick>
 800212a:	0003      	movs	r3, r0
 800212c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212e:	e009      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002130:	f7fe fe7c 	bl	8000e2c <HAL_GetTick>
 8002134:	0002      	movs	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	4a3c      	ldr	r2, [pc, #240]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e067      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	4b35      	ldr	r3, [pc, #212]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	2202      	movs	r2, #2
 800214a:	4013      	ands	r3, r2
 800214c:	d0f0      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800214e:	4b33      	ldr	r3, [pc, #204]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4a34      	ldr	r2, [pc, #208]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002154:	4013      	ands	r3, r2
 8002156:	0019      	movs	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	4b2f      	ldr	r3, [pc, #188]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800215e:	430a      	orrs	r2, r1
 8002160:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002162:	2317      	movs	r3, #23
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d105      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216c:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	4b2a      	ldr	r3, [pc, #168]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002172:	492f      	ldr	r1, [pc, #188]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002174:	400a      	ands	r2, r1
 8002176:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2201      	movs	r2, #1
 800217e:	4013      	ands	r3, r2
 8002180:	d009      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002182:	4b26      	ldr	r3, [pc, #152]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	2203      	movs	r2, #3
 8002188:	4393      	bics	r3, r2
 800218a:	0019      	movs	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	4b22      	ldr	r3, [pc, #136]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002192:	430a      	orrs	r2, r1
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2202      	movs	r2, #2
 800219c:	4013      	ands	r3, r2
 800219e:	d009      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021a0:	4b1e      	ldr	r3, [pc, #120]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	4a23      	ldr	r2, [pc, #140]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	0019      	movs	r1, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	4b1b      	ldr	r3, [pc, #108]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021b0:	430a      	orrs	r2, r1
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2220      	movs	r2, #32
 80021ba:	4013      	ands	r3, r2
 80021bc:	d009      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021be:	4b17      	ldr	r3, [pc, #92]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	2210      	movs	r2, #16
 80021c4:	4393      	bics	r3, r2
 80021c6:	0019      	movs	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021ce:	430a      	orrs	r2, r1
 80021d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	029b      	lsls	r3, r3, #10
 80021da:	4013      	ands	r3, r2
 80021dc:	d009      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	2280      	movs	r2, #128	; 0x80
 80021e4:	4393      	bics	r3, r2
 80021e6:	0019      	movs	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699a      	ldr	r2, [r3, #24]
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021ee:	430a      	orrs	r2, r1
 80021f0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	4013      	ands	r3, r2
 80021fc:	d009      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	2240      	movs	r2, #64	; 0x40
 8002204:	4393      	bics	r3, r2
 8002206:	0019      	movs	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800220e:	430a      	orrs	r2, r1
 8002210:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	0018      	movs	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	b006      	add	sp, #24
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021000 	.word	0x40021000
 8002220:	40007000 	.word	0x40007000
 8002224:	fffffcff 	.word	0xfffffcff
 8002228:	fffeffff 	.word	0xfffeffff
 800222c:	00001388 	.word	0x00001388
 8002230:	efffffff 	.word	0xefffffff
 8002234:	fffcffff 	.word	0xfffcffff

08002238 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e042      	b.n	80022d0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	223d      	movs	r2, #61	; 0x3d
 800224e:	5c9b      	ldrb	r3, [r3, r2]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d107      	bne.n	8002266 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	223c      	movs	r2, #60	; 0x3c
 800225a:	2100      	movs	r1, #0
 800225c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	0018      	movs	r0, r3
 8002262:	f7fe fc2b 	bl	8000abc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	223d      	movs	r2, #61	; 0x3d
 800226a:	2102      	movs	r1, #2
 800226c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	0019      	movs	r1, r3
 8002278:	0010      	movs	r0, r2
 800227a:	f000 fa3f 	bl	80026fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2246      	movs	r2, #70	; 0x46
 8002282:	2101      	movs	r1, #1
 8002284:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	223e      	movs	r2, #62	; 0x3e
 800228a:	2101      	movs	r1, #1
 800228c:	5499      	strb	r1, [r3, r2]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	223f      	movs	r2, #63	; 0x3f
 8002292:	2101      	movs	r1, #1
 8002294:	5499      	strb	r1, [r3, r2]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2240      	movs	r2, #64	; 0x40
 800229a:	2101      	movs	r1, #1
 800229c:	5499      	strb	r1, [r3, r2]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2241      	movs	r2, #65	; 0x41
 80022a2:	2101      	movs	r1, #1
 80022a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2242      	movs	r2, #66	; 0x42
 80022aa:	2101      	movs	r1, #1
 80022ac:	5499      	strb	r1, [r3, r2]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2243      	movs	r2, #67	; 0x43
 80022b2:	2101      	movs	r1, #1
 80022b4:	5499      	strb	r1, [r3, r2]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2244      	movs	r2, #68	; 0x44
 80022ba:	2101      	movs	r1, #1
 80022bc:	5499      	strb	r1, [r3, r2]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2245      	movs	r2, #69	; 0x45
 80022c2:	2101      	movs	r1, #1
 80022c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	223d      	movs	r2, #61	; 0x3d
 80022ca:	2101      	movs	r1, #1
 80022cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	0018      	movs	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b002      	add	sp, #8
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e090      	b.n	800240e <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	223d      	movs	r2, #61	; 0x3d
 80022f0:	5c9b      	ldrb	r3, [r3, r2]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d107      	bne.n	8002308 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	223c      	movs	r2, #60	; 0x3c
 80022fc:	2100      	movs	r1, #0
 80022fe:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	0018      	movs	r0, r3
 8002304:	f7fe fb90 	bl	8000a28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	223d      	movs	r2, #61	; 0x3d
 800230c:	2102      	movs	r1, #2
 800230e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	493f      	ldr	r1, [pc, #252]	; (8002418 <HAL_TIM_Encoder_Init+0x140>)
 800231c:	400a      	ands	r2, r1
 800231e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	0019      	movs	r1, r3
 800232a:	0010      	movs	r0, r2
 800232c:	f000 f9e6 	bl	80026fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	4313      	orrs	r3, r2
 8002350:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4a31      	ldr	r2, [pc, #196]	; (800241c <HAL_TIM_Encoder_Init+0x144>)
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	4313      	orrs	r3, r2
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4a2c      	ldr	r2, [pc, #176]	; (8002420 <HAL_TIM_Encoder_Init+0x148>)
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4a2b      	ldr	r2, [pc, #172]	; (8002424 <HAL_TIM_Encoder_Init+0x14c>)
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	4313      	orrs	r3, r2
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	011a      	lsls	r2, r3, #4
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	031b      	lsls	r3, r3, #12
 800239a:	4313      	orrs	r3, r2
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2222      	movs	r2, #34	; 0x22
 80023a6:	4393      	bics	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2288      	movs	r2, #136	; 0x88
 80023ae:	4393      	bics	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	4313      	orrs	r3, r2
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2246      	movs	r2, #70	; 0x46
 80023e0:	2101      	movs	r1, #1
 80023e2:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	223e      	movs	r2, #62	; 0x3e
 80023e8:	2101      	movs	r1, #1
 80023ea:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	223f      	movs	r2, #63	; 0x3f
 80023f0:	2101      	movs	r1, #1
 80023f2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2242      	movs	r2, #66	; 0x42
 80023f8:	2101      	movs	r1, #1
 80023fa:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2243      	movs	r2, #67	; 0x43
 8002400:	2101      	movs	r1, #1
 8002402:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	223d      	movs	r2, #61	; 0x3d
 8002408:	2101      	movs	r1, #1
 800240a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	0018      	movs	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	b006      	add	sp, #24
 8002414:	bd80      	pop	{r7, pc}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	ffffbff8 	.word	0xffffbff8
 800241c:	fffffcfc 	.word	0xfffffcfc
 8002420:	fffff3f3 	.word	0xfffff3f3
 8002424:	ffff0f0f 	.word	0xffff0f0f

08002428 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002432:	200f      	movs	r0, #15
 8002434:	183b      	adds	r3, r7, r0
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	213e      	movs	r1, #62	; 0x3e
 800243a:	5c52      	ldrb	r2, [r2, r1]
 800243c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800243e:	230e      	movs	r3, #14
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	213f      	movs	r1, #63	; 0x3f
 8002446:	5c52      	ldrb	r2, [r2, r1]
 8002448:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800244a:	240d      	movs	r4, #13
 800244c:	193b      	adds	r3, r7, r4
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	2142      	movs	r1, #66	; 0x42
 8002452:	5c52      	ldrb	r2, [r2, r1]
 8002454:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002456:	230c      	movs	r3, #12
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	2143      	movs	r1, #67	; 0x43
 800245e:	5c52      	ldrb	r2, [r2, r1]
 8002460:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d112      	bne.n	800248e <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002468:	183b      	adds	r3, r7, r0
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d103      	bne.n	8002478 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002470:	193b      	adds	r3, r7, r4
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d001      	beq.n	800247c <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e075      	b.n	8002568 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	223e      	movs	r2, #62	; 0x3e
 8002480:	2102      	movs	r1, #2
 8002482:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2242      	movs	r2, #66	; 0x42
 8002488:	2102      	movs	r1, #2
 800248a:	5499      	strb	r1, [r3, r2]
 800248c:	e03d      	b.n	800250a <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b04      	cmp	r3, #4
 8002492:	d114      	bne.n	80024be <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002494:	230e      	movs	r3, #14
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d104      	bne.n	80024a8 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800249e:	230c      	movs	r3, #12
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d001      	beq.n	80024ac <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e05d      	b.n	8002568 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	223f      	movs	r2, #63	; 0x3f
 80024b0:	2102      	movs	r1, #2
 80024b2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2243      	movs	r2, #67	; 0x43
 80024b8:	2102      	movs	r1, #2
 80024ba:	5499      	strb	r1, [r3, r2]
 80024bc:	e025      	b.n	800250a <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80024be:	230f      	movs	r3, #15
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d10e      	bne.n	80024e6 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80024c8:	230e      	movs	r3, #14
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d109      	bne.n	80024e6 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80024d2:	230d      	movs	r3, #13
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d104      	bne.n	80024e6 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80024dc:	230c      	movs	r3, #12
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d001      	beq.n	80024ea <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e03e      	b.n	8002568 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	223e      	movs	r2, #62	; 0x3e
 80024ee:	2102      	movs	r1, #2
 80024f0:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	223f      	movs	r2, #63	; 0x3f
 80024f6:	2102      	movs	r1, #2
 80024f8:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2242      	movs	r2, #66	; 0x42
 80024fe:	2102      	movs	r1, #2
 8002500:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2243      	movs	r2, #67	; 0x43
 8002506:	2102      	movs	r1, #2
 8002508:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_TIM_Encoder_Start+0xf0>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b04      	cmp	r3, #4
 8002514:	d008      	beq.n	8002528 <HAL_TIM_Encoder_Start+0x100>
 8002516:	e00f      	b.n	8002538 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2201      	movs	r2, #1
 800251e:	2100      	movs	r1, #0
 8002520:	0018      	movs	r0, r3
 8002522:	f000 fb67 	bl	8002bf4 <TIM_CCxChannelCmd>
      break;
 8002526:	e016      	b.n	8002556 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2201      	movs	r2, #1
 800252e:	2104      	movs	r1, #4
 8002530:	0018      	movs	r0, r3
 8002532:	f000 fb5f 	bl	8002bf4 <TIM_CCxChannelCmd>
      break;
 8002536:	e00e      	b.n	8002556 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2201      	movs	r2, #1
 800253e:	2100      	movs	r1, #0
 8002540:	0018      	movs	r0, r3
 8002542:	f000 fb57 	bl	8002bf4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2201      	movs	r2, #1
 800254c:	2104      	movs	r1, #4
 800254e:	0018      	movs	r0, r3
 8002550:	f000 fb50 	bl	8002bf4 <TIM_CCxChannelCmd>
      break;
 8002554:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	430a      	orrs	r2, r1
 8002564:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	b005      	add	sp, #20
 800256e:	bd90      	pop	{r4, r7, pc}

08002570 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800257c:	2317      	movs	r3, #23
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	223c      	movs	r2, #60	; 0x3c
 8002588:	5c9b      	ldrb	r3, [r3, r2]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d101      	bne.n	8002592 <HAL_TIM_PWM_ConfigChannel+0x22>
 800258e:	2302      	movs	r3, #2
 8002590:	e0ad      	b.n	80026ee <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	223c      	movs	r2, #60	; 0x3c
 8002596:	2101      	movs	r1, #1
 8002598:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b0c      	cmp	r3, #12
 800259e:	d100      	bne.n	80025a2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80025a0:	e076      	b.n	8002690 <HAL_TIM_PWM_ConfigChannel+0x120>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b0c      	cmp	r3, #12
 80025a6:	d900      	bls.n	80025aa <HAL_TIM_PWM_ConfigChannel+0x3a>
 80025a8:	e095      	b.n	80026d6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d04e      	beq.n	800264e <HAL_TIM_PWM_ConfigChannel+0xde>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d900      	bls.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80025b6:	e08e      	b.n	80026d6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d021      	beq.n	8002608 <HAL_TIM_PWM_ConfigChannel+0x98>
 80025c4:	e087      	b.n	80026d6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	0011      	movs	r1, r2
 80025ce:	0018      	movs	r0, r3
 80025d0:	f000 f914 	bl	80027fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2108      	movs	r1, #8
 80025e0:	430a      	orrs	r2, r1
 80025e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2104      	movs	r1, #4
 80025f0:	438a      	bics	r2, r1
 80025f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6999      	ldr	r1, [r3, #24]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	619a      	str	r2, [r3, #24]
      break;
 8002606:	e06b      	b.n	80026e0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	0011      	movs	r1, r2
 8002610:	0018      	movs	r0, r3
 8002612:	f000 f97b 	bl	800290c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699a      	ldr	r2, [r3, #24]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2180      	movs	r1, #128	; 0x80
 8002622:	0109      	lsls	r1, r1, #4
 8002624:	430a      	orrs	r2, r1
 8002626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4931      	ldr	r1, [pc, #196]	; (80026f8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002634:	400a      	ands	r2, r1
 8002636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6999      	ldr	r1, [r3, #24]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	021a      	lsls	r2, r3, #8
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	619a      	str	r2, [r3, #24]
      break;
 800264c:	e048      	b.n	80026e0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	0011      	movs	r1, r2
 8002656:	0018      	movs	r0, r3
 8002658:	f000 f9dc 	bl	8002a14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	69da      	ldr	r2, [r3, #28]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2108      	movs	r1, #8
 8002668:	430a      	orrs	r2, r1
 800266a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2104      	movs	r1, #4
 8002678:	438a      	bics	r2, r1
 800267a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69d9      	ldr	r1, [r3, #28]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	61da      	str	r2, [r3, #28]
      break;
 800268e:	e027      	b.n	80026e0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	0011      	movs	r1, r2
 8002698:	0018      	movs	r0, r3
 800269a:	f000 fa41 	bl	8002b20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69da      	ldr	r2, [r3, #28]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2180      	movs	r1, #128	; 0x80
 80026aa:	0109      	lsls	r1, r1, #4
 80026ac:	430a      	orrs	r2, r1
 80026ae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	490f      	ldr	r1, [pc, #60]	; (80026f8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80026bc:	400a      	ands	r2, r1
 80026be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	69d9      	ldr	r1, [r3, #28]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	021a      	lsls	r2, r3, #8
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	61da      	str	r2, [r3, #28]
      break;
 80026d4:	e004      	b.n	80026e0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80026d6:	2317      	movs	r3, #23
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
      break;
 80026de:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	223c      	movs	r2, #60	; 0x3c
 80026e4:	2100      	movs	r1, #0
 80026e6:	5499      	strb	r1, [r3, r2]

  return status;
 80026e8:	2317      	movs	r3, #23
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	781b      	ldrb	r3, [r3, #0]
}
 80026ee:	0018      	movs	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b006      	add	sp, #24
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	fffffbff 	.word	0xfffffbff

080026fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a34      	ldr	r2, [pc, #208]	; (80027e0 <TIM_Base_SetConfig+0xe4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d008      	beq.n	8002726 <TIM_Base_SetConfig+0x2a>
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	05db      	lsls	r3, r3, #23
 800271a:	429a      	cmp	r2, r3
 800271c:	d003      	beq.n	8002726 <TIM_Base_SetConfig+0x2a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a30      	ldr	r2, [pc, #192]	; (80027e4 <TIM_Base_SetConfig+0xe8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d108      	bne.n	8002738 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2270      	movs	r2, #112	; 0x70
 800272a:	4393      	bics	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a29      	ldr	r2, [pc, #164]	; (80027e0 <TIM_Base_SetConfig+0xe4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d018      	beq.n	8002772 <TIM_Base_SetConfig+0x76>
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	05db      	lsls	r3, r3, #23
 8002746:	429a      	cmp	r2, r3
 8002748:	d013      	beq.n	8002772 <TIM_Base_SetConfig+0x76>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a25      	ldr	r2, [pc, #148]	; (80027e4 <TIM_Base_SetConfig+0xe8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00f      	beq.n	8002772 <TIM_Base_SetConfig+0x76>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a24      	ldr	r2, [pc, #144]	; (80027e8 <TIM_Base_SetConfig+0xec>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00b      	beq.n	8002772 <TIM_Base_SetConfig+0x76>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a23      	ldr	r2, [pc, #140]	; (80027ec <TIM_Base_SetConfig+0xf0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d007      	beq.n	8002772 <TIM_Base_SetConfig+0x76>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <TIM_Base_SetConfig+0xf4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d003      	beq.n	8002772 <TIM_Base_SetConfig+0x76>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a21      	ldr	r2, [pc, #132]	; (80027f4 <TIM_Base_SetConfig+0xf8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d108      	bne.n	8002784 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4a20      	ldr	r2, [pc, #128]	; (80027f8 <TIM_Base_SetConfig+0xfc>)
 8002776:	4013      	ands	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4313      	orrs	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2280      	movs	r2, #128	; 0x80
 8002788:	4393      	bics	r3, r2
 800278a:	001a      	movs	r2, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a0c      	ldr	r2, [pc, #48]	; (80027e0 <TIM_Base_SetConfig+0xe4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00b      	beq.n	80027ca <TIM_Base_SetConfig+0xce>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <TIM_Base_SetConfig+0xf0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d007      	beq.n	80027ca <TIM_Base_SetConfig+0xce>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <TIM_Base_SetConfig+0xf4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d003      	beq.n	80027ca <TIM_Base_SetConfig+0xce>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a0b      	ldr	r2, [pc, #44]	; (80027f4 <TIM_Base_SetConfig+0xf8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d103      	bne.n	80027d2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	691a      	ldr	r2, [r3, #16]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	615a      	str	r2, [r3, #20]
}
 80027d8:	46c0      	nop			; (mov r8, r8)
 80027da:	46bd      	mov	sp, r7
 80027dc:	b004      	add	sp, #16
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40012c00 	.word	0x40012c00
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40002000 	.word	0x40002000
 80027ec:	40014000 	.word	0x40014000
 80027f0:	40014400 	.word	0x40014400
 80027f4:	40014800 	.word	0x40014800
 80027f8:	fffffcff 	.word	0xfffffcff

080027fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	2201      	movs	r2, #1
 800280c:	4393      	bics	r3, r2
 800280e:	001a      	movs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2270      	movs	r2, #112	; 0x70
 800282a:	4393      	bics	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2203      	movs	r2, #3
 8002832:	4393      	bics	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2202      	movs	r2, #2
 8002844:	4393      	bics	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	4313      	orrs	r3, r2
 8002850:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a27      	ldr	r2, [pc, #156]	; (80028f4 <TIM_OC1_SetConfig+0xf8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00b      	beq.n	8002872 <TIM_OC1_SetConfig+0x76>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a26      	ldr	r2, [pc, #152]	; (80028f8 <TIM_OC1_SetConfig+0xfc>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d007      	beq.n	8002872 <TIM_OC1_SetConfig+0x76>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a25      	ldr	r2, [pc, #148]	; (80028fc <TIM_OC1_SetConfig+0x100>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d003      	beq.n	8002872 <TIM_OC1_SetConfig+0x76>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a24      	ldr	r2, [pc, #144]	; (8002900 <TIM_OC1_SetConfig+0x104>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10c      	bne.n	800288c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2208      	movs	r2, #8
 8002876:	4393      	bics	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	4313      	orrs	r3, r2
 8002882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2204      	movs	r2, #4
 8002888:	4393      	bics	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a19      	ldr	r2, [pc, #100]	; (80028f4 <TIM_OC1_SetConfig+0xf8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00b      	beq.n	80028ac <TIM_OC1_SetConfig+0xb0>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a18      	ldr	r2, [pc, #96]	; (80028f8 <TIM_OC1_SetConfig+0xfc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d007      	beq.n	80028ac <TIM_OC1_SetConfig+0xb0>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a17      	ldr	r2, [pc, #92]	; (80028fc <TIM_OC1_SetConfig+0x100>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d003      	beq.n	80028ac <TIM_OC1_SetConfig+0xb0>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a16      	ldr	r2, [pc, #88]	; (8002900 <TIM_OC1_SetConfig+0x104>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d111      	bne.n	80028d0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4a15      	ldr	r2, [pc, #84]	; (8002904 <TIM_OC1_SetConfig+0x108>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4a14      	ldr	r2, [pc, #80]	; (8002908 <TIM_OC1_SetConfig+0x10c>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	621a      	str	r2, [r3, #32]
}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b006      	add	sp, #24
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	40012c00 	.word	0x40012c00
 80028f8:	40014000 	.word	0x40014000
 80028fc:	40014400 	.word	0x40014400
 8002900:	40014800 	.word	0x40014800
 8002904:	fffffeff 	.word	0xfffffeff
 8002908:	fffffdff 	.word	0xfffffdff

0800290c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	2210      	movs	r2, #16
 800291c:	4393      	bics	r3, r2
 800291e:	001a      	movs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4a2e      	ldr	r2, [pc, #184]	; (80029f4 <TIM_OC2_SetConfig+0xe8>)
 800293a:	4013      	ands	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4a2d      	ldr	r2, [pc, #180]	; (80029f8 <TIM_OC2_SetConfig+0xec>)
 8002942:	4013      	ands	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2220      	movs	r2, #32
 8002956:	4393      	bics	r3, r2
 8002958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a24      	ldr	r2, [pc, #144]	; (80029fc <TIM_OC2_SetConfig+0xf0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d10d      	bne.n	800298a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2280      	movs	r2, #128	; 0x80
 8002972:	4393      	bics	r3, r2
 8002974:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	4313      	orrs	r3, r2
 8002980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2240      	movs	r2, #64	; 0x40
 8002986:	4393      	bics	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a1b      	ldr	r2, [pc, #108]	; (80029fc <TIM_OC2_SetConfig+0xf0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00b      	beq.n	80029aa <TIM_OC2_SetConfig+0x9e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a1a      	ldr	r2, [pc, #104]	; (8002a00 <TIM_OC2_SetConfig+0xf4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d007      	beq.n	80029aa <TIM_OC2_SetConfig+0x9e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a19      	ldr	r2, [pc, #100]	; (8002a04 <TIM_OC2_SetConfig+0xf8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d003      	beq.n	80029aa <TIM_OC2_SetConfig+0x9e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <TIM_OC2_SetConfig+0xfc>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d113      	bne.n	80029d2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4a17      	ldr	r2, [pc, #92]	; (8002a0c <TIM_OC2_SetConfig+0x100>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4a16      	ldr	r2, [pc, #88]	; (8002a10 <TIM_OC2_SetConfig+0x104>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	621a      	str	r2, [r3, #32]
}
 80029ec:	46c0      	nop			; (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b006      	add	sp, #24
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	ffff8fff 	.word	0xffff8fff
 80029f8:	fffffcff 	.word	0xfffffcff
 80029fc:	40012c00 	.word	0x40012c00
 8002a00:	40014000 	.word	0x40014000
 8002a04:	40014400 	.word	0x40014400
 8002a08:	40014800 	.word	0x40014800
 8002a0c:	fffffbff 	.word	0xfffffbff
 8002a10:	fffff7ff 	.word	0xfffff7ff

08002a14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	4a35      	ldr	r2, [pc, #212]	; (8002af8 <TIM_OC3_SetConfig+0xe4>)
 8002a24:	401a      	ands	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2270      	movs	r2, #112	; 0x70
 8002a40:	4393      	bics	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2203      	movs	r2, #3
 8002a48:	4393      	bics	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	4a28      	ldr	r2, [pc, #160]	; (8002afc <TIM_OC3_SetConfig+0xe8>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a24      	ldr	r2, [pc, #144]	; (8002b00 <TIM_OC3_SetConfig+0xec>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10d      	bne.n	8002a8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	4a23      	ldr	r2, [pc, #140]	; (8002b04 <TIM_OC3_SetConfig+0xf0>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	4a1f      	ldr	r2, [pc, #124]	; (8002b08 <TIM_OC3_SetConfig+0xf4>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a1b      	ldr	r2, [pc, #108]	; (8002b00 <TIM_OC3_SetConfig+0xec>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00b      	beq.n	8002aae <TIM_OC3_SetConfig+0x9a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a1c      	ldr	r2, [pc, #112]	; (8002b0c <TIM_OC3_SetConfig+0xf8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d007      	beq.n	8002aae <TIM_OC3_SetConfig+0x9a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a1b      	ldr	r2, [pc, #108]	; (8002b10 <TIM_OC3_SetConfig+0xfc>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d003      	beq.n	8002aae <TIM_OC3_SetConfig+0x9a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a1a      	ldr	r2, [pc, #104]	; (8002b14 <TIM_OC3_SetConfig+0x100>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d113      	bne.n	8002ad6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4a19      	ldr	r2, [pc, #100]	; (8002b18 <TIM_OC3_SetConfig+0x104>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <TIM_OC3_SetConfig+0x108>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	621a      	str	r2, [r3, #32]
}
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b006      	add	sp, #24
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	fffffeff 	.word	0xfffffeff
 8002afc:	fffffdff 	.word	0xfffffdff
 8002b00:	40012c00 	.word	0x40012c00
 8002b04:	fffff7ff 	.word	0xfffff7ff
 8002b08:	fffffbff 	.word	0xfffffbff
 8002b0c:	40014000 	.word	0x40014000
 8002b10:	40014400 	.word	0x40014400
 8002b14:	40014800 	.word	0x40014800
 8002b18:	ffffefff 	.word	0xffffefff
 8002b1c:	ffffdfff 	.word	0xffffdfff

08002b20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4a28      	ldr	r2, [pc, #160]	; (8002bd0 <TIM_OC4_SetConfig+0xb0>)
 8002b30:	401a      	ands	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4a22      	ldr	r2, [pc, #136]	; (8002bd4 <TIM_OC4_SetConfig+0xb4>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a21      	ldr	r2, [pc, #132]	; (8002bd8 <TIM_OC4_SetConfig+0xb8>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4a1d      	ldr	r2, [pc, #116]	; (8002bdc <TIM_OC4_SetConfig+0xbc>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	031b      	lsls	r3, r3, #12
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a19      	ldr	r2, [pc, #100]	; (8002be0 <TIM_OC4_SetConfig+0xc0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d00b      	beq.n	8002b98 <TIM_OC4_SetConfig+0x78>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a18      	ldr	r2, [pc, #96]	; (8002be4 <TIM_OC4_SetConfig+0xc4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d007      	beq.n	8002b98 <TIM_OC4_SetConfig+0x78>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a17      	ldr	r2, [pc, #92]	; (8002be8 <TIM_OC4_SetConfig+0xc8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d003      	beq.n	8002b98 <TIM_OC4_SetConfig+0x78>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a16      	ldr	r2, [pc, #88]	; (8002bec <TIM_OC4_SetConfig+0xcc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d109      	bne.n	8002bac <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <TIM_OC4_SetConfig+0xd0>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	019b      	lsls	r3, r3, #6
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	621a      	str	r2, [r3, #32]
}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b006      	add	sp, #24
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	ffffefff 	.word	0xffffefff
 8002bd4:	ffff8fff 	.word	0xffff8fff
 8002bd8:	fffffcff 	.word	0xfffffcff
 8002bdc:	ffffdfff 	.word	0xffffdfff
 8002be0:	40012c00 	.word	0x40012c00
 8002be4:	40014000 	.word	0x40014000
 8002be8:	40014400 	.word	0x40014400
 8002bec:	40014800 	.word	0x40014800
 8002bf0:	ffffbfff 	.word	0xffffbfff

08002bf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	221f      	movs	r2, #31
 8002c04:	4013      	ands	r3, r2
 8002c06:	2201      	movs	r2, #1
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	0013      	movs	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	43d2      	mvns	r2, r2
 8002c16:	401a      	ands	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a1a      	ldr	r2, [r3, #32]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	211f      	movs	r1, #31
 8002c24:	400b      	ands	r3, r1
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4099      	lsls	r1, r3
 8002c2a:	000b      	movs	r3, r1
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	621a      	str	r2, [r3, #32]
}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b006      	add	sp, #24
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	223c      	movs	r2, #60	; 0x3c
 8002c4a:	5c9b      	ldrb	r3, [r3, r2]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e047      	b.n	8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	223c      	movs	r2, #60	; 0x3c
 8002c58:	2101      	movs	r1, #1
 8002c5a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	223d      	movs	r2, #61	; 0x3d
 8002c60:	2102      	movs	r1, #2
 8002c62:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2270      	movs	r2, #112	; 0x70
 8002c78:	4393      	bics	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a16      	ldr	r2, [pc, #88]	; (8002cec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00f      	beq.n	8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	05db      	lsls	r3, r3, #23
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d009      	beq.n	8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d004      	beq.n	8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a10      	ldr	r2, [pc, #64]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d10c      	bne.n	8002cd2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	4393      	bics	r3, r2
 8002cbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	223d      	movs	r2, #61	; 0x3d
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	223c      	movs	r2, #60	; 0x3c
 8002cde:	2100      	movs	r1, #0
 8002ce0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b004      	add	sp, #16
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40012c00 	.word	0x40012c00
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	40014000 	.word	0x40014000

08002cf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e044      	b.n	8002d94 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d107      	bne.n	8002d22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2278      	movs	r2, #120	; 0x78
 8002d16:	2100      	movs	r1, #0
 8002d18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f7fd ff29 	bl	8000b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2224      	movs	r2, #36	; 0x24
 8002d26:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2101      	movs	r1, #1
 8002d34:	438a      	bics	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f000 f94a 	bl	8002fd4 <UART_SetConfig>
 8002d40:	0003      	movs	r3, r0
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e024      	b.n	8002d94 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f000 fac5 	bl	80032e4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	490d      	ldr	r1, [pc, #52]	; (8002d9c <HAL_UART_Init+0xa4>)
 8002d66:	400a      	ands	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	212a      	movs	r1, #42	; 0x2a
 8002d76:	438a      	bics	r2, r1
 8002d78:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2101      	movs	r1, #1
 8002d86:	430a      	orrs	r2, r1
 8002d88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f000 fb5d 	bl	800344c <UART_CheckIdleState>
 8002d92:	0003      	movs	r3, r0
}
 8002d94:	0018      	movs	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b002      	add	sp, #8
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	ffffb7ff 	.word	0xffffb7ff

08002da0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	; 0x28
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	1dbb      	adds	r3, r7, #6
 8002dae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	d000      	beq.n	8002dba <HAL_UART_Transmit+0x1a>
 8002db8:	e08d      	b.n	8002ed6 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_UART_Transmit+0x28>
 8002dc0:	1dbb      	adds	r3, r7, #6
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e085      	b.n	8002ed8 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	015b      	lsls	r3, r3, #5
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d109      	bne.n	8002dec <HAL_UART_Transmit+0x4c>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2201      	movs	r2, #1
 8002de4:	4013      	ands	r3, r2
 8002de6:	d001      	beq.n	8002dec <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e075      	b.n	8002ed8 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2284      	movs	r2, #132	; 0x84
 8002df0:	2100      	movs	r1, #0
 8002df2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2221      	movs	r2, #33	; 0x21
 8002df8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dfa:	f7fe f817 	bl	8000e2c <HAL_GetTick>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1dba      	adds	r2, r7, #6
 8002e06:	2150      	movs	r1, #80	; 0x50
 8002e08:	8812      	ldrh	r2, [r2, #0]
 8002e0a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1dba      	adds	r2, r7, #6
 8002e10:	2152      	movs	r1, #82	; 0x52
 8002e12:	8812      	ldrh	r2, [r2, #0]
 8002e14:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	015b      	lsls	r3, r3, #5
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d108      	bne.n	8002e34 <HAL_UART_Transmit+0x94>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d104      	bne.n	8002e34 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	e003      	b.n	8002e3c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e3c:	e030      	b.n	8002ea0 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	0013      	movs	r3, r2
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2180      	movs	r1, #128	; 0x80
 8002e4c:	f000 fba6 	bl	800359c <UART_WaitOnFlagUntilTimeout>
 8002e50:	1e03      	subs	r3, r0, #0
 8002e52:	d004      	beq.n	8002e5e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e03c      	b.n	8002ed8 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10b      	bne.n	8002e7c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	881a      	ldrh	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	05d2      	lsls	r2, r2, #23
 8002e6e:	0dd2      	lsrs	r2, r2, #23
 8002e70:	b292      	uxth	r2, r2
 8002e72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	3302      	adds	r3, #2
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	e008      	b.n	8002e8e <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	781a      	ldrb	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	b292      	uxth	r2, r2
 8002e86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2252      	movs	r2, #82	; 0x52
 8002e92:	5a9b      	ldrh	r3, [r3, r2]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b299      	uxth	r1, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2252      	movs	r2, #82	; 0x52
 8002e9e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2252      	movs	r2, #82	; 0x52
 8002ea4:	5a9b      	ldrh	r3, [r3, r2]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1c8      	bne.n	8002e3e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	0013      	movs	r3, r2
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2140      	movs	r1, #64	; 0x40
 8002eba:	f000 fb6f 	bl	800359c <UART_WaitOnFlagUntilTimeout>
 8002ebe:	1e03      	subs	r3, r0, #0
 8002ec0:	d004      	beq.n	8002ecc <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e005      	b.n	8002ed8 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e000      	b.n	8002ed8 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002ed6:	2302      	movs	r3, #2
  }
}
 8002ed8:	0018      	movs	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	b008      	add	sp, #32
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	1dbb      	adds	r3, r7, #6
 8002eec:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	589b      	ldr	r3, [r3, r2]
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d145      	bne.n	8002f84 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_UART_Receive_DMA+0x26>
 8002efe:	1dbb      	adds	r3, r7, #6
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e03d      	b.n	8002f86 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	015b      	lsls	r3, r3, #5
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d109      	bne.n	8002f2a <HAL_UART_Receive_DMA+0x4a>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d105      	bne.n	8002f2a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2201      	movs	r2, #1
 8002f22:	4013      	ands	r3, r2
 8002f24:	d001      	beq.n	8002f2a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e02d      	b.n	8002f86 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	041b      	lsls	r3, r3, #16
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d019      	beq.n	8002f72 <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f42:	613b      	str	r3, [r7, #16]
  return(result);
 8002f44:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f46:	61fb      	str	r3, [r7, #28]
 8002f48:	2301      	movs	r3, #1
 8002f4a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f383 8810 	msr	PRIMASK, r3
}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2180      	movs	r1, #128	; 0x80
 8002f60:	04c9      	lsls	r1, r1, #19
 8002f62:	430a      	orrs	r2, r1
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f383 8810 	msr	PRIMASK, r3
}
 8002f70:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002f72:	1dbb      	adds	r3, r7, #6
 8002f74:	881a      	ldrh	r2, [r3, #0]
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f000 fb78 	bl	8003670 <UART_Start_Receive_DMA>
 8002f80:	0003      	movs	r3, r0
 8002f82:	e000      	b.n	8002f86 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
  }
}
 8002f86:	0018      	movs	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b008      	add	sp, #32
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b002      	add	sp, #8
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	b002      	add	sp, #8
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b002      	add	sp, #8
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	000a      	movs	r2, r1
 8002fc8:	1cbb      	adds	r3, r7, #2
 8002fca:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fdc:	231e      	movs	r3, #30
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4aaf      	ldr	r2, [pc, #700]	; (80032c0 <UART_SetConfig+0x2ec>)
 8003004:	4013      	ands	r3, r2
 8003006:	0019      	movs	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	430a      	orrs	r2, r1
 8003010:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4aaa      	ldr	r2, [pc, #680]	; (80032c4 <UART_SetConfig+0x2f0>)
 800301a:	4013      	ands	r3, r2
 800301c:	0019      	movs	r1, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68da      	ldr	r2, [r3, #12]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4aa1      	ldr	r2, [pc, #644]	; (80032c8 <UART_SetConfig+0x2f4>)
 8003042:	4013      	ands	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	430a      	orrs	r2, r1
 800304e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a9d      	ldr	r2, [pc, #628]	; (80032cc <UART_SetConfig+0x2f8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d127      	bne.n	80030aa <UART_SetConfig+0xd6>
 800305a:	4b9d      	ldr	r3, [pc, #628]	; (80032d0 <UART_SetConfig+0x2fc>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	2203      	movs	r2, #3
 8003060:	4013      	ands	r3, r2
 8003062:	2b03      	cmp	r3, #3
 8003064:	d00d      	beq.n	8003082 <UART_SetConfig+0xae>
 8003066:	d81b      	bhi.n	80030a0 <UART_SetConfig+0xcc>
 8003068:	2b02      	cmp	r3, #2
 800306a:	d014      	beq.n	8003096 <UART_SetConfig+0xc2>
 800306c:	d818      	bhi.n	80030a0 <UART_SetConfig+0xcc>
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <UART_SetConfig+0xa4>
 8003072:	2b01      	cmp	r3, #1
 8003074:	d00a      	beq.n	800308c <UART_SetConfig+0xb8>
 8003076:	e013      	b.n	80030a0 <UART_SetConfig+0xcc>
 8003078:	231f      	movs	r3, #31
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
 8003080:	e065      	b.n	800314e <UART_SetConfig+0x17a>
 8003082:	231f      	movs	r3, #31
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	2202      	movs	r2, #2
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e060      	b.n	800314e <UART_SetConfig+0x17a>
 800308c:	231f      	movs	r3, #31
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	2204      	movs	r2, #4
 8003092:	701a      	strb	r2, [r3, #0]
 8003094:	e05b      	b.n	800314e <UART_SetConfig+0x17a>
 8003096:	231f      	movs	r3, #31
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	2208      	movs	r2, #8
 800309c:	701a      	strb	r2, [r3, #0]
 800309e:	e056      	b.n	800314e <UART_SetConfig+0x17a>
 80030a0:	231f      	movs	r3, #31
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	2210      	movs	r2, #16
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e051      	b.n	800314e <UART_SetConfig+0x17a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a89      	ldr	r2, [pc, #548]	; (80032d4 <UART_SetConfig+0x300>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d134      	bne.n	800311e <UART_SetConfig+0x14a>
 80030b4:	4b86      	ldr	r3, [pc, #536]	; (80032d0 <UART_SetConfig+0x2fc>)
 80030b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b8:	23c0      	movs	r3, #192	; 0xc0
 80030ba:	029b      	lsls	r3, r3, #10
 80030bc:	4013      	ands	r3, r2
 80030be:	22c0      	movs	r2, #192	; 0xc0
 80030c0:	0292      	lsls	r2, r2, #10
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d017      	beq.n	80030f6 <UART_SetConfig+0x122>
 80030c6:	22c0      	movs	r2, #192	; 0xc0
 80030c8:	0292      	lsls	r2, r2, #10
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d822      	bhi.n	8003114 <UART_SetConfig+0x140>
 80030ce:	2280      	movs	r2, #128	; 0x80
 80030d0:	0292      	lsls	r2, r2, #10
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d019      	beq.n	800310a <UART_SetConfig+0x136>
 80030d6:	2280      	movs	r2, #128	; 0x80
 80030d8:	0292      	lsls	r2, r2, #10
 80030da:	4293      	cmp	r3, r2
 80030dc:	d81a      	bhi.n	8003114 <UART_SetConfig+0x140>
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d004      	beq.n	80030ec <UART_SetConfig+0x118>
 80030e2:	2280      	movs	r2, #128	; 0x80
 80030e4:	0252      	lsls	r2, r2, #9
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00a      	beq.n	8003100 <UART_SetConfig+0x12c>
 80030ea:	e013      	b.n	8003114 <UART_SetConfig+0x140>
 80030ec:	231f      	movs	r3, #31
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	e02b      	b.n	800314e <UART_SetConfig+0x17a>
 80030f6:	231f      	movs	r3, #31
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	2202      	movs	r2, #2
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	e026      	b.n	800314e <UART_SetConfig+0x17a>
 8003100:	231f      	movs	r3, #31
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	2204      	movs	r2, #4
 8003106:	701a      	strb	r2, [r3, #0]
 8003108:	e021      	b.n	800314e <UART_SetConfig+0x17a>
 800310a:	231f      	movs	r3, #31
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	2208      	movs	r2, #8
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e01c      	b.n	800314e <UART_SetConfig+0x17a>
 8003114:	231f      	movs	r3, #31
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	2210      	movs	r2, #16
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	e017      	b.n	800314e <UART_SetConfig+0x17a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a6d      	ldr	r2, [pc, #436]	; (80032d8 <UART_SetConfig+0x304>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d104      	bne.n	8003132 <UART_SetConfig+0x15e>
 8003128:	231f      	movs	r3, #31
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
 8003130:	e00d      	b.n	800314e <UART_SetConfig+0x17a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a69      	ldr	r2, [pc, #420]	; (80032dc <UART_SetConfig+0x308>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d104      	bne.n	8003146 <UART_SetConfig+0x172>
 800313c:	231f      	movs	r3, #31
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	e003      	b.n	800314e <UART_SetConfig+0x17a>
 8003146:	231f      	movs	r3, #31
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	2210      	movs	r2, #16
 800314c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	429a      	cmp	r2, r3
 8003158:	d15c      	bne.n	8003214 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800315a:	231f      	movs	r3, #31
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b08      	cmp	r3, #8
 8003162:	d015      	beq.n	8003190 <UART_SetConfig+0x1bc>
 8003164:	dc18      	bgt.n	8003198 <UART_SetConfig+0x1c4>
 8003166:	2b04      	cmp	r3, #4
 8003168:	d00d      	beq.n	8003186 <UART_SetConfig+0x1b2>
 800316a:	dc15      	bgt.n	8003198 <UART_SetConfig+0x1c4>
 800316c:	2b00      	cmp	r3, #0
 800316e:	d002      	beq.n	8003176 <UART_SetConfig+0x1a2>
 8003170:	2b02      	cmp	r3, #2
 8003172:	d005      	beq.n	8003180 <UART_SetConfig+0x1ac>
 8003174:	e010      	b.n	8003198 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003176:	f7fe ff4b 	bl	8002010 <HAL_RCC_GetPCLK1Freq>
 800317a:	0003      	movs	r3, r0
 800317c:	61bb      	str	r3, [r7, #24]
        break;
 800317e:	e012      	b.n	80031a6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003180:	4b57      	ldr	r3, [pc, #348]	; (80032e0 <UART_SetConfig+0x30c>)
 8003182:	61bb      	str	r3, [r7, #24]
        break;
 8003184:	e00f      	b.n	80031a6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003186:	f7fe fec7 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 800318a:	0003      	movs	r3, r0
 800318c:	61bb      	str	r3, [r7, #24]
        break;
 800318e:	e00a      	b.n	80031a6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	61bb      	str	r3, [r7, #24]
        break;
 8003196:	e006      	b.n	80031a6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800319c:	231e      	movs	r3, #30
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
        break;
 80031a4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d100      	bne.n	80031ae <UART_SetConfig+0x1da>
 80031ac:	e07a      	b.n	80032a4 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	005a      	lsls	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	18d2      	adds	r2, r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	0019      	movs	r1, r3
 80031c0:	0010      	movs	r0, r2
 80031c2:	f7fc ffab 	bl	800011c <__udivsi3>
 80031c6:	0003      	movs	r3, r0
 80031c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2b0f      	cmp	r3, #15
 80031ce:	d91c      	bls.n	800320a <UART_SetConfig+0x236>
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	025b      	lsls	r3, r3, #9
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d217      	bcs.n	800320a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	b29a      	uxth	r2, r3
 80031de:	200e      	movs	r0, #14
 80031e0:	183b      	adds	r3, r7, r0
 80031e2:	210f      	movs	r1, #15
 80031e4:	438a      	bics	r2, r1
 80031e6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	085b      	lsrs	r3, r3, #1
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2207      	movs	r2, #7
 80031f0:	4013      	ands	r3, r2
 80031f2:	b299      	uxth	r1, r3
 80031f4:	183b      	adds	r3, r7, r0
 80031f6:	183a      	adds	r2, r7, r0
 80031f8:	8812      	ldrh	r2, [r2, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	183a      	adds	r2, r7, r0
 8003204:	8812      	ldrh	r2, [r2, #0]
 8003206:	60da      	str	r2, [r3, #12]
 8003208:	e04c      	b.n	80032a4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800320a:	231e      	movs	r3, #30
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
 8003212:	e047      	b.n	80032a4 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003214:	231f      	movs	r3, #31
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b08      	cmp	r3, #8
 800321c:	d015      	beq.n	800324a <UART_SetConfig+0x276>
 800321e:	dc18      	bgt.n	8003252 <UART_SetConfig+0x27e>
 8003220:	2b04      	cmp	r3, #4
 8003222:	d00d      	beq.n	8003240 <UART_SetConfig+0x26c>
 8003224:	dc15      	bgt.n	8003252 <UART_SetConfig+0x27e>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <UART_SetConfig+0x25c>
 800322a:	2b02      	cmp	r3, #2
 800322c:	d005      	beq.n	800323a <UART_SetConfig+0x266>
 800322e:	e010      	b.n	8003252 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003230:	f7fe feee 	bl	8002010 <HAL_RCC_GetPCLK1Freq>
 8003234:	0003      	movs	r3, r0
 8003236:	61bb      	str	r3, [r7, #24]
        break;
 8003238:	e012      	b.n	8003260 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800323a:	4b29      	ldr	r3, [pc, #164]	; (80032e0 <UART_SetConfig+0x30c>)
 800323c:	61bb      	str	r3, [r7, #24]
        break;
 800323e:	e00f      	b.n	8003260 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003240:	f7fe fe6a 	bl	8001f18 <HAL_RCC_GetSysClockFreq>
 8003244:	0003      	movs	r3, r0
 8003246:	61bb      	str	r3, [r7, #24]
        break;
 8003248:	e00a      	b.n	8003260 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800324a:	2380      	movs	r3, #128	; 0x80
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	61bb      	str	r3, [r7, #24]
        break;
 8003250:	e006      	b.n	8003260 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003256:	231e      	movs	r3, #30
 8003258:	18fb      	adds	r3, r7, r3
 800325a:	2201      	movs	r2, #1
 800325c:	701a      	strb	r2, [r3, #0]
        break;
 800325e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01e      	beq.n	80032a4 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	085a      	lsrs	r2, r3, #1
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	18d2      	adds	r2, r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	0019      	movs	r1, r3
 8003276:	0010      	movs	r0, r2
 8003278:	f7fc ff50 	bl	800011c <__udivsi3>
 800327c:	0003      	movs	r3, r0
 800327e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	2b0f      	cmp	r3, #15
 8003284:	d90a      	bls.n	800329c <UART_SetConfig+0x2c8>
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	025b      	lsls	r3, r3, #9
 800328c:	429a      	cmp	r2, r3
 800328e:	d205      	bcs.n	800329c <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	b29a      	uxth	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	e003      	b.n	80032a4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800329c:	231e      	movs	r3, #30
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	2201      	movs	r2, #1
 80032a2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80032b0:	231e      	movs	r3, #30
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	781b      	ldrb	r3, [r3, #0]
}
 80032b6:	0018      	movs	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b008      	add	sp, #32
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	efff69f3 	.word	0xefff69f3
 80032c4:	ffffcfff 	.word	0xffffcfff
 80032c8:	fffff4ff 	.word	0xfffff4ff
 80032cc:	40013800 	.word	0x40013800
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40004400 	.word	0x40004400
 80032d8:	40004800 	.word	0x40004800
 80032dc:	40004c00 	.word	0x40004c00
 80032e0:	007a1200 	.word	0x007a1200

080032e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	2201      	movs	r2, #1
 80032f2:	4013      	ands	r3, r2
 80032f4:	d00b      	beq.n	800330e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4a4a      	ldr	r2, [pc, #296]	; (8003428 <UART_AdvFeatureConfig+0x144>)
 80032fe:	4013      	ands	r3, r2
 8003300:	0019      	movs	r1, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	2202      	movs	r2, #2
 8003314:	4013      	ands	r3, r2
 8003316:	d00b      	beq.n	8003330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	4a43      	ldr	r2, [pc, #268]	; (800342c <UART_AdvFeatureConfig+0x148>)
 8003320:	4013      	ands	r3, r2
 8003322:	0019      	movs	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	2204      	movs	r2, #4
 8003336:	4013      	ands	r3, r2
 8003338:	d00b      	beq.n	8003352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4a3b      	ldr	r2, [pc, #236]	; (8003430 <UART_AdvFeatureConfig+0x14c>)
 8003342:	4013      	ands	r3, r2
 8003344:	0019      	movs	r1, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	2208      	movs	r2, #8
 8003358:	4013      	ands	r3, r2
 800335a:	d00b      	beq.n	8003374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4a34      	ldr	r2, [pc, #208]	; (8003434 <UART_AdvFeatureConfig+0x150>)
 8003364:	4013      	ands	r3, r2
 8003366:	0019      	movs	r1, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	2210      	movs	r2, #16
 800337a:	4013      	ands	r3, r2
 800337c:	d00b      	beq.n	8003396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a2c      	ldr	r2, [pc, #176]	; (8003438 <UART_AdvFeatureConfig+0x154>)
 8003386:	4013      	ands	r3, r2
 8003388:	0019      	movs	r1, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	2220      	movs	r2, #32
 800339c:	4013      	ands	r3, r2
 800339e:	d00b      	beq.n	80033b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	4a25      	ldr	r2, [pc, #148]	; (800343c <UART_AdvFeatureConfig+0x158>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	0019      	movs	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	2240      	movs	r2, #64	; 0x40
 80033be:	4013      	ands	r3, r2
 80033c0:	d01d      	beq.n	80033fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4a1d      	ldr	r2, [pc, #116]	; (8003440 <UART_AdvFeatureConfig+0x15c>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	0019      	movs	r1, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	035b      	lsls	r3, r3, #13
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d10b      	bne.n	80033fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4a15      	ldr	r2, [pc, #84]	; (8003444 <UART_AdvFeatureConfig+0x160>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	0019      	movs	r1, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	2280      	movs	r2, #128	; 0x80
 8003404:	4013      	ands	r3, r2
 8003406:	d00b      	beq.n	8003420 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4a0e      	ldr	r2, [pc, #56]	; (8003448 <UART_AdvFeatureConfig+0x164>)
 8003410:	4013      	ands	r3, r2
 8003412:	0019      	movs	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	605a      	str	r2, [r3, #4]
  }
}
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	b002      	add	sp, #8
 8003426:	bd80      	pop	{r7, pc}
 8003428:	fffdffff 	.word	0xfffdffff
 800342c:	fffeffff 	.word	0xfffeffff
 8003430:	fffbffff 	.word	0xfffbffff
 8003434:	ffff7fff 	.word	0xffff7fff
 8003438:	ffffefff 	.word	0xffffefff
 800343c:	ffffdfff 	.word	0xffffdfff
 8003440:	ffefffff 	.word	0xffefffff
 8003444:	ff9fffff 	.word	0xff9fffff
 8003448:	fff7ffff 	.word	0xfff7ffff

0800344c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b092      	sub	sp, #72	; 0x48
 8003450:	af02      	add	r7, sp, #8
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2284      	movs	r2, #132	; 0x84
 8003458:	2100      	movs	r1, #0
 800345a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800345c:	f7fd fce6 	bl	8000e2c <HAL_GetTick>
 8003460:	0003      	movs	r3, r0
 8003462:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2208      	movs	r2, #8
 800346c:	4013      	ands	r3, r2
 800346e:	2b08      	cmp	r3, #8
 8003470:	d12c      	bne.n	80034cc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003474:	2280      	movs	r2, #128	; 0x80
 8003476:	0391      	lsls	r1, r2, #14
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4a46      	ldr	r2, [pc, #280]	; (8003594 <UART_CheckIdleState+0x148>)
 800347c:	9200      	str	r2, [sp, #0]
 800347e:	2200      	movs	r2, #0
 8003480:	f000 f88c 	bl	800359c <UART_WaitOnFlagUntilTimeout>
 8003484:	1e03      	subs	r3, r0, #0
 8003486:	d021      	beq.n	80034cc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003488:	f3ef 8310 	mrs	r3, PRIMASK
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003490:	63bb      	str	r3, [r7, #56]	; 0x38
 8003492:	2301      	movs	r3, #1
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	f383 8810 	msr	PRIMASK, r3
}
 800349c:	46c0      	nop			; (mov r8, r8)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2180      	movs	r1, #128	; 0x80
 80034aa:	438a      	bics	r2, r1
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	f383 8810 	msr	PRIMASK, r3
}
 80034b8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2220      	movs	r2, #32
 80034be:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2278      	movs	r2, #120	; 0x78
 80034c4:	2100      	movs	r1, #0
 80034c6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e05f      	b.n	800358c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2204      	movs	r2, #4
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d146      	bne.n	8003568 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034dc:	2280      	movs	r2, #128	; 0x80
 80034de:	03d1      	lsls	r1, r2, #15
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4a2c      	ldr	r2, [pc, #176]	; (8003594 <UART_CheckIdleState+0x148>)
 80034e4:	9200      	str	r2, [sp, #0]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f000 f858 	bl	800359c <UART_WaitOnFlagUntilTimeout>
 80034ec:	1e03      	subs	r3, r0, #0
 80034ee:	d03b      	beq.n	8003568 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f0:	f3ef 8310 	mrs	r3, PRIMASK
 80034f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80034f6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34
 80034fa:	2301      	movs	r3, #1
 80034fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f383 8810 	msr	PRIMASK, r3
}
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4921      	ldr	r1, [pc, #132]	; (8003598 <UART_CheckIdleState+0x14c>)
 8003512:	400a      	ands	r2, r1
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003518:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f383 8810 	msr	PRIMASK, r3
}
 8003520:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003522:	f3ef 8310 	mrs	r3, PRIMASK
 8003526:	61bb      	str	r3, [r7, #24]
  return(result);
 8003528:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352a:	633b      	str	r3, [r7, #48]	; 0x30
 800352c:	2301      	movs	r3, #1
 800352e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f383 8810 	msr	PRIMASK, r3
}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2101      	movs	r1, #1
 8003544:	438a      	bics	r2, r1
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	f383 8810 	msr	PRIMASK, r3
}
 8003552:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2280      	movs	r2, #128	; 0x80
 8003558:	2120      	movs	r1, #32
 800355a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2278      	movs	r2, #120	; 0x78
 8003560:	2100      	movs	r1, #0
 8003562:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e011      	b.n	800358c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2280      	movs	r2, #128	; 0x80
 8003572:	2120      	movs	r1, #32
 8003574:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2278      	movs	r2, #120	; 0x78
 8003586:	2100      	movs	r1, #0
 8003588:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b010      	add	sp, #64	; 0x40
 8003592:	bd80      	pop	{r7, pc}
 8003594:	01ffffff 	.word	0x01ffffff
 8003598:	fffffedf 	.word	0xfffffedf

0800359c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	1dfb      	adds	r3, r7, #7
 80035aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ac:	e04b      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	3301      	adds	r3, #1
 80035b2:	d048      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b4:	f7fd fc3a 	bl	8000e2c <HAL_GetTick>
 80035b8:	0002      	movs	r2, r0
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d302      	bcc.n	80035ca <UART_WaitOnFlagUntilTimeout+0x2e>
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e04b      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2204      	movs	r2, #4
 80035d6:	4013      	ands	r3, r2
 80035d8:	d035      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	2208      	movs	r2, #8
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d111      	bne.n	800360c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2208      	movs	r2, #8
 80035ee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	0018      	movs	r0, r3
 80035f4:	f000 f900 	bl	80037f8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2284      	movs	r2, #132	; 0x84
 80035fc:	2108      	movs	r1, #8
 80035fe:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2278      	movs	r2, #120	; 0x78
 8003604:	2100      	movs	r1, #0
 8003606:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e02c      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69da      	ldr	r2, [r3, #28]
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	401a      	ands	r2, r3
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	429a      	cmp	r2, r3
 800361e:	d112      	bne.n	8003646 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2280      	movs	r2, #128	; 0x80
 8003626:	0112      	lsls	r2, r2, #4
 8003628:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	0018      	movs	r0, r3
 800362e:	f000 f8e3 	bl	80037f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2284      	movs	r2, #132	; 0x84
 8003636:	2120      	movs	r1, #32
 8003638:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2278      	movs	r2, #120	; 0x78
 800363e:	2100      	movs	r1, #0
 8003640:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e00f      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	4013      	ands	r3, r2
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	425a      	negs	r2, r3
 8003656:	4153      	adcs	r3, r2
 8003658:	b2db      	uxtb	r3, r3
 800365a:	001a      	movs	r2, r3
 800365c:	1dfb      	adds	r3, r7, #7
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d0a4      	beq.n	80035ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	0018      	movs	r0, r3
 8003668:	46bd      	mov	sp, r7
 800366a:	b004      	add	sp, #16
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b090      	sub	sp, #64	; 0x40
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	1dbb      	adds	r3, r7, #6
 800367c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1dba      	adds	r2, r7, #6
 8003688:	2158      	movs	r1, #88	; 0x58
 800368a:	8812      	ldrh	r2, [r2, #0]
 800368c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2284      	movs	r2, #132	; 0x84
 8003692:	2100      	movs	r1, #0
 8003694:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2280      	movs	r2, #128	; 0x80
 800369a:	2122      	movs	r1, #34	; 0x22
 800369c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d028      	beq.n	80036f8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036aa:	4a3e      	ldr	r2, [pc, #248]	; (80037a4 <UART_Start_Receive_DMA+0x134>)
 80036ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b2:	4a3d      	ldr	r2, [pc, #244]	; (80037a8 <UART_Start_Receive_DMA+0x138>)
 80036b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ba:	4a3c      	ldr	r2, [pc, #240]	; (80037ac <UART_Start_Receive_DMA+0x13c>)
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c2:	2200      	movs	r2, #0
 80036c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3324      	adds	r3, #36	; 0x24
 80036d0:	0019      	movs	r1, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	001a      	movs	r2, r3
 80036d8:	1dbb      	adds	r3, r7, #6
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	f7fd fcd6 	bl	800108c <HAL_DMA_Start_IT>
 80036e0:	1e03      	subs	r3, r0, #0
 80036e2:	d009      	beq.n	80036f8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2284      	movs	r2, #132	; 0x84
 80036e8:	2110      	movs	r1, #16
 80036ea:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2280      	movs	r2, #128	; 0x80
 80036f0:	2120      	movs	r1, #32
 80036f2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e050      	b.n	800379a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d019      	beq.n	8003734 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003700:	f3ef 8310 	mrs	r3, PRIMASK
 8003704:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003706:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800370a:	2301      	movs	r3, #1
 800370c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003710:	f383 8810 	msr	PRIMASK, r3
}
 8003714:	46c0      	nop			; (mov r8, r8)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2180      	movs	r1, #128	; 0x80
 8003722:	0049      	lsls	r1, r1, #1
 8003724:	430a      	orrs	r2, r1
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	f383 8810 	msr	PRIMASK, r3
}
 8003732:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003734:	f3ef 8310 	mrs	r3, PRIMASK
 8003738:	613b      	str	r3, [r7, #16]
  return(result);
 800373a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373c:	63bb      	str	r3, [r7, #56]	; 0x38
 800373e:	2301      	movs	r3, #1
 8003740:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f383 8810 	msr	PRIMASK, r3
}
 8003748:	46c0      	nop			; (mov r8, r8)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2101      	movs	r1, #1
 8003756:	430a      	orrs	r2, r1
 8003758:	609a      	str	r2, [r3, #8]
 800375a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f383 8810 	msr	PRIMASK, r3
}
 8003764:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003766:	f3ef 8310 	mrs	r3, PRIMASK
 800376a:	61fb      	str	r3, [r7, #28]
  return(result);
 800376c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800376e:	637b      	str	r3, [r7, #52]	; 0x34
 8003770:	2301      	movs	r3, #1
 8003772:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	f383 8810 	msr	PRIMASK, r3
}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2140      	movs	r1, #64	; 0x40
 8003788:	430a      	orrs	r2, r1
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	f383 8810 	msr	PRIMASK, r3
}
 8003796:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	0018      	movs	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	b010      	add	sp, #64	; 0x40
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	080038c1 	.word	0x080038c1
 80037a8:	080039ed 	.word	0x080039ed
 80037ac:	08003a2f 	.word	0x08003a2f

080037b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037b8:	f3ef 8310 	mrs	r3, PRIMASK
 80037bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80037be:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	2301      	movs	r3, #1
 80037c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f383 8810 	msr	PRIMASK, r3
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	21c0      	movs	r1, #192	; 0xc0
 80037da:	438a      	bics	r2, r1
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f383 8810 	msr	PRIMASK, r3
}
 80037e8:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80037f0:	46c0      	nop			; (mov r8, r8)
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b006      	add	sp, #24
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08e      	sub	sp, #56	; 0x38
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003800:	f3ef 8310 	mrs	r3, PRIMASK
 8003804:	617b      	str	r3, [r7, #20]
  return(result);
 8003806:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003808:	637b      	str	r3, [r7, #52]	; 0x34
 800380a:	2301      	movs	r3, #1
 800380c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	f383 8810 	msr	PRIMASK, r3
}
 8003814:	46c0      	nop			; (mov r8, r8)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4926      	ldr	r1, [pc, #152]	; (80038bc <UART_EndRxTransfer+0xc4>)
 8003822:	400a      	ands	r2, r1
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003828:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f383 8810 	msr	PRIMASK, r3
}
 8003830:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003832:	f3ef 8310 	mrs	r3, PRIMASK
 8003836:	623b      	str	r3, [r7, #32]
  return(result);
 8003838:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383a:	633b      	str	r3, [r7, #48]	; 0x30
 800383c:	2301      	movs	r3, #1
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	f383 8810 	msr	PRIMASK, r3
}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2101      	movs	r1, #1
 8003854:	438a      	bics	r2, r1
 8003856:	609a      	str	r2, [r3, #8]
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	f383 8810 	msr	PRIMASK, r3
}
 8003862:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003868:	2b01      	cmp	r3, #1
 800386a:	d118      	bne.n	800389e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386c:	f3ef 8310 	mrs	r3, PRIMASK
 8003870:	60bb      	str	r3, [r7, #8]
  return(result);
 8003872:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003876:	2301      	movs	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f383 8810 	msr	PRIMASK, r3
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2110      	movs	r1, #16
 800388e:	438a      	bics	r2, r1
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003894:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f383 8810 	msr	PRIMASK, r3
}
 800389c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2280      	movs	r2, #128	; 0x80
 80038a2:	2120      	movs	r1, #32
 80038a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b00e      	add	sp, #56	; 0x38
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	46c0      	nop			; (mov r8, r8)
 80038bc:	fffffedf 	.word	0xfffffedf

080038c0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b094      	sub	sp, #80	; 0x50
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	d06f      	beq.n	80039b6 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 80038d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d8:	225a      	movs	r2, #90	; 0x5a
 80038da:	2100      	movs	r1, #0
 80038dc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038de:	f3ef 8310 	mrs	r3, PRIMASK
 80038e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80038e4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038e8:	2301      	movs	r3, #1
 80038ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f383 8810 	msr	PRIMASK, r3
}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	493a      	ldr	r1, [pc, #232]	; (80039e8 <UART_DMAReceiveCplt+0x128>)
 8003900:	400a      	ands	r2, r1
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003906:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	f383 8810 	msr	PRIMASK, r3
}
 800390e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003910:	f3ef 8310 	mrs	r3, PRIMASK
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003918:	647b      	str	r3, [r7, #68]	; 0x44
 800391a:	2301      	movs	r3, #1
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003920:	f383 8810 	msr	PRIMASK, r3
}
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2101      	movs	r1, #1
 8003932:	438a      	bics	r2, r1
 8003934:	609a      	str	r2, [r3, #8]
 8003936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393c:	f383 8810 	msr	PRIMASK, r3
}
 8003940:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003942:	f3ef 8310 	mrs	r3, PRIMASK
 8003946:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800394a:	643b      	str	r3, [r7, #64]	; 0x40
 800394c:	2301      	movs	r3, #1
 800394e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003952:	f383 8810 	msr	PRIMASK, r3
}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2140      	movs	r1, #64	; 0x40
 8003964:	438a      	bics	r2, r1
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800396a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396e:	f383 8810 	msr	PRIMASK, r3
}
 8003972:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003976:	2280      	movs	r2, #128	; 0x80
 8003978:	2120      	movs	r1, #32
 800397a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800397c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800397e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003980:	2b01      	cmp	r3, #1
 8003982:	d118      	bne.n	80039b6 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003984:	f3ef 8310 	mrs	r3, PRIMASK
 8003988:	60fb      	str	r3, [r7, #12]
  return(result);
 800398a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800398c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800398e:	2301      	movs	r3, #1
 8003990:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f383 8810 	msr	PRIMASK, r3
}
 8003998:	46c0      	nop			; (mov r8, r8)
 800399a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2110      	movs	r1, #16
 80039a6:	438a      	bics	r2, r1
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f383 8810 	msr	PRIMASK, r3
}
 80039b4:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b8:	2200      	movs	r2, #0
 80039ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d108      	bne.n	80039d6 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039c6:	2258      	movs	r2, #88	; 0x58
 80039c8:	5a9a      	ldrh	r2, [r3, r2]
 80039ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039cc:	0011      	movs	r1, r2
 80039ce:	0018      	movs	r0, r3
 80039d0:	f7ff faf5 	bl	8002fbe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039d4:	e003      	b.n	80039de <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80039d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d8:	0018      	movs	r0, r3
 80039da:	f7ff fad8 	bl	8002f8e <HAL_UART_RxCpltCallback>
}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b014      	add	sp, #80	; 0x50
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	fffffeff 	.word	0xfffffeff

080039ec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d10a      	bne.n	8003a1e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2258      	movs	r2, #88	; 0x58
 8003a0c:	5a9b      	ldrh	r3, [r3, r2]
 8003a0e:	085b      	lsrs	r3, r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	0011      	movs	r1, r2
 8003a16:	0018      	movs	r0, r3
 8003a18:	f7ff fad1 	bl	8002fbe <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a1c:	e003      	b.n	8003a26 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	0018      	movs	r0, r3
 8003a22:	f7ff fabc 	bl	8002f9e <HAL_UART_RxHalfCpltCallback>
}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b004      	add	sp, #16
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b086      	sub	sp, #24
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a40:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2280      	movs	r2, #128	; 0x80
 8003a46:	589b      	ldr	r3, [r3, r2]
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2280      	movs	r2, #128	; 0x80
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b80      	cmp	r3, #128	; 0x80
 8003a56:	d10a      	bne.n	8003a6e <UART_DMAError+0x40>
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	2b21      	cmp	r3, #33	; 0x21
 8003a5c:	d107      	bne.n	8003a6e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2252      	movs	r2, #82	; 0x52
 8003a62:	2100      	movs	r1, #0
 8003a64:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f7ff fea1 	bl	80037b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2240      	movs	r2, #64	; 0x40
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b40      	cmp	r3, #64	; 0x40
 8003a7a:	d10a      	bne.n	8003a92 <UART_DMAError+0x64>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b22      	cmp	r3, #34	; 0x22
 8003a80:	d107      	bne.n	8003a92 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	225a      	movs	r2, #90	; 0x5a
 8003a86:	2100      	movs	r1, #0
 8003a88:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f7ff feb3 	bl	80037f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2284      	movs	r2, #132	; 0x84
 8003a96:	589b      	ldr	r3, [r3, r2]
 8003a98:	2210      	movs	r2, #16
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	2184      	movs	r1, #132	; 0x84
 8003aa0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f7ff fa82 	bl	8002fae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b006      	add	sp, #24
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <siprintf>:
 8003ab4:	b40e      	push	{r1, r2, r3}
 8003ab6:	b500      	push	{lr}
 8003ab8:	490b      	ldr	r1, [pc, #44]	; (8003ae8 <siprintf+0x34>)
 8003aba:	b09c      	sub	sp, #112	; 0x70
 8003abc:	ab1d      	add	r3, sp, #116	; 0x74
 8003abe:	9002      	str	r0, [sp, #8]
 8003ac0:	9006      	str	r0, [sp, #24]
 8003ac2:	9107      	str	r1, [sp, #28]
 8003ac4:	9104      	str	r1, [sp, #16]
 8003ac6:	4809      	ldr	r0, [pc, #36]	; (8003aec <siprintf+0x38>)
 8003ac8:	4909      	ldr	r1, [pc, #36]	; (8003af0 <siprintf+0x3c>)
 8003aca:	cb04      	ldmia	r3!, {r2}
 8003acc:	9105      	str	r1, [sp, #20]
 8003ace:	6800      	ldr	r0, [r0, #0]
 8003ad0:	a902      	add	r1, sp, #8
 8003ad2:	9301      	str	r3, [sp, #4]
 8003ad4:	f000 f9a2 	bl	8003e1c <_svfiprintf_r>
 8003ad8:	2200      	movs	r2, #0
 8003ada:	9b02      	ldr	r3, [sp, #8]
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	b01c      	add	sp, #112	; 0x70
 8003ae0:	bc08      	pop	{r3}
 8003ae2:	b003      	add	sp, #12
 8003ae4:	4718      	bx	r3
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	7fffffff 	.word	0x7fffffff
 8003aec:	20000058 	.word	0x20000058
 8003af0:	ffff0208 	.word	0xffff0208

08003af4 <memset>:
 8003af4:	0003      	movs	r3, r0
 8003af6:	1882      	adds	r2, r0, r2
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d100      	bne.n	8003afe <memset+0xa>
 8003afc:	4770      	bx	lr
 8003afe:	7019      	strb	r1, [r3, #0]
 8003b00:	3301      	adds	r3, #1
 8003b02:	e7f9      	b.n	8003af8 <memset+0x4>

08003b04 <__errno>:
 8003b04:	4b01      	ldr	r3, [pc, #4]	; (8003b0c <__errno+0x8>)
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	4770      	bx	lr
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	20000058 	.word	0x20000058

08003b10 <__libc_init_array>:
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	2600      	movs	r6, #0
 8003b14:	4c0c      	ldr	r4, [pc, #48]	; (8003b48 <__libc_init_array+0x38>)
 8003b16:	4d0d      	ldr	r5, [pc, #52]	; (8003b4c <__libc_init_array+0x3c>)
 8003b18:	1b64      	subs	r4, r4, r5
 8003b1a:	10a4      	asrs	r4, r4, #2
 8003b1c:	42a6      	cmp	r6, r4
 8003b1e:	d109      	bne.n	8003b34 <__libc_init_array+0x24>
 8003b20:	2600      	movs	r6, #0
 8003b22:	f000 fc6d 	bl	8004400 <_init>
 8003b26:	4c0a      	ldr	r4, [pc, #40]	; (8003b50 <__libc_init_array+0x40>)
 8003b28:	4d0a      	ldr	r5, [pc, #40]	; (8003b54 <__libc_init_array+0x44>)
 8003b2a:	1b64      	subs	r4, r4, r5
 8003b2c:	10a4      	asrs	r4, r4, #2
 8003b2e:	42a6      	cmp	r6, r4
 8003b30:	d105      	bne.n	8003b3e <__libc_init_array+0x2e>
 8003b32:	bd70      	pop	{r4, r5, r6, pc}
 8003b34:	00b3      	lsls	r3, r6, #2
 8003b36:	58eb      	ldr	r3, [r5, r3]
 8003b38:	4798      	blx	r3
 8003b3a:	3601      	adds	r6, #1
 8003b3c:	e7ee      	b.n	8003b1c <__libc_init_array+0xc>
 8003b3e:	00b3      	lsls	r3, r6, #2
 8003b40:	58eb      	ldr	r3, [r5, r3]
 8003b42:	4798      	blx	r3
 8003b44:	3601      	adds	r6, #1
 8003b46:	e7f2      	b.n	8003b2e <__libc_init_array+0x1e>
 8003b48:	0800448c 	.word	0x0800448c
 8003b4c:	0800448c 	.word	0x0800448c
 8003b50:	08004490 	.word	0x08004490
 8003b54:	0800448c 	.word	0x0800448c

08003b58 <__retarget_lock_acquire_recursive>:
 8003b58:	4770      	bx	lr

08003b5a <__retarget_lock_release_recursive>:
 8003b5a:	4770      	bx	lr

08003b5c <_free_r>:
 8003b5c:	b570      	push	{r4, r5, r6, lr}
 8003b5e:	0005      	movs	r5, r0
 8003b60:	2900      	cmp	r1, #0
 8003b62:	d010      	beq.n	8003b86 <_free_r+0x2a>
 8003b64:	1f0c      	subs	r4, r1, #4
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	da00      	bge.n	8003b6e <_free_r+0x12>
 8003b6c:	18e4      	adds	r4, r4, r3
 8003b6e:	0028      	movs	r0, r5
 8003b70:	f000 f8e2 	bl	8003d38 <__malloc_lock>
 8003b74:	4a1d      	ldr	r2, [pc, #116]	; (8003bec <_free_r+0x90>)
 8003b76:	6813      	ldr	r3, [r2, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d105      	bne.n	8003b88 <_free_r+0x2c>
 8003b7c:	6063      	str	r3, [r4, #4]
 8003b7e:	6014      	str	r4, [r2, #0]
 8003b80:	0028      	movs	r0, r5
 8003b82:	f000 f8e1 	bl	8003d48 <__malloc_unlock>
 8003b86:	bd70      	pop	{r4, r5, r6, pc}
 8003b88:	42a3      	cmp	r3, r4
 8003b8a:	d908      	bls.n	8003b9e <_free_r+0x42>
 8003b8c:	6820      	ldr	r0, [r4, #0]
 8003b8e:	1821      	adds	r1, r4, r0
 8003b90:	428b      	cmp	r3, r1
 8003b92:	d1f3      	bne.n	8003b7c <_free_r+0x20>
 8003b94:	6819      	ldr	r1, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	1809      	adds	r1, r1, r0
 8003b9a:	6021      	str	r1, [r4, #0]
 8003b9c:	e7ee      	b.n	8003b7c <_free_r+0x20>
 8003b9e:	001a      	movs	r2, r3
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <_free_r+0x4e>
 8003ba6:	42a3      	cmp	r3, r4
 8003ba8:	d9f9      	bls.n	8003b9e <_free_r+0x42>
 8003baa:	6811      	ldr	r1, [r2, #0]
 8003bac:	1850      	adds	r0, r2, r1
 8003bae:	42a0      	cmp	r0, r4
 8003bb0:	d10b      	bne.n	8003bca <_free_r+0x6e>
 8003bb2:	6820      	ldr	r0, [r4, #0]
 8003bb4:	1809      	adds	r1, r1, r0
 8003bb6:	1850      	adds	r0, r2, r1
 8003bb8:	6011      	str	r1, [r2, #0]
 8003bba:	4283      	cmp	r3, r0
 8003bbc:	d1e0      	bne.n	8003b80 <_free_r+0x24>
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	1841      	adds	r1, r0, r1
 8003bc4:	6011      	str	r1, [r2, #0]
 8003bc6:	6053      	str	r3, [r2, #4]
 8003bc8:	e7da      	b.n	8003b80 <_free_r+0x24>
 8003bca:	42a0      	cmp	r0, r4
 8003bcc:	d902      	bls.n	8003bd4 <_free_r+0x78>
 8003bce:	230c      	movs	r3, #12
 8003bd0:	602b      	str	r3, [r5, #0]
 8003bd2:	e7d5      	b.n	8003b80 <_free_r+0x24>
 8003bd4:	6820      	ldr	r0, [r4, #0]
 8003bd6:	1821      	adds	r1, r4, r0
 8003bd8:	428b      	cmp	r3, r1
 8003bda:	d103      	bne.n	8003be4 <_free_r+0x88>
 8003bdc:	6819      	ldr	r1, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	1809      	adds	r1, r1, r0
 8003be2:	6021      	str	r1, [r4, #0]
 8003be4:	6063      	str	r3, [r4, #4]
 8003be6:	6054      	str	r4, [r2, #4]
 8003be8:	e7ca      	b.n	8003b80 <_free_r+0x24>
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	20000340 	.word	0x20000340

08003bf0 <sbrk_aligned>:
 8003bf0:	b570      	push	{r4, r5, r6, lr}
 8003bf2:	4e0f      	ldr	r6, [pc, #60]	; (8003c30 <sbrk_aligned+0x40>)
 8003bf4:	000d      	movs	r5, r1
 8003bf6:	6831      	ldr	r1, [r6, #0]
 8003bf8:	0004      	movs	r4, r0
 8003bfa:	2900      	cmp	r1, #0
 8003bfc:	d102      	bne.n	8003c04 <sbrk_aligned+0x14>
 8003bfe:	f000 fba1 	bl	8004344 <_sbrk_r>
 8003c02:	6030      	str	r0, [r6, #0]
 8003c04:	0029      	movs	r1, r5
 8003c06:	0020      	movs	r0, r4
 8003c08:	f000 fb9c 	bl	8004344 <_sbrk_r>
 8003c0c:	1c43      	adds	r3, r0, #1
 8003c0e:	d00a      	beq.n	8003c26 <sbrk_aligned+0x36>
 8003c10:	2303      	movs	r3, #3
 8003c12:	1cc5      	adds	r5, r0, #3
 8003c14:	439d      	bics	r5, r3
 8003c16:	42a8      	cmp	r0, r5
 8003c18:	d007      	beq.n	8003c2a <sbrk_aligned+0x3a>
 8003c1a:	1a29      	subs	r1, r5, r0
 8003c1c:	0020      	movs	r0, r4
 8003c1e:	f000 fb91 	bl	8004344 <_sbrk_r>
 8003c22:	3001      	adds	r0, #1
 8003c24:	d101      	bne.n	8003c2a <sbrk_aligned+0x3a>
 8003c26:	2501      	movs	r5, #1
 8003c28:	426d      	negs	r5, r5
 8003c2a:	0028      	movs	r0, r5
 8003c2c:	bd70      	pop	{r4, r5, r6, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	20000344 	.word	0x20000344

08003c34 <_malloc_r>:
 8003c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c36:	2203      	movs	r2, #3
 8003c38:	1ccb      	adds	r3, r1, #3
 8003c3a:	4393      	bics	r3, r2
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	0006      	movs	r6, r0
 8003c40:	001f      	movs	r7, r3
 8003c42:	2b0c      	cmp	r3, #12
 8003c44:	d238      	bcs.n	8003cb8 <_malloc_r+0x84>
 8003c46:	270c      	movs	r7, #12
 8003c48:	42b9      	cmp	r1, r7
 8003c4a:	d837      	bhi.n	8003cbc <_malloc_r+0x88>
 8003c4c:	0030      	movs	r0, r6
 8003c4e:	f000 f873 	bl	8003d38 <__malloc_lock>
 8003c52:	4b38      	ldr	r3, [pc, #224]	; (8003d34 <_malloc_r+0x100>)
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	001c      	movs	r4, r3
 8003c5a:	2c00      	cmp	r4, #0
 8003c5c:	d133      	bne.n	8003cc6 <_malloc_r+0x92>
 8003c5e:	0039      	movs	r1, r7
 8003c60:	0030      	movs	r0, r6
 8003c62:	f7ff ffc5 	bl	8003bf0 <sbrk_aligned>
 8003c66:	0004      	movs	r4, r0
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	d15e      	bne.n	8003d2a <_malloc_r+0xf6>
 8003c6c:	9b00      	ldr	r3, [sp, #0]
 8003c6e:	681c      	ldr	r4, [r3, #0]
 8003c70:	0025      	movs	r5, r4
 8003c72:	2d00      	cmp	r5, #0
 8003c74:	d14e      	bne.n	8003d14 <_malloc_r+0xe0>
 8003c76:	2c00      	cmp	r4, #0
 8003c78:	d051      	beq.n	8003d1e <_malloc_r+0xea>
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	0029      	movs	r1, r5
 8003c7e:	18e3      	adds	r3, r4, r3
 8003c80:	0030      	movs	r0, r6
 8003c82:	9301      	str	r3, [sp, #4]
 8003c84:	f000 fb5e 	bl	8004344 <_sbrk_r>
 8003c88:	9b01      	ldr	r3, [sp, #4]
 8003c8a:	4283      	cmp	r3, r0
 8003c8c:	d147      	bne.n	8003d1e <_malloc_r+0xea>
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	0030      	movs	r0, r6
 8003c92:	1aff      	subs	r7, r7, r3
 8003c94:	0039      	movs	r1, r7
 8003c96:	f7ff ffab 	bl	8003bf0 <sbrk_aligned>
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	d03f      	beq.n	8003d1e <_malloc_r+0xea>
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	19db      	adds	r3, r3, r7
 8003ca2:	6023      	str	r3, [r4, #0]
 8003ca4:	9b00      	ldr	r3, [sp, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d040      	beq.n	8003d2e <_malloc_r+0xfa>
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	42a2      	cmp	r2, r4
 8003cb0:	d133      	bne.n	8003d1a <_malloc_r+0xe6>
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	e014      	b.n	8003ce2 <_malloc_r+0xae>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	dac5      	bge.n	8003c48 <_malloc_r+0x14>
 8003cbc:	230c      	movs	r3, #12
 8003cbe:	2500      	movs	r5, #0
 8003cc0:	6033      	str	r3, [r6, #0]
 8003cc2:	0028      	movs	r0, r5
 8003cc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cc6:	6821      	ldr	r1, [r4, #0]
 8003cc8:	1bc9      	subs	r1, r1, r7
 8003cca:	d420      	bmi.n	8003d0e <_malloc_r+0xda>
 8003ccc:	290b      	cmp	r1, #11
 8003cce:	d918      	bls.n	8003d02 <_malloc_r+0xce>
 8003cd0:	19e2      	adds	r2, r4, r7
 8003cd2:	6027      	str	r7, [r4, #0]
 8003cd4:	42a3      	cmp	r3, r4
 8003cd6:	d112      	bne.n	8003cfe <_malloc_r+0xca>
 8003cd8:	9b00      	ldr	r3, [sp, #0]
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	6863      	ldr	r3, [r4, #4]
 8003cde:	6011      	str	r1, [r2, #0]
 8003ce0:	6053      	str	r3, [r2, #4]
 8003ce2:	0030      	movs	r0, r6
 8003ce4:	0025      	movs	r5, r4
 8003ce6:	f000 f82f 	bl	8003d48 <__malloc_unlock>
 8003cea:	2207      	movs	r2, #7
 8003cec:	350b      	adds	r5, #11
 8003cee:	1d23      	adds	r3, r4, #4
 8003cf0:	4395      	bics	r5, r2
 8003cf2:	1aea      	subs	r2, r5, r3
 8003cf4:	429d      	cmp	r5, r3
 8003cf6:	d0e4      	beq.n	8003cc2 <_malloc_r+0x8e>
 8003cf8:	1b5b      	subs	r3, r3, r5
 8003cfa:	50a3      	str	r3, [r4, r2]
 8003cfc:	e7e1      	b.n	8003cc2 <_malloc_r+0x8e>
 8003cfe:	605a      	str	r2, [r3, #4]
 8003d00:	e7ec      	b.n	8003cdc <_malloc_r+0xa8>
 8003d02:	6862      	ldr	r2, [r4, #4]
 8003d04:	42a3      	cmp	r3, r4
 8003d06:	d1d5      	bne.n	8003cb4 <_malloc_r+0x80>
 8003d08:	9b00      	ldr	r3, [sp, #0]
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e7e9      	b.n	8003ce2 <_malloc_r+0xae>
 8003d0e:	0023      	movs	r3, r4
 8003d10:	6864      	ldr	r4, [r4, #4]
 8003d12:	e7a2      	b.n	8003c5a <_malloc_r+0x26>
 8003d14:	002c      	movs	r4, r5
 8003d16:	686d      	ldr	r5, [r5, #4]
 8003d18:	e7ab      	b.n	8003c72 <_malloc_r+0x3e>
 8003d1a:	0013      	movs	r3, r2
 8003d1c:	e7c4      	b.n	8003ca8 <_malloc_r+0x74>
 8003d1e:	230c      	movs	r3, #12
 8003d20:	0030      	movs	r0, r6
 8003d22:	6033      	str	r3, [r6, #0]
 8003d24:	f000 f810 	bl	8003d48 <__malloc_unlock>
 8003d28:	e7cb      	b.n	8003cc2 <_malloc_r+0x8e>
 8003d2a:	6027      	str	r7, [r4, #0]
 8003d2c:	e7d9      	b.n	8003ce2 <_malloc_r+0xae>
 8003d2e:	605b      	str	r3, [r3, #4]
 8003d30:	deff      	udf	#255	; 0xff
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	20000340 	.word	0x20000340

08003d38 <__malloc_lock>:
 8003d38:	b510      	push	{r4, lr}
 8003d3a:	4802      	ldr	r0, [pc, #8]	; (8003d44 <__malloc_lock+0xc>)
 8003d3c:	f7ff ff0c 	bl	8003b58 <__retarget_lock_acquire_recursive>
 8003d40:	bd10      	pop	{r4, pc}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	2000033c 	.word	0x2000033c

08003d48 <__malloc_unlock>:
 8003d48:	b510      	push	{r4, lr}
 8003d4a:	4802      	ldr	r0, [pc, #8]	; (8003d54 <__malloc_unlock+0xc>)
 8003d4c:	f7ff ff05 	bl	8003b5a <__retarget_lock_release_recursive>
 8003d50:	bd10      	pop	{r4, pc}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	2000033c 	.word	0x2000033c

08003d58 <__ssputs_r>:
 8003d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	9203      	str	r2, [sp, #12]
 8003d60:	688e      	ldr	r6, [r1, #8]
 8003d62:	9a01      	ldr	r2, [sp, #4]
 8003d64:	0007      	movs	r7, r0
 8003d66:	000c      	movs	r4, r1
 8003d68:	680b      	ldr	r3, [r1, #0]
 8003d6a:	4296      	cmp	r6, r2
 8003d6c:	d831      	bhi.n	8003dd2 <__ssputs_r+0x7a>
 8003d6e:	898a      	ldrh	r2, [r1, #12]
 8003d70:	2190      	movs	r1, #144	; 0x90
 8003d72:	00c9      	lsls	r1, r1, #3
 8003d74:	420a      	tst	r2, r1
 8003d76:	d029      	beq.n	8003dcc <__ssputs_r+0x74>
 8003d78:	2003      	movs	r0, #3
 8003d7a:	6921      	ldr	r1, [r4, #16]
 8003d7c:	1a5b      	subs	r3, r3, r1
 8003d7e:	9302      	str	r3, [sp, #8]
 8003d80:	6963      	ldr	r3, [r4, #20]
 8003d82:	4343      	muls	r3, r0
 8003d84:	0fdd      	lsrs	r5, r3, #31
 8003d86:	18ed      	adds	r5, r5, r3
 8003d88:	9b01      	ldr	r3, [sp, #4]
 8003d8a:	9802      	ldr	r0, [sp, #8]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	181b      	adds	r3, r3, r0
 8003d90:	106d      	asrs	r5, r5, #1
 8003d92:	42ab      	cmp	r3, r5
 8003d94:	d900      	bls.n	8003d98 <__ssputs_r+0x40>
 8003d96:	001d      	movs	r5, r3
 8003d98:	0552      	lsls	r2, r2, #21
 8003d9a:	d529      	bpl.n	8003df0 <__ssputs_r+0x98>
 8003d9c:	0029      	movs	r1, r5
 8003d9e:	0038      	movs	r0, r7
 8003da0:	f7ff ff48 	bl	8003c34 <_malloc_r>
 8003da4:	1e06      	subs	r6, r0, #0
 8003da6:	d02d      	beq.n	8003e04 <__ssputs_r+0xac>
 8003da8:	9a02      	ldr	r2, [sp, #8]
 8003daa:	6921      	ldr	r1, [r4, #16]
 8003dac:	f000 fae7 	bl	800437e <memcpy>
 8003db0:	89a2      	ldrh	r2, [r4, #12]
 8003db2:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <__ssputs_r+0xc0>)
 8003db4:	401a      	ands	r2, r3
 8003db6:	2380      	movs	r3, #128	; 0x80
 8003db8:	4313      	orrs	r3, r2
 8003dba:	81a3      	strh	r3, [r4, #12]
 8003dbc:	9b02      	ldr	r3, [sp, #8]
 8003dbe:	6126      	str	r6, [r4, #16]
 8003dc0:	18f6      	adds	r6, r6, r3
 8003dc2:	6026      	str	r6, [r4, #0]
 8003dc4:	6165      	str	r5, [r4, #20]
 8003dc6:	9e01      	ldr	r6, [sp, #4]
 8003dc8:	1aed      	subs	r5, r5, r3
 8003dca:	60a5      	str	r5, [r4, #8]
 8003dcc:	9b01      	ldr	r3, [sp, #4]
 8003dce:	429e      	cmp	r6, r3
 8003dd0:	d900      	bls.n	8003dd4 <__ssputs_r+0x7c>
 8003dd2:	9e01      	ldr	r6, [sp, #4]
 8003dd4:	0032      	movs	r2, r6
 8003dd6:	9903      	ldr	r1, [sp, #12]
 8003dd8:	6820      	ldr	r0, [r4, #0]
 8003dda:	f000 fa9f 	bl	800431c <memmove>
 8003dde:	2000      	movs	r0, #0
 8003de0:	68a3      	ldr	r3, [r4, #8]
 8003de2:	1b9b      	subs	r3, r3, r6
 8003de4:	60a3      	str	r3, [r4, #8]
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	199b      	adds	r3, r3, r6
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	b005      	add	sp, #20
 8003dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003df0:	002a      	movs	r2, r5
 8003df2:	0038      	movs	r0, r7
 8003df4:	f000 facc 	bl	8004390 <_realloc_r>
 8003df8:	1e06      	subs	r6, r0, #0
 8003dfa:	d1df      	bne.n	8003dbc <__ssputs_r+0x64>
 8003dfc:	0038      	movs	r0, r7
 8003dfe:	6921      	ldr	r1, [r4, #16]
 8003e00:	f7ff feac 	bl	8003b5c <_free_r>
 8003e04:	230c      	movs	r3, #12
 8003e06:	2001      	movs	r0, #1
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	89a2      	ldrh	r2, [r4, #12]
 8003e0c:	3334      	adds	r3, #52	; 0x34
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	81a3      	strh	r3, [r4, #12]
 8003e12:	4240      	negs	r0, r0
 8003e14:	e7ea      	b.n	8003dec <__ssputs_r+0x94>
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	fffffb7f 	.word	0xfffffb7f

08003e1c <_svfiprintf_r>:
 8003e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e1e:	b0a1      	sub	sp, #132	; 0x84
 8003e20:	9003      	str	r0, [sp, #12]
 8003e22:	001d      	movs	r5, r3
 8003e24:	898b      	ldrh	r3, [r1, #12]
 8003e26:	000f      	movs	r7, r1
 8003e28:	0016      	movs	r6, r2
 8003e2a:	061b      	lsls	r3, r3, #24
 8003e2c:	d511      	bpl.n	8003e52 <_svfiprintf_r+0x36>
 8003e2e:	690b      	ldr	r3, [r1, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10e      	bne.n	8003e52 <_svfiprintf_r+0x36>
 8003e34:	2140      	movs	r1, #64	; 0x40
 8003e36:	f7ff fefd 	bl	8003c34 <_malloc_r>
 8003e3a:	6038      	str	r0, [r7, #0]
 8003e3c:	6138      	str	r0, [r7, #16]
 8003e3e:	2800      	cmp	r0, #0
 8003e40:	d105      	bne.n	8003e4e <_svfiprintf_r+0x32>
 8003e42:	230c      	movs	r3, #12
 8003e44:	9a03      	ldr	r2, [sp, #12]
 8003e46:	3801      	subs	r0, #1
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	b021      	add	sp, #132	; 0x84
 8003e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e4e:	2340      	movs	r3, #64	; 0x40
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	2300      	movs	r3, #0
 8003e54:	ac08      	add	r4, sp, #32
 8003e56:	6163      	str	r3, [r4, #20]
 8003e58:	3320      	adds	r3, #32
 8003e5a:	7663      	strb	r3, [r4, #25]
 8003e5c:	3310      	adds	r3, #16
 8003e5e:	76a3      	strb	r3, [r4, #26]
 8003e60:	9507      	str	r5, [sp, #28]
 8003e62:	0035      	movs	r5, r6
 8003e64:	782b      	ldrb	r3, [r5, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <_svfiprintf_r+0x52>
 8003e6a:	2b25      	cmp	r3, #37	; 0x25
 8003e6c:	d148      	bne.n	8003f00 <_svfiprintf_r+0xe4>
 8003e6e:	1bab      	subs	r3, r5, r6
 8003e70:	9305      	str	r3, [sp, #20]
 8003e72:	42b5      	cmp	r5, r6
 8003e74:	d00b      	beq.n	8003e8e <_svfiprintf_r+0x72>
 8003e76:	0032      	movs	r2, r6
 8003e78:	0039      	movs	r1, r7
 8003e7a:	9803      	ldr	r0, [sp, #12]
 8003e7c:	f7ff ff6c 	bl	8003d58 <__ssputs_r>
 8003e80:	3001      	adds	r0, #1
 8003e82:	d100      	bne.n	8003e86 <_svfiprintf_r+0x6a>
 8003e84:	e0af      	b.n	8003fe6 <_svfiprintf_r+0x1ca>
 8003e86:	6963      	ldr	r3, [r4, #20]
 8003e88:	9a05      	ldr	r2, [sp, #20]
 8003e8a:	189b      	adds	r3, r3, r2
 8003e8c:	6163      	str	r3, [r4, #20]
 8003e8e:	782b      	ldrb	r3, [r5, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d100      	bne.n	8003e96 <_svfiprintf_r+0x7a>
 8003e94:	e0a7      	b.n	8003fe6 <_svfiprintf_r+0x1ca>
 8003e96:	2201      	movs	r2, #1
 8003e98:	2300      	movs	r3, #0
 8003e9a:	4252      	negs	r2, r2
 8003e9c:	6062      	str	r2, [r4, #4]
 8003e9e:	a904      	add	r1, sp, #16
 8003ea0:	3254      	adds	r2, #84	; 0x54
 8003ea2:	1852      	adds	r2, r2, r1
 8003ea4:	1c6e      	adds	r6, r5, #1
 8003ea6:	6023      	str	r3, [r4, #0]
 8003ea8:	60e3      	str	r3, [r4, #12]
 8003eaa:	60a3      	str	r3, [r4, #8]
 8003eac:	7013      	strb	r3, [r2, #0]
 8003eae:	65a3      	str	r3, [r4, #88]	; 0x58
 8003eb0:	4b55      	ldr	r3, [pc, #340]	; (8004008 <_svfiprintf_r+0x1ec>)
 8003eb2:	2205      	movs	r2, #5
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	7831      	ldrb	r1, [r6, #0]
 8003eb8:	9305      	str	r3, [sp, #20]
 8003eba:	f000 fa55 	bl	8004368 <memchr>
 8003ebe:	1c75      	adds	r5, r6, #1
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	d11f      	bne.n	8003f04 <_svfiprintf_r+0xe8>
 8003ec4:	6822      	ldr	r2, [r4, #0]
 8003ec6:	06d3      	lsls	r3, r2, #27
 8003ec8:	d504      	bpl.n	8003ed4 <_svfiprintf_r+0xb8>
 8003eca:	2353      	movs	r3, #83	; 0x53
 8003ecc:	a904      	add	r1, sp, #16
 8003ece:	185b      	adds	r3, r3, r1
 8003ed0:	2120      	movs	r1, #32
 8003ed2:	7019      	strb	r1, [r3, #0]
 8003ed4:	0713      	lsls	r3, r2, #28
 8003ed6:	d504      	bpl.n	8003ee2 <_svfiprintf_r+0xc6>
 8003ed8:	2353      	movs	r3, #83	; 0x53
 8003eda:	a904      	add	r1, sp, #16
 8003edc:	185b      	adds	r3, r3, r1
 8003ede:	212b      	movs	r1, #43	; 0x2b
 8003ee0:	7019      	strb	r1, [r3, #0]
 8003ee2:	7833      	ldrb	r3, [r6, #0]
 8003ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ee6:	d016      	beq.n	8003f16 <_svfiprintf_r+0xfa>
 8003ee8:	0035      	movs	r5, r6
 8003eea:	2100      	movs	r1, #0
 8003eec:	200a      	movs	r0, #10
 8003eee:	68e3      	ldr	r3, [r4, #12]
 8003ef0:	782a      	ldrb	r2, [r5, #0]
 8003ef2:	1c6e      	adds	r6, r5, #1
 8003ef4:	3a30      	subs	r2, #48	; 0x30
 8003ef6:	2a09      	cmp	r2, #9
 8003ef8:	d94e      	bls.n	8003f98 <_svfiprintf_r+0x17c>
 8003efa:	2900      	cmp	r1, #0
 8003efc:	d111      	bne.n	8003f22 <_svfiprintf_r+0x106>
 8003efe:	e017      	b.n	8003f30 <_svfiprintf_r+0x114>
 8003f00:	3501      	adds	r5, #1
 8003f02:	e7af      	b.n	8003e64 <_svfiprintf_r+0x48>
 8003f04:	9b05      	ldr	r3, [sp, #20]
 8003f06:	6822      	ldr	r2, [r4, #0]
 8003f08:	1ac0      	subs	r0, r0, r3
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	4083      	lsls	r3, r0
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	002e      	movs	r6, r5
 8003f12:	6023      	str	r3, [r4, #0]
 8003f14:	e7cc      	b.n	8003eb0 <_svfiprintf_r+0x94>
 8003f16:	9b07      	ldr	r3, [sp, #28]
 8003f18:	1d19      	adds	r1, r3, #4
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	9107      	str	r1, [sp, #28]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	db01      	blt.n	8003f26 <_svfiprintf_r+0x10a>
 8003f22:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f24:	e004      	b.n	8003f30 <_svfiprintf_r+0x114>
 8003f26:	425b      	negs	r3, r3
 8003f28:	60e3      	str	r3, [r4, #12]
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	6023      	str	r3, [r4, #0]
 8003f30:	782b      	ldrb	r3, [r5, #0]
 8003f32:	2b2e      	cmp	r3, #46	; 0x2e
 8003f34:	d10a      	bne.n	8003f4c <_svfiprintf_r+0x130>
 8003f36:	786b      	ldrb	r3, [r5, #1]
 8003f38:	2b2a      	cmp	r3, #42	; 0x2a
 8003f3a:	d135      	bne.n	8003fa8 <_svfiprintf_r+0x18c>
 8003f3c:	9b07      	ldr	r3, [sp, #28]
 8003f3e:	3502      	adds	r5, #2
 8003f40:	1d1a      	adds	r2, r3, #4
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	9207      	str	r2, [sp, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	db2b      	blt.n	8003fa2 <_svfiprintf_r+0x186>
 8003f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f4c:	4e2f      	ldr	r6, [pc, #188]	; (800400c <_svfiprintf_r+0x1f0>)
 8003f4e:	2203      	movs	r2, #3
 8003f50:	0030      	movs	r0, r6
 8003f52:	7829      	ldrb	r1, [r5, #0]
 8003f54:	f000 fa08 	bl	8004368 <memchr>
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d006      	beq.n	8003f6a <_svfiprintf_r+0x14e>
 8003f5c:	2340      	movs	r3, #64	; 0x40
 8003f5e:	1b80      	subs	r0, r0, r6
 8003f60:	4083      	lsls	r3, r0
 8003f62:	6822      	ldr	r2, [r4, #0]
 8003f64:	3501      	adds	r5, #1
 8003f66:	4313      	orrs	r3, r2
 8003f68:	6023      	str	r3, [r4, #0]
 8003f6a:	7829      	ldrb	r1, [r5, #0]
 8003f6c:	2206      	movs	r2, #6
 8003f6e:	4828      	ldr	r0, [pc, #160]	; (8004010 <_svfiprintf_r+0x1f4>)
 8003f70:	1c6e      	adds	r6, r5, #1
 8003f72:	7621      	strb	r1, [r4, #24]
 8003f74:	f000 f9f8 	bl	8004368 <memchr>
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	d03c      	beq.n	8003ff6 <_svfiprintf_r+0x1da>
 8003f7c:	4b25      	ldr	r3, [pc, #148]	; (8004014 <_svfiprintf_r+0x1f8>)
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d125      	bne.n	8003fce <_svfiprintf_r+0x1b2>
 8003f82:	2207      	movs	r2, #7
 8003f84:	9b07      	ldr	r3, [sp, #28]
 8003f86:	3307      	adds	r3, #7
 8003f88:	4393      	bics	r3, r2
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	9307      	str	r3, [sp, #28]
 8003f8e:	6963      	ldr	r3, [r4, #20]
 8003f90:	9a04      	ldr	r2, [sp, #16]
 8003f92:	189b      	adds	r3, r3, r2
 8003f94:	6163      	str	r3, [r4, #20]
 8003f96:	e764      	b.n	8003e62 <_svfiprintf_r+0x46>
 8003f98:	4343      	muls	r3, r0
 8003f9a:	0035      	movs	r5, r6
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	189b      	adds	r3, r3, r2
 8003fa0:	e7a6      	b.n	8003ef0 <_svfiprintf_r+0xd4>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	425b      	negs	r3, r3
 8003fa6:	e7d0      	b.n	8003f4a <_svfiprintf_r+0x12e>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	200a      	movs	r0, #10
 8003fac:	001a      	movs	r2, r3
 8003fae:	3501      	adds	r5, #1
 8003fb0:	6063      	str	r3, [r4, #4]
 8003fb2:	7829      	ldrb	r1, [r5, #0]
 8003fb4:	1c6e      	adds	r6, r5, #1
 8003fb6:	3930      	subs	r1, #48	; 0x30
 8003fb8:	2909      	cmp	r1, #9
 8003fba:	d903      	bls.n	8003fc4 <_svfiprintf_r+0x1a8>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0c5      	beq.n	8003f4c <_svfiprintf_r+0x130>
 8003fc0:	9209      	str	r2, [sp, #36]	; 0x24
 8003fc2:	e7c3      	b.n	8003f4c <_svfiprintf_r+0x130>
 8003fc4:	4342      	muls	r2, r0
 8003fc6:	0035      	movs	r5, r6
 8003fc8:	2301      	movs	r3, #1
 8003fca:	1852      	adds	r2, r2, r1
 8003fcc:	e7f1      	b.n	8003fb2 <_svfiprintf_r+0x196>
 8003fce:	aa07      	add	r2, sp, #28
 8003fd0:	9200      	str	r2, [sp, #0]
 8003fd2:	0021      	movs	r1, r4
 8003fd4:	003a      	movs	r2, r7
 8003fd6:	4b10      	ldr	r3, [pc, #64]	; (8004018 <_svfiprintf_r+0x1fc>)
 8003fd8:	9803      	ldr	r0, [sp, #12]
 8003fda:	e000      	b.n	8003fde <_svfiprintf_r+0x1c2>
 8003fdc:	bf00      	nop
 8003fde:	9004      	str	r0, [sp, #16]
 8003fe0:	9b04      	ldr	r3, [sp, #16]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	d1d3      	bne.n	8003f8e <_svfiprintf_r+0x172>
 8003fe6:	89bb      	ldrh	r3, [r7, #12]
 8003fe8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003fea:	065b      	lsls	r3, r3, #25
 8003fec:	d400      	bmi.n	8003ff0 <_svfiprintf_r+0x1d4>
 8003fee:	e72c      	b.n	8003e4a <_svfiprintf_r+0x2e>
 8003ff0:	2001      	movs	r0, #1
 8003ff2:	4240      	negs	r0, r0
 8003ff4:	e729      	b.n	8003e4a <_svfiprintf_r+0x2e>
 8003ff6:	aa07      	add	r2, sp, #28
 8003ff8:	9200      	str	r2, [sp, #0]
 8003ffa:	0021      	movs	r1, r4
 8003ffc:	003a      	movs	r2, r7
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <_svfiprintf_r+0x1fc>)
 8004000:	9803      	ldr	r0, [sp, #12]
 8004002:	f000 f87b 	bl	80040fc <_printf_i>
 8004006:	e7ea      	b.n	8003fde <_svfiprintf_r+0x1c2>
 8004008:	08004458 	.word	0x08004458
 800400c:	0800445e 	.word	0x0800445e
 8004010:	08004462 	.word	0x08004462
 8004014:	00000000 	.word	0x00000000
 8004018:	08003d59 	.word	0x08003d59

0800401c <_printf_common>:
 800401c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800401e:	0016      	movs	r6, r2
 8004020:	9301      	str	r3, [sp, #4]
 8004022:	688a      	ldr	r2, [r1, #8]
 8004024:	690b      	ldr	r3, [r1, #16]
 8004026:	000c      	movs	r4, r1
 8004028:	9000      	str	r0, [sp, #0]
 800402a:	4293      	cmp	r3, r2
 800402c:	da00      	bge.n	8004030 <_printf_common+0x14>
 800402e:	0013      	movs	r3, r2
 8004030:	0022      	movs	r2, r4
 8004032:	6033      	str	r3, [r6, #0]
 8004034:	3243      	adds	r2, #67	; 0x43
 8004036:	7812      	ldrb	r2, [r2, #0]
 8004038:	2a00      	cmp	r2, #0
 800403a:	d001      	beq.n	8004040 <_printf_common+0x24>
 800403c:	3301      	adds	r3, #1
 800403e:	6033      	str	r3, [r6, #0]
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	069b      	lsls	r3, r3, #26
 8004044:	d502      	bpl.n	800404c <_printf_common+0x30>
 8004046:	6833      	ldr	r3, [r6, #0]
 8004048:	3302      	adds	r3, #2
 800404a:	6033      	str	r3, [r6, #0]
 800404c:	6822      	ldr	r2, [r4, #0]
 800404e:	2306      	movs	r3, #6
 8004050:	0015      	movs	r5, r2
 8004052:	401d      	ands	r5, r3
 8004054:	421a      	tst	r2, r3
 8004056:	d027      	beq.n	80040a8 <_printf_common+0x8c>
 8004058:	0023      	movs	r3, r4
 800405a:	3343      	adds	r3, #67	; 0x43
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	1e5a      	subs	r2, r3, #1
 8004060:	4193      	sbcs	r3, r2
 8004062:	6822      	ldr	r2, [r4, #0]
 8004064:	0692      	lsls	r2, r2, #26
 8004066:	d430      	bmi.n	80040ca <_printf_common+0xae>
 8004068:	0022      	movs	r2, r4
 800406a:	9901      	ldr	r1, [sp, #4]
 800406c:	9800      	ldr	r0, [sp, #0]
 800406e:	9d08      	ldr	r5, [sp, #32]
 8004070:	3243      	adds	r2, #67	; 0x43
 8004072:	47a8      	blx	r5
 8004074:	3001      	adds	r0, #1
 8004076:	d025      	beq.n	80040c4 <_printf_common+0xa8>
 8004078:	2206      	movs	r2, #6
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	2500      	movs	r5, #0
 800407e:	4013      	ands	r3, r2
 8004080:	2b04      	cmp	r3, #4
 8004082:	d105      	bne.n	8004090 <_printf_common+0x74>
 8004084:	6833      	ldr	r3, [r6, #0]
 8004086:	68e5      	ldr	r5, [r4, #12]
 8004088:	1aed      	subs	r5, r5, r3
 800408a:	43eb      	mvns	r3, r5
 800408c:	17db      	asrs	r3, r3, #31
 800408e:	401d      	ands	r5, r3
 8004090:	68a3      	ldr	r3, [r4, #8]
 8004092:	6922      	ldr	r2, [r4, #16]
 8004094:	4293      	cmp	r3, r2
 8004096:	dd01      	ble.n	800409c <_printf_common+0x80>
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	18ed      	adds	r5, r5, r3
 800409c:	2600      	movs	r6, #0
 800409e:	42b5      	cmp	r5, r6
 80040a0:	d120      	bne.n	80040e4 <_printf_common+0xc8>
 80040a2:	2000      	movs	r0, #0
 80040a4:	e010      	b.n	80040c8 <_printf_common+0xac>
 80040a6:	3501      	adds	r5, #1
 80040a8:	68e3      	ldr	r3, [r4, #12]
 80040aa:	6832      	ldr	r2, [r6, #0]
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	42ab      	cmp	r3, r5
 80040b0:	ddd2      	ble.n	8004058 <_printf_common+0x3c>
 80040b2:	0022      	movs	r2, r4
 80040b4:	2301      	movs	r3, #1
 80040b6:	9901      	ldr	r1, [sp, #4]
 80040b8:	9800      	ldr	r0, [sp, #0]
 80040ba:	9f08      	ldr	r7, [sp, #32]
 80040bc:	3219      	adds	r2, #25
 80040be:	47b8      	blx	r7
 80040c0:	3001      	adds	r0, #1
 80040c2:	d1f0      	bne.n	80040a6 <_printf_common+0x8a>
 80040c4:	2001      	movs	r0, #1
 80040c6:	4240      	negs	r0, r0
 80040c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040ca:	2030      	movs	r0, #48	; 0x30
 80040cc:	18e1      	adds	r1, r4, r3
 80040ce:	3143      	adds	r1, #67	; 0x43
 80040d0:	7008      	strb	r0, [r1, #0]
 80040d2:	0021      	movs	r1, r4
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	3145      	adds	r1, #69	; 0x45
 80040d8:	7809      	ldrb	r1, [r1, #0]
 80040da:	18a2      	adds	r2, r4, r2
 80040dc:	3243      	adds	r2, #67	; 0x43
 80040de:	3302      	adds	r3, #2
 80040e0:	7011      	strb	r1, [r2, #0]
 80040e2:	e7c1      	b.n	8004068 <_printf_common+0x4c>
 80040e4:	0022      	movs	r2, r4
 80040e6:	2301      	movs	r3, #1
 80040e8:	9901      	ldr	r1, [sp, #4]
 80040ea:	9800      	ldr	r0, [sp, #0]
 80040ec:	9f08      	ldr	r7, [sp, #32]
 80040ee:	321a      	adds	r2, #26
 80040f0:	47b8      	blx	r7
 80040f2:	3001      	adds	r0, #1
 80040f4:	d0e6      	beq.n	80040c4 <_printf_common+0xa8>
 80040f6:	3601      	adds	r6, #1
 80040f8:	e7d1      	b.n	800409e <_printf_common+0x82>
	...

080040fc <_printf_i>:
 80040fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040fe:	b08b      	sub	sp, #44	; 0x2c
 8004100:	9206      	str	r2, [sp, #24]
 8004102:	000a      	movs	r2, r1
 8004104:	3243      	adds	r2, #67	; 0x43
 8004106:	9307      	str	r3, [sp, #28]
 8004108:	9005      	str	r0, [sp, #20]
 800410a:	9204      	str	r2, [sp, #16]
 800410c:	7e0a      	ldrb	r2, [r1, #24]
 800410e:	000c      	movs	r4, r1
 8004110:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004112:	2a78      	cmp	r2, #120	; 0x78
 8004114:	d809      	bhi.n	800412a <_printf_i+0x2e>
 8004116:	2a62      	cmp	r2, #98	; 0x62
 8004118:	d80b      	bhi.n	8004132 <_printf_i+0x36>
 800411a:	2a00      	cmp	r2, #0
 800411c:	d100      	bne.n	8004120 <_printf_i+0x24>
 800411e:	e0be      	b.n	800429e <_printf_i+0x1a2>
 8004120:	497c      	ldr	r1, [pc, #496]	; (8004314 <_printf_i+0x218>)
 8004122:	9103      	str	r1, [sp, #12]
 8004124:	2a58      	cmp	r2, #88	; 0x58
 8004126:	d100      	bne.n	800412a <_printf_i+0x2e>
 8004128:	e093      	b.n	8004252 <_printf_i+0x156>
 800412a:	0026      	movs	r6, r4
 800412c:	3642      	adds	r6, #66	; 0x42
 800412e:	7032      	strb	r2, [r6, #0]
 8004130:	e022      	b.n	8004178 <_printf_i+0x7c>
 8004132:	0010      	movs	r0, r2
 8004134:	3863      	subs	r0, #99	; 0x63
 8004136:	2815      	cmp	r0, #21
 8004138:	d8f7      	bhi.n	800412a <_printf_i+0x2e>
 800413a:	f7fb ffe5 	bl	8000108 <__gnu_thumb1_case_shi>
 800413e:	0016      	.short	0x0016
 8004140:	fff6001f 	.word	0xfff6001f
 8004144:	fff6fff6 	.word	0xfff6fff6
 8004148:	001ffff6 	.word	0x001ffff6
 800414c:	fff6fff6 	.word	0xfff6fff6
 8004150:	fff6fff6 	.word	0xfff6fff6
 8004154:	003600a3 	.word	0x003600a3
 8004158:	fff60083 	.word	0xfff60083
 800415c:	00b4fff6 	.word	0x00b4fff6
 8004160:	0036fff6 	.word	0x0036fff6
 8004164:	fff6fff6 	.word	0xfff6fff6
 8004168:	0087      	.short	0x0087
 800416a:	0026      	movs	r6, r4
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	3642      	adds	r6, #66	; 0x42
 8004170:	1d11      	adds	r1, r2, #4
 8004172:	6019      	str	r1, [r3, #0]
 8004174:	6813      	ldr	r3, [r2, #0]
 8004176:	7033      	strb	r3, [r6, #0]
 8004178:	2301      	movs	r3, #1
 800417a:	e0a2      	b.n	80042c2 <_printf_i+0x1c6>
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	6809      	ldr	r1, [r1, #0]
 8004180:	1d02      	adds	r2, r0, #4
 8004182:	060d      	lsls	r5, r1, #24
 8004184:	d50b      	bpl.n	800419e <_printf_i+0xa2>
 8004186:	6805      	ldr	r5, [r0, #0]
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	2d00      	cmp	r5, #0
 800418c:	da03      	bge.n	8004196 <_printf_i+0x9a>
 800418e:	232d      	movs	r3, #45	; 0x2d
 8004190:	9a04      	ldr	r2, [sp, #16]
 8004192:	426d      	negs	r5, r5
 8004194:	7013      	strb	r3, [r2, #0]
 8004196:	4b5f      	ldr	r3, [pc, #380]	; (8004314 <_printf_i+0x218>)
 8004198:	270a      	movs	r7, #10
 800419a:	9303      	str	r3, [sp, #12]
 800419c:	e01b      	b.n	80041d6 <_printf_i+0xda>
 800419e:	6805      	ldr	r5, [r0, #0]
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	0649      	lsls	r1, r1, #25
 80041a4:	d5f1      	bpl.n	800418a <_printf_i+0x8e>
 80041a6:	b22d      	sxth	r5, r5
 80041a8:	e7ef      	b.n	800418a <_printf_i+0x8e>
 80041aa:	680d      	ldr	r5, [r1, #0]
 80041ac:	6819      	ldr	r1, [r3, #0]
 80041ae:	1d08      	adds	r0, r1, #4
 80041b0:	6018      	str	r0, [r3, #0]
 80041b2:	062e      	lsls	r6, r5, #24
 80041b4:	d501      	bpl.n	80041ba <_printf_i+0xbe>
 80041b6:	680d      	ldr	r5, [r1, #0]
 80041b8:	e003      	b.n	80041c2 <_printf_i+0xc6>
 80041ba:	066d      	lsls	r5, r5, #25
 80041bc:	d5fb      	bpl.n	80041b6 <_printf_i+0xba>
 80041be:	680d      	ldr	r5, [r1, #0]
 80041c0:	b2ad      	uxth	r5, r5
 80041c2:	4b54      	ldr	r3, [pc, #336]	; (8004314 <_printf_i+0x218>)
 80041c4:	2708      	movs	r7, #8
 80041c6:	9303      	str	r3, [sp, #12]
 80041c8:	2a6f      	cmp	r2, #111	; 0x6f
 80041ca:	d000      	beq.n	80041ce <_printf_i+0xd2>
 80041cc:	3702      	adds	r7, #2
 80041ce:	0023      	movs	r3, r4
 80041d0:	2200      	movs	r2, #0
 80041d2:	3343      	adds	r3, #67	; 0x43
 80041d4:	701a      	strb	r2, [r3, #0]
 80041d6:	6863      	ldr	r3, [r4, #4]
 80041d8:	60a3      	str	r3, [r4, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	db03      	blt.n	80041e6 <_printf_i+0xea>
 80041de:	2104      	movs	r1, #4
 80041e0:	6822      	ldr	r2, [r4, #0]
 80041e2:	438a      	bics	r2, r1
 80041e4:	6022      	str	r2, [r4, #0]
 80041e6:	2d00      	cmp	r5, #0
 80041e8:	d102      	bne.n	80041f0 <_printf_i+0xf4>
 80041ea:	9e04      	ldr	r6, [sp, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00c      	beq.n	800420a <_printf_i+0x10e>
 80041f0:	9e04      	ldr	r6, [sp, #16]
 80041f2:	0028      	movs	r0, r5
 80041f4:	0039      	movs	r1, r7
 80041f6:	f7fc f817 	bl	8000228 <__aeabi_uidivmod>
 80041fa:	9b03      	ldr	r3, [sp, #12]
 80041fc:	3e01      	subs	r6, #1
 80041fe:	5c5b      	ldrb	r3, [r3, r1]
 8004200:	7033      	strb	r3, [r6, #0]
 8004202:	002b      	movs	r3, r5
 8004204:	0005      	movs	r5, r0
 8004206:	429f      	cmp	r7, r3
 8004208:	d9f3      	bls.n	80041f2 <_printf_i+0xf6>
 800420a:	2f08      	cmp	r7, #8
 800420c:	d109      	bne.n	8004222 <_printf_i+0x126>
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	07db      	lsls	r3, r3, #31
 8004212:	d506      	bpl.n	8004222 <_printf_i+0x126>
 8004214:	6862      	ldr	r2, [r4, #4]
 8004216:	6923      	ldr	r3, [r4, #16]
 8004218:	429a      	cmp	r2, r3
 800421a:	dc02      	bgt.n	8004222 <_printf_i+0x126>
 800421c:	2330      	movs	r3, #48	; 0x30
 800421e:	3e01      	subs	r6, #1
 8004220:	7033      	strb	r3, [r6, #0]
 8004222:	9b04      	ldr	r3, [sp, #16]
 8004224:	1b9b      	subs	r3, r3, r6
 8004226:	6123      	str	r3, [r4, #16]
 8004228:	9b07      	ldr	r3, [sp, #28]
 800422a:	0021      	movs	r1, r4
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	9805      	ldr	r0, [sp, #20]
 8004230:	9b06      	ldr	r3, [sp, #24]
 8004232:	aa09      	add	r2, sp, #36	; 0x24
 8004234:	f7ff fef2 	bl	800401c <_printf_common>
 8004238:	3001      	adds	r0, #1
 800423a:	d147      	bne.n	80042cc <_printf_i+0x1d0>
 800423c:	2001      	movs	r0, #1
 800423e:	4240      	negs	r0, r0
 8004240:	b00b      	add	sp, #44	; 0x2c
 8004242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004244:	2220      	movs	r2, #32
 8004246:	6809      	ldr	r1, [r1, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	6022      	str	r2, [r4, #0]
 800424c:	2278      	movs	r2, #120	; 0x78
 800424e:	4932      	ldr	r1, [pc, #200]	; (8004318 <_printf_i+0x21c>)
 8004250:	9103      	str	r1, [sp, #12]
 8004252:	0021      	movs	r1, r4
 8004254:	3145      	adds	r1, #69	; 0x45
 8004256:	700a      	strb	r2, [r1, #0]
 8004258:	6819      	ldr	r1, [r3, #0]
 800425a:	6822      	ldr	r2, [r4, #0]
 800425c:	c920      	ldmia	r1!, {r5}
 800425e:	0610      	lsls	r0, r2, #24
 8004260:	d402      	bmi.n	8004268 <_printf_i+0x16c>
 8004262:	0650      	lsls	r0, r2, #25
 8004264:	d500      	bpl.n	8004268 <_printf_i+0x16c>
 8004266:	b2ad      	uxth	r5, r5
 8004268:	6019      	str	r1, [r3, #0]
 800426a:	07d3      	lsls	r3, r2, #31
 800426c:	d502      	bpl.n	8004274 <_printf_i+0x178>
 800426e:	2320      	movs	r3, #32
 8004270:	4313      	orrs	r3, r2
 8004272:	6023      	str	r3, [r4, #0]
 8004274:	2710      	movs	r7, #16
 8004276:	2d00      	cmp	r5, #0
 8004278:	d1a9      	bne.n	80041ce <_printf_i+0xd2>
 800427a:	2220      	movs	r2, #32
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	4393      	bics	r3, r2
 8004280:	6023      	str	r3, [r4, #0]
 8004282:	e7a4      	b.n	80041ce <_printf_i+0xd2>
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	680d      	ldr	r5, [r1, #0]
 8004288:	1d10      	adds	r0, r2, #4
 800428a:	6949      	ldr	r1, [r1, #20]
 800428c:	6018      	str	r0, [r3, #0]
 800428e:	6813      	ldr	r3, [r2, #0]
 8004290:	062e      	lsls	r6, r5, #24
 8004292:	d501      	bpl.n	8004298 <_printf_i+0x19c>
 8004294:	6019      	str	r1, [r3, #0]
 8004296:	e002      	b.n	800429e <_printf_i+0x1a2>
 8004298:	066d      	lsls	r5, r5, #25
 800429a:	d5fb      	bpl.n	8004294 <_printf_i+0x198>
 800429c:	8019      	strh	r1, [r3, #0]
 800429e:	2300      	movs	r3, #0
 80042a0:	9e04      	ldr	r6, [sp, #16]
 80042a2:	6123      	str	r3, [r4, #16]
 80042a4:	e7c0      	b.n	8004228 <_printf_i+0x12c>
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	1d11      	adds	r1, r2, #4
 80042aa:	6019      	str	r1, [r3, #0]
 80042ac:	6816      	ldr	r6, [r2, #0]
 80042ae:	2100      	movs	r1, #0
 80042b0:	0030      	movs	r0, r6
 80042b2:	6862      	ldr	r2, [r4, #4]
 80042b4:	f000 f858 	bl	8004368 <memchr>
 80042b8:	2800      	cmp	r0, #0
 80042ba:	d001      	beq.n	80042c0 <_printf_i+0x1c4>
 80042bc:	1b80      	subs	r0, r0, r6
 80042be:	6060      	str	r0, [r4, #4]
 80042c0:	6863      	ldr	r3, [r4, #4]
 80042c2:	6123      	str	r3, [r4, #16]
 80042c4:	2300      	movs	r3, #0
 80042c6:	9a04      	ldr	r2, [sp, #16]
 80042c8:	7013      	strb	r3, [r2, #0]
 80042ca:	e7ad      	b.n	8004228 <_printf_i+0x12c>
 80042cc:	0032      	movs	r2, r6
 80042ce:	6923      	ldr	r3, [r4, #16]
 80042d0:	9906      	ldr	r1, [sp, #24]
 80042d2:	9805      	ldr	r0, [sp, #20]
 80042d4:	9d07      	ldr	r5, [sp, #28]
 80042d6:	47a8      	blx	r5
 80042d8:	3001      	adds	r0, #1
 80042da:	d0af      	beq.n	800423c <_printf_i+0x140>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	079b      	lsls	r3, r3, #30
 80042e0:	d415      	bmi.n	800430e <_printf_i+0x212>
 80042e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e4:	68e0      	ldr	r0, [r4, #12]
 80042e6:	4298      	cmp	r0, r3
 80042e8:	daaa      	bge.n	8004240 <_printf_i+0x144>
 80042ea:	0018      	movs	r0, r3
 80042ec:	e7a8      	b.n	8004240 <_printf_i+0x144>
 80042ee:	0022      	movs	r2, r4
 80042f0:	2301      	movs	r3, #1
 80042f2:	9906      	ldr	r1, [sp, #24]
 80042f4:	9805      	ldr	r0, [sp, #20]
 80042f6:	9e07      	ldr	r6, [sp, #28]
 80042f8:	3219      	adds	r2, #25
 80042fa:	47b0      	blx	r6
 80042fc:	3001      	adds	r0, #1
 80042fe:	d09d      	beq.n	800423c <_printf_i+0x140>
 8004300:	3501      	adds	r5, #1
 8004302:	68e3      	ldr	r3, [r4, #12]
 8004304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004306:	1a9b      	subs	r3, r3, r2
 8004308:	42ab      	cmp	r3, r5
 800430a:	dcf0      	bgt.n	80042ee <_printf_i+0x1f2>
 800430c:	e7e9      	b.n	80042e2 <_printf_i+0x1e6>
 800430e:	2500      	movs	r5, #0
 8004310:	e7f7      	b.n	8004302 <_printf_i+0x206>
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	08004469 	.word	0x08004469
 8004318:	0800447a 	.word	0x0800447a

0800431c <memmove>:
 800431c:	b510      	push	{r4, lr}
 800431e:	4288      	cmp	r0, r1
 8004320:	d902      	bls.n	8004328 <memmove+0xc>
 8004322:	188b      	adds	r3, r1, r2
 8004324:	4298      	cmp	r0, r3
 8004326:	d303      	bcc.n	8004330 <memmove+0x14>
 8004328:	2300      	movs	r3, #0
 800432a:	e007      	b.n	800433c <memmove+0x20>
 800432c:	5c8b      	ldrb	r3, [r1, r2]
 800432e:	5483      	strb	r3, [r0, r2]
 8004330:	3a01      	subs	r2, #1
 8004332:	d2fb      	bcs.n	800432c <memmove+0x10>
 8004334:	bd10      	pop	{r4, pc}
 8004336:	5ccc      	ldrb	r4, [r1, r3]
 8004338:	54c4      	strb	r4, [r0, r3]
 800433a:	3301      	adds	r3, #1
 800433c:	429a      	cmp	r2, r3
 800433e:	d1fa      	bne.n	8004336 <memmove+0x1a>
 8004340:	e7f8      	b.n	8004334 <memmove+0x18>
	...

08004344 <_sbrk_r>:
 8004344:	2300      	movs	r3, #0
 8004346:	b570      	push	{r4, r5, r6, lr}
 8004348:	4d06      	ldr	r5, [pc, #24]	; (8004364 <_sbrk_r+0x20>)
 800434a:	0004      	movs	r4, r0
 800434c:	0008      	movs	r0, r1
 800434e:	602b      	str	r3, [r5, #0]
 8004350:	f7fc fcac 	bl	8000cac <_sbrk>
 8004354:	1c43      	adds	r3, r0, #1
 8004356:	d103      	bne.n	8004360 <_sbrk_r+0x1c>
 8004358:	682b      	ldr	r3, [r5, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d000      	beq.n	8004360 <_sbrk_r+0x1c>
 800435e:	6023      	str	r3, [r4, #0]
 8004360:	bd70      	pop	{r4, r5, r6, pc}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	20000338 	.word	0x20000338

08004368 <memchr>:
 8004368:	b2c9      	uxtb	r1, r1
 800436a:	1882      	adds	r2, r0, r2
 800436c:	4290      	cmp	r0, r2
 800436e:	d101      	bne.n	8004374 <memchr+0xc>
 8004370:	2000      	movs	r0, #0
 8004372:	4770      	bx	lr
 8004374:	7803      	ldrb	r3, [r0, #0]
 8004376:	428b      	cmp	r3, r1
 8004378:	d0fb      	beq.n	8004372 <memchr+0xa>
 800437a:	3001      	adds	r0, #1
 800437c:	e7f6      	b.n	800436c <memchr+0x4>

0800437e <memcpy>:
 800437e:	2300      	movs	r3, #0
 8004380:	b510      	push	{r4, lr}
 8004382:	429a      	cmp	r2, r3
 8004384:	d100      	bne.n	8004388 <memcpy+0xa>
 8004386:	bd10      	pop	{r4, pc}
 8004388:	5ccc      	ldrb	r4, [r1, r3]
 800438a:	54c4      	strb	r4, [r0, r3]
 800438c:	3301      	adds	r3, #1
 800438e:	e7f8      	b.n	8004382 <memcpy+0x4>

08004390 <_realloc_r>:
 8004390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004392:	0007      	movs	r7, r0
 8004394:	000e      	movs	r6, r1
 8004396:	0014      	movs	r4, r2
 8004398:	2900      	cmp	r1, #0
 800439a:	d105      	bne.n	80043a8 <_realloc_r+0x18>
 800439c:	0011      	movs	r1, r2
 800439e:	f7ff fc49 	bl	8003c34 <_malloc_r>
 80043a2:	0005      	movs	r5, r0
 80043a4:	0028      	movs	r0, r5
 80043a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043a8:	2a00      	cmp	r2, #0
 80043aa:	d103      	bne.n	80043b4 <_realloc_r+0x24>
 80043ac:	f7ff fbd6 	bl	8003b5c <_free_r>
 80043b0:	0025      	movs	r5, r4
 80043b2:	e7f7      	b.n	80043a4 <_realloc_r+0x14>
 80043b4:	f000 f81b 	bl	80043ee <_malloc_usable_size_r>
 80043b8:	9001      	str	r0, [sp, #4]
 80043ba:	4284      	cmp	r4, r0
 80043bc:	d803      	bhi.n	80043c6 <_realloc_r+0x36>
 80043be:	0035      	movs	r5, r6
 80043c0:	0843      	lsrs	r3, r0, #1
 80043c2:	42a3      	cmp	r3, r4
 80043c4:	d3ee      	bcc.n	80043a4 <_realloc_r+0x14>
 80043c6:	0021      	movs	r1, r4
 80043c8:	0038      	movs	r0, r7
 80043ca:	f7ff fc33 	bl	8003c34 <_malloc_r>
 80043ce:	1e05      	subs	r5, r0, #0
 80043d0:	d0e8      	beq.n	80043a4 <_realloc_r+0x14>
 80043d2:	9b01      	ldr	r3, [sp, #4]
 80043d4:	0022      	movs	r2, r4
 80043d6:	429c      	cmp	r4, r3
 80043d8:	d900      	bls.n	80043dc <_realloc_r+0x4c>
 80043da:	001a      	movs	r2, r3
 80043dc:	0031      	movs	r1, r6
 80043de:	0028      	movs	r0, r5
 80043e0:	f7ff ffcd 	bl	800437e <memcpy>
 80043e4:	0031      	movs	r1, r6
 80043e6:	0038      	movs	r0, r7
 80043e8:	f7ff fbb8 	bl	8003b5c <_free_r>
 80043ec:	e7da      	b.n	80043a4 <_realloc_r+0x14>

080043ee <_malloc_usable_size_r>:
 80043ee:	1f0b      	subs	r3, r1, #4
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	1f18      	subs	r0, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	da01      	bge.n	80043fc <_malloc_usable_size_r+0xe>
 80043f8:	580b      	ldr	r3, [r1, r0]
 80043fa:	18c0      	adds	r0, r0, r3
 80043fc:	4770      	bx	lr
	...

08004400 <_init>:
 8004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004406:	bc08      	pop	{r3}
 8004408:	469e      	mov	lr, r3
 800440a:	4770      	bx	lr

0800440c <_fini>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004412:	bc08      	pop	{r3}
 8004414:	469e      	mov	lr, r3
 8004416:	4770      	bx	lr
